// <auto-generated />
using System;
using Megarobo.KunPengLIMS.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Megarobo.KunPengLIMS.Infrastructure.Migrations
{
    [DbContext(typeof(LimsDbContext))]
    [Migration("20210812071745_AddKeycloakForUser")]
    partial class AddKeycloakForUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Button", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Button");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41e4f028-10bd-440e-b7e7-94a9b37f2c8b"),
                            Code = "QueryUser",
                            MenuId = new Guid("e04e260d-191f-41fd-af75-0054eb4dbe67"),
                            Name = "查询用户"
                        },
                        new
                        {
                            Id = new Guid("60bdd565-15ba-4e24-ad96-5726bf083bde"),
                            Code = "AddUser",
                            MenuId = new Guid("e04e260d-191f-41fd-af75-0054eb4dbe67"),
                            Name = "新增用户"
                        },
                        new
                        {
                            Id = new Guid("d5e191d8-2563-4d5f-898e-23ace8ebea9b"),
                            Code = "UpdateUser",
                            MenuId = new Guid("e04e260d-191f-41fd-af75-0054eb4dbe67"),
                            Name = "修改用户"
                        },
                        new
                        {
                            Id = new Guid("6afb1c9e-12e7-4472-a295-f1a14235d5fa"),
                            Code = "DeleteUser",
                            MenuId = new Guid("e04e260d-191f-41fd-af75-0054eb4dbe67"),
                            Name = "删除用户"
                        },
                        new
                        {
                            Id = new Guid("3c98cec7-9a76-401a-9498-22e00db9771e"),
                            Code = "ResetUser",
                            MenuId = new Guid("e04e260d-191f-41fd-af75-0054eb4dbe67"),
                            Name = "重置用户"
                        },
                        new
                        {
                            Id = new Guid("63715e6c-02fc-4605-8fb8-d3bf39684d73"),
                            Code = "QuerySkill",
                            MenuId = new Guid("0fbe40fb-7df0-4b50-9c51-dfb08bb3e515"),
                            Name = "查询技能"
                        },
                        new
                        {
                            Id = new Guid("9577a936-7543-4010-a40c-7934484dd1ad"),
                            Code = "AddSkill",
                            MenuId = new Guid("0fbe40fb-7df0-4b50-9c51-dfb08bb3e515"),
                            Name = "新增技能"
                        },
                        new
                        {
                            Id = new Guid("48348da4-7785-4cbe-8bcd-71ef17e420ee"),
                            Code = "UpdateSkill",
                            MenuId = new Guid("0fbe40fb-7df0-4b50-9c51-dfb08bb3e515"),
                            Name = "修改技能"
                        },
                        new
                        {
                            Id = new Guid("7b8414ce-feda-46f7-ac30-c64992b03075"),
                            Code = "DeleteSkill",
                            MenuId = new Guid("0fbe40fb-7df0-4b50-9c51-dfb08bb3e515"),
                            Name = "删除技能"
                        },
                        new
                        {
                            Id = new Guid("1abe037f-a8c9-4b22-a7b9-88f3c2b30367"),
                            Code = "QueryDepartment",
                            MenuId = new Guid("2275ae11-7e97-4acc-9768-420a3273b61f"),
                            Name = "查询部门"
                        },
                        new
                        {
                            Id = new Guid("34515b31-8d97-4c29-a813-1906cb94a247"),
                            Code = "AddDepartment",
                            MenuId = new Guid("2275ae11-7e97-4acc-9768-420a3273b61f"),
                            Name = "新增部门"
                        },
                        new
                        {
                            Id = new Guid("82951be4-3193-4017-85d7-6e15444401f6"),
                            Code = "UpdateDepartment",
                            MenuId = new Guid("2275ae11-7e97-4acc-9768-420a3273b61f"),
                            Name = "修改部门"
                        },
                        new
                        {
                            Id = new Guid("59705a12-6dd9-41ee-bd0d-37107f7b46b0"),
                            Code = "DeleteDepartment",
                            MenuId = new Guid("2275ae11-7e97-4acc-9768-420a3273b61f"),
                            Name = "删除部门"
                        },
                        new
                        {
                            Id = new Guid("996e0dbb-f743-48a8-81cd-6df1ad991de8"),
                            Code = "QueryRole",
                            MenuId = new Guid("b2f58900-da73-45aa-aa0e-a16e360ec083"),
                            Name = "查询角色"
                        },
                        new
                        {
                            Id = new Guid("864c9672-7512-4c65-8766-870451426cad"),
                            Code = "AddRole",
                            MenuId = new Guid("b2f58900-da73-45aa-aa0e-a16e360ec083"),
                            Name = "新增角色"
                        },
                        new
                        {
                            Id = new Guid("f660e6e5-20f3-40a0-86bf-eeae458a0f2f"),
                            Code = "UpdateRole",
                            MenuId = new Guid("b2f58900-da73-45aa-aa0e-a16e360ec083"),
                            Name = "修改角色"
                        },
                        new
                        {
                            Id = new Guid("b3bbaefb-7b10-4bea-9635-990abe3f3392"),
                            Code = "DeleteRole",
                            MenuId = new Guid("b2f58900-da73-45aa-aa0e-a16e360ec083"),
                            Name = "删除角色"
                        },
                        new
                        {
                            Id = new Guid("ff6c4aae-796a-444d-ac0e-59c0972fe5a5"),
                            Code = "QueryMenu",
                            MenuId = new Guid("7668542f-9d4f-487d-b2e8-02f456ebd58c"),
                            Name = "查询菜单"
                        },
                        new
                        {
                            Id = new Guid("4e2f2827-36c9-4483-a88d-ef7e326db58e"),
                            Code = "AddMenu",
                            MenuId = new Guid("7668542f-9d4f-487d-b2e8-02f456ebd58c"),
                            Name = "新增菜单"
                        },
                        new
                        {
                            Id = new Guid("a553b22d-7c75-484f-a261-dfba1c0c9ae1"),
                            Code = "UpdateMenu",
                            MenuId = new Guid("7668542f-9d4f-487d-b2e8-02f456ebd58c"),
                            Name = "修改菜单"
                        },
                        new
                        {
                            Id = new Guid("24e95cea-3ec6-41b0-9cf4-54b80ff0f80e"),
                            Code = "DeleteMenu",
                            MenuId = new Guid("7668542f-9d4f-487d-b2e8-02f456ebd58c"),
                            Name = "删除菜单"
                        },
                        new
                        {
                            Id = new Guid("ed3ce10d-d04c-4df8-8eb6-5900e9a3c7be"),
                            Code = "QueryDict",
                            MenuId = new Guid("62a01185-d6e6-451e-b087-72a738673f57"),
                            Name = "查询字典项"
                        },
                        new
                        {
                            Id = new Guid("88095553-c22e-40f9-b091-7f62d80ffc84"),
                            Code = "AddDict",
                            MenuId = new Guid("62a01185-d6e6-451e-b087-72a738673f57"),
                            Name = "新增字典项"
                        },
                        new
                        {
                            Id = new Guid("8da6c8f3-e8a0-452c-b85a-fcadc066e59f"),
                            Code = "UpdateDict",
                            MenuId = new Guid("62a01185-d6e6-451e-b087-72a738673f57"),
                            Name = "修改字典项"
                        },
                        new
                        {
                            Id = new Guid("d5be33f7-2d79-4e6f-8f89-1dabba2324c2"),
                            Code = "DeleteDict",
                            MenuId = new Guid("62a01185-d6e6-451e-b087-72a738673f57"),
                            Name = "删除字典项"
                        },
                        new
                        {
                            Id = new Guid("7fb87582-2a8c-4b93-a056-15b677b1e8c2"),
                            Code = "UpdateDictValue",
                            MenuId = new Guid("62a01185-d6e6-451e-b087-72a738673f57"),
                            Name = "修改字典项值"
                        },
                        new
                        {
                            Id = new Guid("d7aaf6d2-5b87-45d6-bb4b-c6776bc155f4"),
                            Code = "QueryLog",
                            MenuId = new Guid("8acdff78-1d39-40cf-8ad5-d6115f28c430"),
                            Name = "查询日志"
                        },
                        new
                        {
                            Id = new Guid("bea2e30f-220e-406a-9476-0edbfe879958"),
                            Code = "QuerySpecies",
                            MenuId = new Guid("4b47572d-a5ec-4503-9ae5-021c3a12cb63"),
                            Name = "查询物种"
                        },
                        new
                        {
                            Id = new Guid("569524f8-99bc-46ad-bfee-cb06abb36f2f"),
                            Code = "AddSpecies",
                            MenuId = new Guid("4b47572d-a5ec-4503-9ae5-021c3a12cb63"),
                            Name = "新增物种"
                        },
                        new
                        {
                            Id = new Guid("9ef7ad4e-5fc4-46f3-a38b-095e6cff5ea8"),
                            Code = "UpdateSpecies",
                            MenuId = new Guid("4b47572d-a5ec-4503-9ae5-021c3a12cb63"),
                            Name = "修改物种"
                        },
                        new
                        {
                            Id = new Guid("7db44cad-d955-4f76-8bbd-2fd8c17295a5"),
                            Code = "DeleteSpecies",
                            MenuId = new Guid("4b47572d-a5ec-4503-9ae5-021c3a12cb63"),
                            Name = "删除物种"
                        },
                        new
                        {
                            Id = new Guid("e9b9e587-efda-4feb-963c-267159d3bec5"),
                            Code = "QueryCell",
                            MenuId = new Guid("483eef78-0cdc-4556-bf7a-76661fa9656e"),
                            Name = "查询细胞"
                        },
                        new
                        {
                            Id = new Guid("f67edf8e-76cb-46b9-98bd-9011f5c6a3f1"),
                            Code = "AddCell",
                            MenuId = new Guid("483eef78-0cdc-4556-bf7a-76661fa9656e"),
                            Name = "新增细胞"
                        },
                        new
                        {
                            Id = new Guid("3597e756-35bb-4113-ad15-0d76e9c22b1d"),
                            Code = "UpdateCell",
                            MenuId = new Guid("483eef78-0cdc-4556-bf7a-76661fa9656e"),
                            Name = "修改细胞"
                        },
                        new
                        {
                            Id = new Guid("e883adbc-4478-49b2-9118-d6f3c5fae96b"),
                            Code = "DeleteCell",
                            MenuId = new Guid("483eef78-0cdc-4556-bf7a-76661fa9656e"),
                            Name = "删除细胞"
                        },
                        new
                        {
                            Id = new Guid("44e0bb2f-1a6b-404b-8d9e-416776ac82a4"),
                            Code = "QueryPosition",
                            MenuId = new Guid("e46c867e-5b51-41d8-8dad-0c60dd415733"),
                            Name = "查询位置"
                        },
                        new
                        {
                            Id = new Guid("a8f8e339-db87-426b-9cb7-d8540a7a046d"),
                            Code = "QueryLabware",
                            MenuId = new Guid("70d6fdf7-350f-4a58-9c11-f72893603f4e"),
                            Name = "查询耗材"
                        },
                        new
                        {
                            Id = new Guid("41a5f324-732b-4d49-b12c-e9cb7f8bef36"),
                            Code = "QueryReagent",
                            MenuId = new Guid("0e5514fc-9d4c-4689-82e9-14b2851368f0"),
                            Name = "查询试剂"
                        },
                        new
                        {
                            Id = new Guid("537bc3e6-0bbb-47e6-b255-3f099b46995e"),
                            Code = "QueryDevice",
                            MenuId = new Guid("8120c246-590a-4996-93d5-35bf261e2bb0"),
                            Name = "查询设备"
                        },
                        new
                        {
                            Id = new Guid("65873886-145c-43f9-8643-095f0b196ca1"),
                            Code = "AddDevice",
                            MenuId = new Guid("8120c246-590a-4996-93d5-35bf261e2bb0"),
                            Name = "新增设备"
                        },
                        new
                        {
                            Id = new Guid("518e404f-d899-4b00-8463-d250625a1e49"),
                            Code = "UpdateDevice",
                            MenuId = new Guid("8120c246-590a-4996-93d5-35bf261e2bb0"),
                            Name = "修改设备"
                        },
                        new
                        {
                            Id = new Guid("5a004db8-44ed-493e-bb4a-25a9cf300888"),
                            Code = "DeleteDevice",
                            MenuId = new Guid("8120c246-590a-4996-93d5-35bf261e2bb0"),
                            Name = "删除设备"
                        },
                        new
                        {
                            Id = new Guid("2f752d77-7a78-4d24-ada8-a74578695ead"),
                            Code = "QuerySample",
                            MenuId = new Guid("cdab005c-7450-4996-80d9-167312ebe525"),
                            Name = "查询样本"
                        },
                        new
                        {
                            Id = new Guid("c2c8f976-e713-4aab-8f83-221c77afd2e1"),
                            Code = "AddSample",
                            MenuId = new Guid("cdab005c-7450-4996-80d9-167312ebe525"),
                            Name = "新增样本"
                        },
                        new
                        {
                            Id = new Guid("528f32ff-59ac-4e11-a1c4-a1d09010a78c"),
                            Code = "UpdateSample",
                            MenuId = new Guid("cdab005c-7450-4996-80d9-167312ebe525"),
                            Name = "修改样本"
                        },
                        new
                        {
                            Id = new Guid("b517b498-2ebb-4a91-b580-e8747298479e"),
                            Code = "DeleteSample",
                            MenuId = new Guid("cdab005c-7450-4996-80d9-167312ebe525"),
                            Name = "删除样本"
                        },
                        new
                        {
                            Id = new Guid("bc3933ab-b75f-4c3b-ab0e-a4dd5c1db528"),
                            Code = "QueryMyTask",
                            MenuId = new Guid("5772a024-23b0-4580-ae7c-86d73302b65f"),
                            Name = "查询我的任务"
                        },
                        new
                        {
                            Id = new Guid("587bc25f-3cea-476b-b3e4-b16a558569e1"),
                            Code = "AddMyTask",
                            MenuId = new Guid("5772a024-23b0-4580-ae7c-86d73302b65f"),
                            Name = "新增我的任务"
                        },
                        new
                        {
                            Id = new Guid("d2dbfa10-b2a7-4072-9cb5-80661cbc433a"),
                            Code = "UpdateMyTask",
                            MenuId = new Guid("5772a024-23b0-4580-ae7c-86d73302b65f"),
                            Name = "修改我的任务"
                        },
                        new
                        {
                            Id = new Guid("1bef0ea1-f45a-4077-8aa5-63759a44d009"),
                            Code = "DeleteMyTask",
                            MenuId = new Guid("5772a024-23b0-4580-ae7c-86d73302b65f"),
                            Name = "删除我的任务"
                        },
                        new
                        {
                            Id = new Guid("e37cf14f-4b2e-466c-9590-52e59e4aa027"),
                            Code = "QueryTask",
                            MenuId = new Guid("af173660-2653-4444-a492-d87dcc64d8e1"),
                            Name = "查询今日任务"
                        },
                        new
                        {
                            Id = new Guid("b85c18bb-6d8d-4701-a9be-0760478ce2fe"),
                            Code = "AddTask",
                            MenuId = new Guid("af173660-2653-4444-a492-d87dcc64d8e1"),
                            Name = "新增今日任务"
                        },
                        new
                        {
                            Id = new Guid("fe0404c0-2ce4-45b4-83aa-73e3b3f5de90"),
                            Code = "UpdateTask",
                            MenuId = new Guid("af173660-2653-4444-a492-d87dcc64d8e1"),
                            Name = "修改今日任务"
                        },
                        new
                        {
                            Id = new Guid("3b6d50d5-ac68-46ef-9ded-50c59552a842"),
                            Code = "DeleteTask",
                            MenuId = new Guid("af173660-2653-4444-a492-d87dcc64d8e1"),
                            Name = "删除今日任务"
                        },
                        new
                        {
                            Id = new Guid("f2964994-982f-4bf3-8c5d-542f15ca97cf"),
                            Code = "QueryProtocolStep",
                            MenuId = new Guid("cf054f8c-fa9a-4dcf-927e-326e6d1535ff"),
                            Name = "查询ProtocolStep"
                        },
                        new
                        {
                            Id = new Guid("0c4a3643-b92c-45f0-be26-d8862ba17473"),
                            Code = "AddProtocolStep",
                            MenuId = new Guid("cf054f8c-fa9a-4dcf-927e-326e6d1535ff"),
                            Name = "新增ProtocolStep"
                        },
                        new
                        {
                            Id = new Guid("fe22819d-039e-4457-8c21-6deaaccdcc38"),
                            Code = "UpdateProtocolStep",
                            MenuId = new Guid("cf054f8c-fa9a-4dcf-927e-326e6d1535ff"),
                            Name = "修改ProtocolStep"
                        },
                        new
                        {
                            Id = new Guid("917477df-f210-4620-af01-5a46342cdc3f"),
                            Code = "DeleteProtocolStep",
                            MenuId = new Guid("cf054f8c-fa9a-4dcf-927e-326e6d1535ff"),
                            Name = "删除ProtocolStep"
                        },
                        new
                        {
                            Id = new Guid("0753780a-fec5-43d7-b4f6-7c85d6168f32"),
                            Code = "QueryNode",
                            MenuId = new Guid("9dccfd45-9e5f-42b1-8e45-4b1f5e19fa1c"),
                            Name = "查询节点"
                        },
                        new
                        {
                            Id = new Guid("d2f3961c-9585-4f8e-9f19-696eca575b58"),
                            Code = "AddNode",
                            MenuId = new Guid("9dccfd45-9e5f-42b1-8e45-4b1f5e19fa1c"),
                            Name = "新增节点"
                        },
                        new
                        {
                            Id = new Guid("6bac127c-eab5-4d38-8b96-0f758ae06b74"),
                            Code = "UpdateNode",
                            MenuId = new Guid("9dccfd45-9e5f-42b1-8e45-4b1f5e19fa1c"),
                            Name = "修改节点"
                        },
                        new
                        {
                            Id = new Guid("f22fc9aa-fa46-45f2-bfe9-20497d3d73db"),
                            Code = "DeleteNode",
                            MenuId = new Guid("9dccfd45-9e5f-42b1-8e45-4b1f5e19fa1c"),
                            Name = "删除节点"
                        },
                        new
                        {
                            Id = new Guid("c0f3b370-fdd3-4450-be71-e6d0144d1356"),
                            Code = "QueryProject",
                            MenuId = new Guid("5b49bee1-2c1c-4a8d-a676-658b3e4430c6"),
                            Name = "查询项目"
                        },
                        new
                        {
                            Id = new Guid("f413f546-a528-490d-ab7a-53f3222a3be7"),
                            Code = "AddProject",
                            MenuId = new Guid("5b49bee1-2c1c-4a8d-a676-658b3e4430c6"),
                            Name = "新增项目"
                        },
                        new
                        {
                            Id = new Guid("db0b36f8-c8ed-4f06-bd4a-f9e5b08367be"),
                            Code = "UpdateProject",
                            MenuId = new Guid("5b49bee1-2c1c-4a8d-a676-658b3e4430c6"),
                            Name = "修改项目"
                        },
                        new
                        {
                            Id = new Guid("7a4d2bf4-4c8f-4b0d-b672-48d7c5fbec77"),
                            Code = "DeleteProject",
                            MenuId = new Guid("5b49bee1-2c1c-4a8d-a676-658b3e4430c6"),
                            Name = "删除项目"
                        },
                        new
                        {
                            Id = new Guid("f65dd8ac-709b-42b9-9199-44f54e2ebbda"),
                            Code = "QueryTake",
                            MenuId = new Guid("8516a30a-ddeb-4ffa-8e1f-a0f256982ea3"),
                            Name = "查询Take"
                        },
                        new
                        {
                            Id = new Guid("7b0ed01d-d2de-49ef-a1c0-5d48b04bffc9"),
                            Code = "AddTake",
                            MenuId = new Guid("8516a30a-ddeb-4ffa-8e1f-a0f256982ea3"),
                            Name = "新增Take"
                        },
                        new
                        {
                            Id = new Guid("d892d07f-c7a1-4798-8b16-1f7c56e99780"),
                            Code = "UpdateTake",
                            MenuId = new Guid("8516a30a-ddeb-4ffa-8e1f-a0f256982ea3"),
                            Name = "修改Take"
                        },
                        new
                        {
                            Id = new Guid("f6a1be4a-a07f-47a8-97e8-75f0ff5da92e"),
                            Code = "DeleteTake",
                            MenuId = new Guid("8516a30a-ddeb-4ffa-8e1f-a0f256982ea3"),
                            Name = "删除Take"
                        },
                        new
                        {
                            Id = new Guid("9c0cf228-3e75-42e4-a416-134f7484fbac"),
                            Code = "QuerySchedule",
                            MenuId = new Guid("cd105e87-9f3f-4ab1-b6a0-442cec8b21d3"),
                            Name = "查询排程"
                        },
                        new
                        {
                            Id = new Guid("2f71b5d2-214f-4493-8918-a61181c5b6c9"),
                            Code = "QueryOrder",
                            MenuId = new Guid("9e06a75d-e518-41b1-9a05-381f079815ef"),
                            Name = "查询订单"
                        },
                        new
                        {
                            Id = new Guid("f675d4cc-d3ed-4d03-adb5-5778507543ee"),
                            Code = "AddOrder",
                            MenuId = new Guid("9e06a75d-e518-41b1-9a05-381f079815ef"),
                            Name = "新增订单"
                        },
                        new
                        {
                            Id = new Guid("d1db6575-5201-402d-a40a-66aba04257e4"),
                            Code = "UpdateOrder",
                            MenuId = new Guid("9e06a75d-e518-41b1-9a05-381f079815ef"),
                            Name = "修改订单"
                        },
                        new
                        {
                            Id = new Guid("5e5dc83a-ddfa-4a68-8312-e4e60097dd28"),
                            Code = "CloneMolecule",
                            MenuId = new Guid("9e06a75d-e518-41b1-9a05-381f079815ef"),
                            Name = "分子克隆"
                        },
                        new
                        {
                            Id = new Guid("e7b0cf04-fc1f-4d9a-a2fa-992439fa91d8"),
                            Code = "PurifyPlasmid",
                            MenuId = new Guid("9e06a75d-e518-41b1-9a05-381f079815ef"),
                            Name = "质粒纯化"
                        },
                        new
                        {
                            Id = new Guid("25d840ae-f019-4ec3-b315-89ee62df4a5f"),
                            Code = "StartProduce",
                            MenuId = new Guid("9e06a75d-e518-41b1-9a05-381f079815ef"),
                            Name = "进入生产"
                        },
                        new
                        {
                            Id = new Guid("989836ea-4dd3-43d8-bf98-b8cfd1a1a063"),
                            Code = "Warehousing",
                            MenuId = new Guid("9e06a75d-e518-41b1-9a05-381f079815ef"),
                            Name = "QC&入库"
                        },
                        new
                        {
                            Id = new Guid("eabdf8f2-d85e-4188-94fc-524e9daae7d4"),
                            Code = "FinishOrder",
                            MenuId = new Guid("9e06a75d-e518-41b1-9a05-381f079815ef"),
                            Name = "完成"
                        },
                        new
                        {
                            Id = new Guid("c33057cd-0bc9-46ab-9462-25d86c427fe2"),
                            Code = "CancelOrder",
                            MenuId = new Guid("9e06a75d-e518-41b1-9a05-381f079815ef"),
                            Name = "取消订单"
                        },
                        new
                        {
                            Id = new Guid("15e6c97d-2cbe-4ddc-ab57-987165aceb4d"),
                            Code = "QueryCloning",
                            MenuId = new Guid("e42ebc6a-eb5e-46d8-ac16-a68f260f608b"),
                            Name = "查询分子克隆"
                        },
                        new
                        {
                            Id = new Guid("aab6d3ee-b714-4193-84a0-4ba63447beef"),
                            Code = "FinishCloning",
                            MenuId = new Guid("e42ebc6a-eb5e-46d8-ac16-a68f260f608b"),
                            Name = "完成分子克隆"
                        },
                        new
                        {
                            Id = new Guid("5940cf4f-7f5d-4828-a871-b3af72cbebc6"),
                            Code = "QueryPurifying",
                            MenuId = new Guid("89f3fc6d-ccee-4ba4-8b52-e8eeea4a3801"),
                            Name = "查询质粒纯化"
                        },
                        new
                        {
                            Id = new Guid("a7ba2a79-27e1-49a3-96b1-2ea605d008ac"),
                            Code = "FinishPurifying",
                            MenuId = new Guid("89f3fc6d-ccee-4ba4-8b52-e8eeea4a3801"),
                            Name = "完成质粒纯化"
                        },
                        new
                        {
                            Id = new Guid("82eaeecf-4a31-42df-9a95-af93cf273cd4"),
                            Code = "QueryQpcr",
                            MenuId = new Guid("32e55730-da04-4727-9a86-d4e237d0acb8"),
                            Name = "查询qPCR检测"
                        },
                        new
                        {
                            Id = new Guid("543b82d8-d632-4ec3-813d-f8688f51f814"),
                            Code = "FinishQpcr",
                            MenuId = new Guid("32e55730-da04-4727-9a86-d4e237d0acb8"),
                            Name = "完成qPCR检测"
                        },
                        new
                        {
                            Id = new Guid("de735f71-af06-4c29-b988-4bb8b1bb0852"),
                            Code = "QuerySdspage",
                            MenuId = new Guid("5214c5e6-ce9d-4238-9379-414eac3b1344"),
                            Name = "查询SDS-PAGE检测"
                        },
                        new
                        {
                            Id = new Guid("0b75cf62-a277-4eac-b7f3-f37248f3436a"),
                            Code = "FinishSdspage",
                            MenuId = new Guid("5214c5e6-ce9d-4238-9379-414eac3b1344"),
                            Name = "完成SDS-PAGE检测"
                        },
                        new
                        {
                            Id = new Guid("7d74d804-1e97-45c1-961f-49bef3ad6c07"),
                            Code = "QuerySterility",
                            MenuId = new Guid("eacdf1bb-f6e0-43c3-b498-97e99e295706"),
                            Name = "查询无菌检测"
                        },
                        new
                        {
                            Id = new Guid("b8277854-2e0a-448d-bb78-b3da45ca4ae1"),
                            Code = "FinishSterility",
                            MenuId = new Guid("eacdf1bb-f6e0-43c3-b498-97e99e295706"),
                            Name = "完成无菌检测"
                        },
                        new
                        {
                            Id = new Guid("5cc960fb-419a-4b2b-b47c-f6cecff9b4f8"),
                            Code = "QueryWarehousing",
                            MenuId = new Guid("dc79b3e4-55ef-4d0d-836a-59d0b66ee89a"),
                            Name = "查询入库记录"
                        },
                        new
                        {
                            Id = new Guid("3079c9ce-194f-4d35-b804-84da9bcb4ad9"),
                            Code = "FinishWarehousing",
                            MenuId = new Guid("dc79b3e4-55ef-4d0d-836a-59d0b66ee89a"),
                            Name = "完成入库记录"
                        },
                        new
                        {
                            Id = new Guid("c5b9a41e-9d97-427a-a297-a9de1f80b1e8"),
                            Code = "QueryShipment",
                            MenuId = new Guid("35c95ea1-6026-479b-bb66-ba7073cf05df"),
                            Name = "查询发货记录"
                        },
                        new
                        {
                            Id = new Guid("cc27065f-9106-4a66-bf29-d114c570555f"),
                            Code = "FinishShipment",
                            MenuId = new Guid("35c95ea1-6026-479b-bb66-ba7073cf05df"),
                            Name = "完成发货记录"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Cell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("AtccId")
                        .HasColumnType("text");

                    b.Property<string>("AtccUrl")
                        .HasColumnType("text");

                    b.Property<int>("BioSafetyLevel")
                        .HasColumnType("integer");

                    b.Property<string>("CellCode")
                        .HasColumnType("text");

                    b.Property<string>("CellLineType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CrisprOrderLevel")
                        .HasColumnType("integer");

                    b.Property<string>("CultivationMethod")
                        .HasColumnType("text");

                    b.Property<string>("Disease")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Race")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<Guid?>("SpeciesId")
                        .HasColumnType("uuid");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("TissueType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Cell");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Manager")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e25a0038-98fe-42d8-bc52-36a03002807e"),
                            ContactNumber = "13245679856",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 801, DateTimeKind.Local).AddTicks(7395),
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manager = "张三",
                            Name = "深圳镁伽",
                            OrdinalNumber = 1,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModelNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.DeviceParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceParameters");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.DictItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d1ed805-ba2b-4490-bc2f-e56ff09f1644"),
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(5922),
                            IsDeleted = false,
                            KeyName = "组织类型",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "cervix,lung,ELSE"
                        },
                        new
                        {
                            Id = new Guid("ac7b1d2b-212f-4c81-9444-4ce7c6dab043"),
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(6382),
                            IsDeleted = false,
                            KeyName = "细胞系种类",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "epithelial,ELSE"
                        },
                        new
                        {
                            Id = new Guid("0448af08-4102-4427-8fbb-e15765c07beb"),
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(6400),
                            IsDeleted = false,
                            KeyName = "培养方式",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "Adherent,Suspension,ELSE"
                        },
                        new
                        {
                            Id = new Guid("b2809c58-95f4-4c0b-ab49-3d2ae6d93414"),
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(6402),
                            IsDeleted = false,
                            KeyName = "疾病",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "Carcinoma,Adenocarcinoma,ELSE"
                        },
                        new
                        {
                            Id = new Guid("50d283fa-2baa-4b56-ba09-e0a20ce09578"),
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(6410),
                            IsDeleted = false,
                            KeyName = "性别",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "Female,Male,ELSE"
                        },
                        new
                        {
                            Id = new Guid("df801f66-506a-43cc-8691-d4a3680fb8df"),
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(6412),
                            IsDeleted = false,
                            KeyName = "种族",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "Black,Caucasian,Asian,ELSE"
                        },
                        new
                        {
                            Id = new Guid("18dc1ea7-ba57-4f46-a66e-797878e6c42e"),
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(6415),
                            IsDeleted = false,
                            KeyName = "体积",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "μL,mL",
                            Value = "Carcinoma,Adenocarcinoma,ELSE"
                        },
                        new
                        {
                            Id = new Guid("372b9baa-e758-4d4b-9b1b-5b07415663a3"),
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(6417),
                            IsDeleted = false,
                            KeyName = "浓度",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "%,mg/ml"
                        },
                        new
                        {
                            Id = new Guid("36a362dd-a2dc-451d-84c9-9d29f7af653e"),
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(6420),
                            IsDeleted = false,
                            KeyName = "供应商",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "ThermoFisher,全式金,诺维赞,碧云天,Gibco,Merck,invitrogen"
                        },
                        new
                        {
                            Id = new Guid("73485e1a-ef3e-471c-8ebb-c153b6335318"),
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(6424),
                            IsDeleted = false,
                            KeyName = "质量",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "ng,μg,mg,g,kg"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Labware", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArticleNumber")
                        .HasColumnType("text");

                    b.Property<int>("AvailableHole")
                        .HasColumnType("integer");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("Specification")
                        .HasColumnType("text");

                    b.Property<string>("Subclass")
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Labwares");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.LabwareUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProtocolStepId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolStepId");

                    b.ToTable("LabwareUsage");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Line", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EndNodeID")
                        .HasColumnType("uuid");

                    b.Property<string>("Lable")
                        .HasColumnType("text");

                    b.Property<Guid>("ProcessID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StartNodeID")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EndNodeID");

                    b.HasIndex("ProcessID");

                    b.HasIndex("StartNodeID");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.LogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("OperationName")
                        .HasColumnType("text");

                    b.Property<DateTime>("OperationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OperationType")
                        .HasColumnType("text");

                    b.Property<string>("Operator")
                        .HasColumnType("text");

                    b.Property<string>("RequestParameters")
                        .HasColumnType("text");

                    b.Property<string>("RequestUrl")
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogItems");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Component")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("Redirect")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7c2ce2c-22be-433b-97cb-db958dc497c6"),
                            Code = "系统管理",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(890),
                            Hidden = false,
                            Icon = "el-icon-s-tools",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system",
                            OrdinalNumber = 1,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/system",
                            Redirect = "/system/user",
                            Title = "系统管理",
                            Type = 0,
                            Url = "/system"
                        },
                        new
                        {
                            Id = new Guid("e04e260d-191f-41fd-af75-0054eb4dbe67"),
                            Code = "用户管理",
                            Component = "system/user/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(2684),
                            Hidden = false,
                            Icon = "el-icon-user",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_user",
                            OrdinalNumber = 2,
                            ParentId = new Guid("b7c2ce2c-22be-433b-97cb-db958dc497c6"),
                            Path = "user",
                            Title = "用户管理",
                            Type = 1,
                            Url = "user"
                        },
                        new
                        {
                            Id = new Guid("0fbe40fb-7df0-4b50-9c51-dfb08bb3e515"),
                            Code = "技能管理",
                            Component = "system/skill/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3484),
                            Hidden = false,
                            Icon = "skill",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_skill",
                            OrdinalNumber = 3,
                            ParentId = new Guid("b7c2ce2c-22be-433b-97cb-db958dc497c6"),
                            Path = "skill",
                            Title = "技能管理",
                            Type = 1,
                            Url = "skill"
                        },
                        new
                        {
                            Id = new Guid("2275ae11-7e97-4acc-9768-420a3273b61f"),
                            Code = "部门管理",
                            Component = "system/department/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3501),
                            Hidden = false,
                            Icon = "peoples",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_department",
                            OrdinalNumber = 4,
                            ParentId = new Guid("b7c2ce2c-22be-433b-97cb-db958dc497c6"),
                            Path = "department",
                            Title = "部门管理",
                            Type = 1,
                            Url = "department"
                        },
                        new
                        {
                            Id = new Guid("b2f58900-da73-45aa-aa0e-a16e360ec083"),
                            Code = "角色管理",
                            Component = "system/role/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3570),
                            Hidden = false,
                            Icon = "el-icon-s-opportunity",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_role",
                            OrdinalNumber = 5,
                            ParentId = new Guid("b7c2ce2c-22be-433b-97cb-db958dc497c6"),
                            Path = "role",
                            Title = "角色管理",
                            Type = 1,
                            Url = "role"
                        },
                        new
                        {
                            Id = new Guid("7668542f-9d4f-487d-b2e8-02f456ebd58c"),
                            Code = "菜单管理",
                            Component = "system/menu/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3580),
                            Hidden = false,
                            Icon = "el-icon-menu",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_menu",
                            OrdinalNumber = 6,
                            ParentId = new Guid("b7c2ce2c-22be-433b-97cb-db958dc497c6"),
                            Path = "menu",
                            Title = "菜单管理",
                            Type = 1,
                            Url = "menu"
                        },
                        new
                        {
                            Id = new Guid("62a01185-d6e6-451e-b087-72a738673f57"),
                            Code = "字典项管理",
                            Component = "system/dictionary/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3587),
                            Hidden = false,
                            Icon = "el-icon-tickets",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_dictionary",
                            OrdinalNumber = 7,
                            ParentId = new Guid("b7c2ce2c-22be-433b-97cb-db958dc497c6"),
                            Path = "dictionary",
                            Title = "字典项管理",
                            Type = 1,
                            Url = "dictionary"
                        },
                        new
                        {
                            Id = new Guid("8acdff78-1d39-40cf-8ad5-d6115f28c430"),
                            Code = "日志管理",
                            Component = "system/logs/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3597),
                            Hidden = false,
                            Icon = "el-icon-edit-outline",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_log",
                            OrdinalNumber = 8,
                            ParentId = new Guid("b7c2ce2c-22be-433b-97cb-db958dc497c6"),
                            Path = "log",
                            Title = "日志管理",
                            Type = 1,
                            Url = "log"
                        },
                        new
                        {
                            Id = new Guid("ba8818ba-a0ad-44c2-a762-4402e8756147"),
                            Code = "基础数据配置",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3601),
                            Hidden = false,
                            Icon = "el-icon-files",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic",
                            OrdinalNumber = 9,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/basic",
                            Redirect = "/basic/user",
                            Title = "基础数据配置",
                            Type = 0,
                            Url = "/basic"
                        },
                        new
                        {
                            Id = new Guid("4b47572d-a5ec-4503-9ae5-021c3a12cb63"),
                            Code = "物种管理",
                            Component = "basic/species/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3613),
                            Hidden = false,
                            Icon = "el-icon-more",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_species",
                            OrdinalNumber = 10,
                            ParentId = new Guid("ba8818ba-a0ad-44c2-a762-4402e8756147"),
                            Path = "species",
                            Title = "物种管理",
                            Type = 1,
                            Url = "species"
                        },
                        new
                        {
                            Id = new Guid("483eef78-0cdc-4556-bf7a-76661fa9656e"),
                            Code = "细胞管理",
                            Component = "basic/cells/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3620),
                            Hidden = false,
                            Icon = "cells",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_cells",
                            OrdinalNumber = 11,
                            ParentId = new Guid("ba8818ba-a0ad-44c2-a762-4402e8756147"),
                            Path = "cells",
                            Title = "细胞管理",
                            Type = 1,
                            Url = "cells"
                        },
                        new
                        {
                            Id = new Guid("e46c867e-5b51-41d8-8dad-0c60dd415733"),
                            Code = "位置管理",
                            Component = "basic/place/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3629),
                            Hidden = false,
                            Icon = "el-icon-location",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_place",
                            OrdinalNumber = 12,
                            ParentId = new Guid("ba8818ba-a0ad-44c2-a762-4402e8756147"),
                            Path = "place",
                            Title = "位置管理",
                            Type = 1,
                            Url = "place"
                        },
                        new
                        {
                            Id = new Guid("70d6fdf7-350f-4a58-9c11-f72893603f4e"),
                            Code = "耗材管理",
                            Component = "basic/material/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3671),
                            Hidden = false,
                            Icon = "el-icon-printer",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_material",
                            OrdinalNumber = 13,
                            ParentId = new Guid("ba8818ba-a0ad-44c2-a762-4402e8756147"),
                            Path = "material",
                            Title = "耗材管理",
                            Type = 1,
                            Url = "material"
                        },
                        new
                        {
                            Id = new Guid("0e5514fc-9d4c-4689-82e9-14b2851368f0"),
                            Code = "试剂管理",
                            Component = "basic/reagent/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3675),
                            Hidden = false,
                            Icon = "chemistry",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_reagent",
                            OrdinalNumber = 14,
                            ParentId = new Guid("ba8818ba-a0ad-44c2-a762-4402e8756147"),
                            Path = "reagent",
                            Title = "试剂管理",
                            Type = 1,
                            Url = "reagent"
                        },
                        new
                        {
                            Id = new Guid("8120c246-590a-4996-93d5-35bf261e2bb0"),
                            Code = "设备管理",
                            Component = "basic/equipment/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3681),
                            Hidden = false,
                            Icon = "el-icon-suitcase",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_equipment",
                            OrdinalNumber = 15,
                            ParentId = new Guid("ba8818ba-a0ad-44c2-a762-4402e8756147"),
                            Path = "equipment",
                            Title = "设备管理",
                            Type = 1,
                            Url = "equipment"
                        },
                        new
                        {
                            Id = new Guid("cdab005c-7450-4996-80d9-167312ebe525"),
                            Code = "样本管理",
                            Component = "sample/sample/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3688),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "sample_sample",
                            OrdinalNumber = 16,
                            ParentId = new Guid("ba8818ba-a0ad-44c2-a762-4402e8756147"),
                            Path = "sample",
                            Title = "样本管理",
                            Type = 1,
                            Url = "sample"
                        },
                        new
                        {
                            Id = new Guid("b667994f-4214-4667-b2c1-c10b179e4d1e"),
                            Code = "任务管理",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3697),
                            Hidden = false,
                            Icon = "el-icon-document-copy",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "task",
                            OrdinalNumber = 17,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/task",
                            Redirect = "/task/today",
                            Title = "任务管理",
                            Type = 0,
                            Url = "/task"
                        },
                        new
                        {
                            Id = new Guid("5772a024-23b0-4580-ae7c-86d73302b65f"),
                            Code = "我的任务",
                            Component = "task/myTask/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3700),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "task_owner",
                            OrdinalNumber = 18,
                            ParentId = new Guid("b667994f-4214-4667-b2c1-c10b179e4d1e"),
                            Path = "owner",
                            Title = "我的任务",
                            Type = 1,
                            Url = "owner"
                        },
                        new
                        {
                            Id = new Guid("af173660-2653-4444-a492-d87dcc64d8e1"),
                            Code = "今日任务",
                            Component = "task/today/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3709),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "task_today",
                            OrdinalNumber = 19,
                            ParentId = new Guid("b667994f-4214-4667-b2c1-c10b179e4d1e"),
                            Path = "today",
                            Title = "今日任务",
                            Type = 1,
                            Url = "today"
                        },
                        new
                        {
                            Id = new Guid("09db861b-1672-4e71-87f3-82b1ffc59d49"),
                            Code = "项目管理",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3716),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "itiems",
                            OrdinalNumber = 20,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/items",
                            Redirect = "/items",
                            Title = "项目管理",
                            Type = 0,
                            Url = "/items"
                        },
                        new
                        {
                            Id = new Guid("cf054f8c-fa9a-4dcf-927e-326e6d1535ff"),
                            Code = "Protocol Step管理",
                            Component = "items/proStep/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3719),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_protocol",
                            OrdinalNumber = 21,
                            ParentId = new Guid("09db861b-1672-4e71-87f3-82b1ffc59d49"),
                            Path = "protocol",
                            Title = "Protocol Step管理",
                            Type = 1,
                            Url = "protocol"
                        },
                        new
                        {
                            Id = new Guid("9dccfd45-9e5f-42b1-8e45-4b1f5e19fa1c"),
                            Code = "节点管理",
                            Component = "items/node/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3728),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_node",
                            OrdinalNumber = 22,
                            ParentId = new Guid("09db861b-1672-4e71-87f3-82b1ffc59d49"),
                            Path = "node",
                            Title = "节点管理",
                            Type = 1,
                            Url = "node"
                        },
                        new
                        {
                            Id = new Guid("5b49bee1-2c1c-4a8d-a676-658b3e4430c6"),
                            Code = "项目管理",
                            Component = "items/project/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3737),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_project",
                            OrdinalNumber = 23,
                            ParentId = new Guid("09db861b-1672-4e71-87f3-82b1ffc59d49"),
                            Path = "project",
                            Title = "项目管理",
                            Type = 1,
                            Url = "project"
                        },
                        new
                        {
                            Id = new Guid("8516a30a-ddeb-4ffa-8e1f-a0f256982ea3"),
                            Code = "Take管理",
                            Component = "items/task/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3744),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_take",
                            OrdinalNumber = 24,
                            ParentId = new Guid("09db861b-1672-4e71-87f3-82b1ffc59d49"),
                            Path = "take",
                            Title = "Take管理",
                            Type = 1,
                            Url = "take"
                        },
                        new
                        {
                            Id = new Guid("cd105e87-9f3f-4ab1-b6a0-442cec8b21d3"),
                            Code = "排程",
                            Component = "items/aps/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3777),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_aps",
                            OrdinalNumber = 25,
                            ParentId = new Guid("09db861b-1672-4e71-87f3-82b1ffc59d49"),
                            Path = "aps",
                            Title = "排程",
                            Type = 1,
                            Url = "aps"
                        },
                        new
                        {
                            Id = new Guid("eb75637e-eaa0-46f2-b2bf-563cd95c5b8d"),
                            Code = "生产管理",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3782),
                            Hidden = false,
                            Icon = "el-icon-s-cooperation",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce",
                            OrdinalNumber = 26,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/produce",
                            Redirect = "/produce",
                            Title = "生产管理",
                            Type = 0,
                            Url = "/produce"
                        },
                        new
                        {
                            Id = new Guid("9e06a75d-e518-41b1-9a05-381f079815ef"),
                            Code = "订单",
                            Component = "produce/order/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3785),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_order",
                            OrdinalNumber = 27,
                            ParentId = new Guid("eb75637e-eaa0-46f2-b2bf-563cd95c5b8d"),
                            Path = "order",
                            Title = "订单",
                            Type = 1,
                            Url = "order"
                        },
                        new
                        {
                            Id = new Guid("e42ebc6a-eb5e-46d8-ac16-a68f260f608b"),
                            Code = "分子克隆",
                            Component = "produce/clone/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3799),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_clone",
                            OrdinalNumber = 28,
                            ParentId = new Guid("eb75637e-eaa0-46f2-b2bf-563cd95c5b8d"),
                            Path = "clone",
                            Title = "分子克隆",
                            Type = 1,
                            Url = "clone"
                        },
                        new
                        {
                            Id = new Guid("89f3fc6d-ccee-4ba4-8b52-e8eeea4a3801"),
                            Code = "质粒纯化",
                            Component = "produce/plasmid/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3806),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_plasmid",
                            OrdinalNumber = 29,
                            ParentId = new Guid("eb75637e-eaa0-46f2-b2bf-563cd95c5b8d"),
                            Path = "plasmid",
                            Title = "质粒纯化",
                            Type = 1,
                            Url = "plasmid"
                        },
                        new
                        {
                            Id = new Guid("32e55730-da04-4727-9a86-d4e237d0acb8"),
                            Code = "qPCR检测",
                            Component = "produce/qPCR/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3811),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_qPCR",
                            OrdinalNumber = 30,
                            ParentId = new Guid("eb75637e-eaa0-46f2-b2bf-563cd95c5b8d"),
                            Path = "qPCR",
                            Title = "qPCR检测",
                            Type = 1,
                            Url = "qPCR"
                        },
                        new
                        {
                            Id = new Guid("5214c5e6-ce9d-4238-9379-414eac3b1344"),
                            Code = "SDS-PAGE检测",
                            Component = "produce/SDS/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3817),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_SDS",
                            OrdinalNumber = 31,
                            ParentId = new Guid("eb75637e-eaa0-46f2-b2bf-563cd95c5b8d"),
                            Path = "SDS",
                            Title = "SDS-PAGE检测",
                            Type = 1,
                            Url = "SDS"
                        },
                        new
                        {
                            Id = new Guid("eacdf1bb-f6e0-43c3-b498-97e99e295706"),
                            Code = "无菌检测",
                            Component = "produce/asepticCheck/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3822),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_asepticCheck",
                            OrdinalNumber = 32,
                            ParentId = new Guid("eb75637e-eaa0-46f2-b2bf-563cd95c5b8d"),
                            Path = "asepticCheck",
                            Title = "无菌检测",
                            Type = 1,
                            Url = "asepticCheck"
                        },
                        new
                        {
                            Id = new Guid("dc79b3e4-55ef-4d0d-836a-59d0b66ee89a"),
                            Code = "入库登记",
                            Component = "produce/wareHouse/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3827),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_wareHouse",
                            OrdinalNumber = 33,
                            ParentId = new Guid("eb75637e-eaa0-46f2-b2bf-563cd95c5b8d"),
                            Path = "wareHouse",
                            Title = "入库登记",
                            Type = 1,
                            Url = "wareHouse"
                        },
                        new
                        {
                            Id = new Guid("35c95ea1-6026-479b-bb66-ba7073cf05df"),
                            Code = "发货记录",
                            Component = "produce/deliverGoods/index",
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 802, DateTimeKind.Local).AddTicks(3834),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_deliverGoods",
                            OrdinalNumber = 34,
                            ParentId = new Guid("eb75637e-eaa0-46f2-b2bf-563cd95c5b8d"),
                            Path = "deliverGoods",
                            Title = "发货记录",
                            Type = 1,
                            Url = "deliverGoods"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.MolecularCloning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("CarrierStructure")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Enzyme")
                        .HasColumnType("text");

                    b.Property<string>("EnzymeCuttingPicture")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Od")
                        .HasColumnType("real");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("MolecularCloning");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CanGenerateResultFile")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanGenerateResultSample")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InteractiveTime")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("NodeTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uuid");

                    b.Property<string>("TimeWaitToRun")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NodeTypeId");

                    b.HasIndex("ProcessId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeDevice", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "DeviceId");

                    b.HasIndex("DeviceId");

                    b.ToTable("NodeDevices");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeLabware", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabwareId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "LabwareId");

                    b.HasIndex("LabwareId");

                    b.ToTable("NodeLabwares");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeProtocolStep", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProtocolStepId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "ProtocolStepId");

                    b.HasIndex("ProtocolStepId");

                    b.ToTable("NodeProtocolSteps");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeReagent", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReagentId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "ReagentId");

                    b.HasIndex("ReagentId");

                    b.ToTable("NodeReagents");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AnalysisReport")
                        .HasColumnType("text");

                    b.Property<Guid>("AnalysisReportFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("CarrierStructure")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("DemandTiter")
                        .HasColumnType("real");

                    b.Property<DateTime>("FinisheDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InsertionSequence")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<int>("PackagingTrayNumber")
                        .HasColumnType("integer");

                    b.Property<float>("Plasmid1")
                        .HasColumnType("real");

                    b.Property<float>("Plasmid2")
                        .HasColumnType("real");

                    b.Property<float>("Plasmid3")
                        .HasColumnType("real");

                    b.Property<float>("Plasmid4")
                        .HasColumnType("real");

                    b.Property<int>("PlasmidSize")
                        .HasColumnType("integer");

                    b.Property<int>("PlasmidType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SeroType")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<float>("SubpackageCubage")
                        .HasColumnType("real");

                    b.Property<int>("SubpackageNumber")
                        .HasColumnType("integer");

                    b.Property<float>("TotelDemand")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.PlasmidPurification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("CarrierStructure")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Enzyme")
                        .HasColumnType("text");

                    b.Property<string>("EnzymeCuttingPicture")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Od")
                        .HasColumnType("real");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlasmidSize")
                        .HasColumnType("integer");

                    b.Property<int>("PlasmidType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("PlasmidPurification");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PlannedStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectTask", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("ProjectId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectUser", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DeviceParameterId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceParameterId");

                    b.ToTable("ProtocolSteps");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.QpcrDetection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DetectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<float>("Titer")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("QpcrDetection");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Reagent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArticleNumber")
                        .HasColumnType("text");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Reagents");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ReagentUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("SolutionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SolutionId");

                    b.ToTable("ReagentUsage");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 801, DateTimeKind.Local).AddTicks(8986),
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "超级管理员"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.RoleMenu", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ButtonId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "MenuId", "ButtonId");

                    b.HasIndex("ButtonId");

                    b.HasIndex("MenuId");

                    b.ToTable("RoleMenu");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("e04e260d-191f-41fd-af75-0054eb4dbe67"),
                            ButtonId = new Guid("41e4f028-10bd-440e-b7e7-94a9b37f2c8b")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("e04e260d-191f-41fd-af75-0054eb4dbe67"),
                            ButtonId = new Guid("60bdd565-15ba-4e24-ad96-5726bf083bde")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("e04e260d-191f-41fd-af75-0054eb4dbe67"),
                            ButtonId = new Guid("d5e191d8-2563-4d5f-898e-23ace8ebea9b")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("e04e260d-191f-41fd-af75-0054eb4dbe67"),
                            ButtonId = new Guid("6afb1c9e-12e7-4472-a295-f1a14235d5fa")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("e04e260d-191f-41fd-af75-0054eb4dbe67"),
                            ButtonId = new Guid("3c98cec7-9a76-401a-9498-22e00db9771e")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("0fbe40fb-7df0-4b50-9c51-dfb08bb3e515"),
                            ButtonId = new Guid("63715e6c-02fc-4605-8fb8-d3bf39684d73")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("0fbe40fb-7df0-4b50-9c51-dfb08bb3e515"),
                            ButtonId = new Guid("9577a936-7543-4010-a40c-7934484dd1ad")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("0fbe40fb-7df0-4b50-9c51-dfb08bb3e515"),
                            ButtonId = new Guid("48348da4-7785-4cbe-8bcd-71ef17e420ee")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("0fbe40fb-7df0-4b50-9c51-dfb08bb3e515"),
                            ButtonId = new Guid("7b8414ce-feda-46f7-ac30-c64992b03075")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("2275ae11-7e97-4acc-9768-420a3273b61f"),
                            ButtonId = new Guid("1abe037f-a8c9-4b22-a7b9-88f3c2b30367")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("2275ae11-7e97-4acc-9768-420a3273b61f"),
                            ButtonId = new Guid("34515b31-8d97-4c29-a813-1906cb94a247")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("2275ae11-7e97-4acc-9768-420a3273b61f"),
                            ButtonId = new Guid("82951be4-3193-4017-85d7-6e15444401f6")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("2275ae11-7e97-4acc-9768-420a3273b61f"),
                            ButtonId = new Guid("59705a12-6dd9-41ee-bd0d-37107f7b46b0")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("b2f58900-da73-45aa-aa0e-a16e360ec083"),
                            ButtonId = new Guid("996e0dbb-f743-48a8-81cd-6df1ad991de8")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("b2f58900-da73-45aa-aa0e-a16e360ec083"),
                            ButtonId = new Guid("864c9672-7512-4c65-8766-870451426cad")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("b2f58900-da73-45aa-aa0e-a16e360ec083"),
                            ButtonId = new Guid("f660e6e5-20f3-40a0-86bf-eeae458a0f2f")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("b2f58900-da73-45aa-aa0e-a16e360ec083"),
                            ButtonId = new Guid("b3bbaefb-7b10-4bea-9635-990abe3f3392")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("7668542f-9d4f-487d-b2e8-02f456ebd58c"),
                            ButtonId = new Guid("ff6c4aae-796a-444d-ac0e-59c0972fe5a5")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("7668542f-9d4f-487d-b2e8-02f456ebd58c"),
                            ButtonId = new Guid("4e2f2827-36c9-4483-a88d-ef7e326db58e")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("7668542f-9d4f-487d-b2e8-02f456ebd58c"),
                            ButtonId = new Guid("a553b22d-7c75-484f-a261-dfba1c0c9ae1")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("7668542f-9d4f-487d-b2e8-02f456ebd58c"),
                            ButtonId = new Guid("24e95cea-3ec6-41b0-9cf4-54b80ff0f80e")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("62a01185-d6e6-451e-b087-72a738673f57"),
                            ButtonId = new Guid("ed3ce10d-d04c-4df8-8eb6-5900e9a3c7be")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("62a01185-d6e6-451e-b087-72a738673f57"),
                            ButtonId = new Guid("88095553-c22e-40f9-b091-7f62d80ffc84")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("62a01185-d6e6-451e-b087-72a738673f57"),
                            ButtonId = new Guid("8da6c8f3-e8a0-452c-b85a-fcadc066e59f")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("62a01185-d6e6-451e-b087-72a738673f57"),
                            ButtonId = new Guid("d5be33f7-2d79-4e6f-8f89-1dabba2324c2")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("62a01185-d6e6-451e-b087-72a738673f57"),
                            ButtonId = new Guid("7fb87582-2a8c-4b93-a056-15b677b1e8c2")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("8acdff78-1d39-40cf-8ad5-d6115f28c430"),
                            ButtonId = new Guid("d7aaf6d2-5b87-45d6-bb4b-c6776bc155f4")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("4b47572d-a5ec-4503-9ae5-021c3a12cb63"),
                            ButtonId = new Guid("bea2e30f-220e-406a-9476-0edbfe879958")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("4b47572d-a5ec-4503-9ae5-021c3a12cb63"),
                            ButtonId = new Guid("569524f8-99bc-46ad-bfee-cb06abb36f2f")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("4b47572d-a5ec-4503-9ae5-021c3a12cb63"),
                            ButtonId = new Guid("9ef7ad4e-5fc4-46f3-a38b-095e6cff5ea8")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("4b47572d-a5ec-4503-9ae5-021c3a12cb63"),
                            ButtonId = new Guid("7db44cad-d955-4f76-8bbd-2fd8c17295a5")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("483eef78-0cdc-4556-bf7a-76661fa9656e"),
                            ButtonId = new Guid("e9b9e587-efda-4feb-963c-267159d3bec5")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("483eef78-0cdc-4556-bf7a-76661fa9656e"),
                            ButtonId = new Guid("f67edf8e-76cb-46b9-98bd-9011f5c6a3f1")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("483eef78-0cdc-4556-bf7a-76661fa9656e"),
                            ButtonId = new Guid("3597e756-35bb-4113-ad15-0d76e9c22b1d")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("483eef78-0cdc-4556-bf7a-76661fa9656e"),
                            ButtonId = new Guid("e883adbc-4478-49b2-9118-d6f3c5fae96b")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("e46c867e-5b51-41d8-8dad-0c60dd415733"),
                            ButtonId = new Guid("44e0bb2f-1a6b-404b-8d9e-416776ac82a4")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("70d6fdf7-350f-4a58-9c11-f72893603f4e"),
                            ButtonId = new Guid("a8f8e339-db87-426b-9cb7-d8540a7a046d")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("0e5514fc-9d4c-4689-82e9-14b2851368f0"),
                            ButtonId = new Guid("41a5f324-732b-4d49-b12c-e9cb7f8bef36")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("8120c246-590a-4996-93d5-35bf261e2bb0"),
                            ButtonId = new Guid("537bc3e6-0bbb-47e6-b255-3f099b46995e")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("8120c246-590a-4996-93d5-35bf261e2bb0"),
                            ButtonId = new Guid("65873886-145c-43f9-8643-095f0b196ca1")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("8120c246-590a-4996-93d5-35bf261e2bb0"),
                            ButtonId = new Guid("518e404f-d899-4b00-8463-d250625a1e49")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("8120c246-590a-4996-93d5-35bf261e2bb0"),
                            ButtonId = new Guid("5a004db8-44ed-493e-bb4a-25a9cf300888")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("cdab005c-7450-4996-80d9-167312ebe525"),
                            ButtonId = new Guid("2f752d77-7a78-4d24-ada8-a74578695ead")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("cdab005c-7450-4996-80d9-167312ebe525"),
                            ButtonId = new Guid("c2c8f976-e713-4aab-8f83-221c77afd2e1")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("cdab005c-7450-4996-80d9-167312ebe525"),
                            ButtonId = new Guid("528f32ff-59ac-4e11-a1c4-a1d09010a78c")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("cdab005c-7450-4996-80d9-167312ebe525"),
                            ButtonId = new Guid("b517b498-2ebb-4a91-b580-e8747298479e")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("5772a024-23b0-4580-ae7c-86d73302b65f"),
                            ButtonId = new Guid("bc3933ab-b75f-4c3b-ab0e-a4dd5c1db528")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("5772a024-23b0-4580-ae7c-86d73302b65f"),
                            ButtonId = new Guid("587bc25f-3cea-476b-b3e4-b16a558569e1")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("5772a024-23b0-4580-ae7c-86d73302b65f"),
                            ButtonId = new Guid("d2dbfa10-b2a7-4072-9cb5-80661cbc433a")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("5772a024-23b0-4580-ae7c-86d73302b65f"),
                            ButtonId = new Guid("1bef0ea1-f45a-4077-8aa5-63759a44d009")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("af173660-2653-4444-a492-d87dcc64d8e1"),
                            ButtonId = new Guid("e37cf14f-4b2e-466c-9590-52e59e4aa027")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("af173660-2653-4444-a492-d87dcc64d8e1"),
                            ButtonId = new Guid("b85c18bb-6d8d-4701-a9be-0760478ce2fe")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("af173660-2653-4444-a492-d87dcc64d8e1"),
                            ButtonId = new Guid("fe0404c0-2ce4-45b4-83aa-73e3b3f5de90")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("af173660-2653-4444-a492-d87dcc64d8e1"),
                            ButtonId = new Guid("3b6d50d5-ac68-46ef-9ded-50c59552a842")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("cf054f8c-fa9a-4dcf-927e-326e6d1535ff"),
                            ButtonId = new Guid("f2964994-982f-4bf3-8c5d-542f15ca97cf")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("cf054f8c-fa9a-4dcf-927e-326e6d1535ff"),
                            ButtonId = new Guid("0c4a3643-b92c-45f0-be26-d8862ba17473")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("cf054f8c-fa9a-4dcf-927e-326e6d1535ff"),
                            ButtonId = new Guid("fe22819d-039e-4457-8c21-6deaaccdcc38")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("cf054f8c-fa9a-4dcf-927e-326e6d1535ff"),
                            ButtonId = new Guid("917477df-f210-4620-af01-5a46342cdc3f")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("9dccfd45-9e5f-42b1-8e45-4b1f5e19fa1c"),
                            ButtonId = new Guid("0753780a-fec5-43d7-b4f6-7c85d6168f32")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("9dccfd45-9e5f-42b1-8e45-4b1f5e19fa1c"),
                            ButtonId = new Guid("d2f3961c-9585-4f8e-9f19-696eca575b58")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("9dccfd45-9e5f-42b1-8e45-4b1f5e19fa1c"),
                            ButtonId = new Guid("6bac127c-eab5-4d38-8b96-0f758ae06b74")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("9dccfd45-9e5f-42b1-8e45-4b1f5e19fa1c"),
                            ButtonId = new Guid("f22fc9aa-fa46-45f2-bfe9-20497d3d73db")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("5b49bee1-2c1c-4a8d-a676-658b3e4430c6"),
                            ButtonId = new Guid("c0f3b370-fdd3-4450-be71-e6d0144d1356")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("5b49bee1-2c1c-4a8d-a676-658b3e4430c6"),
                            ButtonId = new Guid("f413f546-a528-490d-ab7a-53f3222a3be7")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("5b49bee1-2c1c-4a8d-a676-658b3e4430c6"),
                            ButtonId = new Guid("db0b36f8-c8ed-4f06-bd4a-f9e5b08367be")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("5b49bee1-2c1c-4a8d-a676-658b3e4430c6"),
                            ButtonId = new Guid("7a4d2bf4-4c8f-4b0d-b672-48d7c5fbec77")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("8516a30a-ddeb-4ffa-8e1f-a0f256982ea3"),
                            ButtonId = new Guid("f65dd8ac-709b-42b9-9199-44f54e2ebbda")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("8516a30a-ddeb-4ffa-8e1f-a0f256982ea3"),
                            ButtonId = new Guid("7b0ed01d-d2de-49ef-a1c0-5d48b04bffc9")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("8516a30a-ddeb-4ffa-8e1f-a0f256982ea3"),
                            ButtonId = new Guid("d892d07f-c7a1-4798-8b16-1f7c56e99780")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("8516a30a-ddeb-4ffa-8e1f-a0f256982ea3"),
                            ButtonId = new Guid("f6a1be4a-a07f-47a8-97e8-75f0ff5da92e")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("cd105e87-9f3f-4ab1-b6a0-442cec8b21d3"),
                            ButtonId = new Guid("9c0cf228-3e75-42e4-a416-134f7484fbac")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("9e06a75d-e518-41b1-9a05-381f079815ef"),
                            ButtonId = new Guid("2f71b5d2-214f-4493-8918-a61181c5b6c9")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("9e06a75d-e518-41b1-9a05-381f079815ef"),
                            ButtonId = new Guid("f675d4cc-d3ed-4d03-adb5-5778507543ee")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("9e06a75d-e518-41b1-9a05-381f079815ef"),
                            ButtonId = new Guid("d1db6575-5201-402d-a40a-66aba04257e4")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("9e06a75d-e518-41b1-9a05-381f079815ef"),
                            ButtonId = new Guid("5e5dc83a-ddfa-4a68-8312-e4e60097dd28")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("9e06a75d-e518-41b1-9a05-381f079815ef"),
                            ButtonId = new Guid("e7b0cf04-fc1f-4d9a-a2fa-992439fa91d8")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("9e06a75d-e518-41b1-9a05-381f079815ef"),
                            ButtonId = new Guid("25d840ae-f019-4ec3-b315-89ee62df4a5f")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("9e06a75d-e518-41b1-9a05-381f079815ef"),
                            ButtonId = new Guid("989836ea-4dd3-43d8-bf98-b8cfd1a1a063")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("9e06a75d-e518-41b1-9a05-381f079815ef"),
                            ButtonId = new Guid("eabdf8f2-d85e-4188-94fc-524e9daae7d4")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("9e06a75d-e518-41b1-9a05-381f079815ef"),
                            ButtonId = new Guid("c33057cd-0bc9-46ab-9462-25d86c427fe2")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("e42ebc6a-eb5e-46d8-ac16-a68f260f608b"),
                            ButtonId = new Guid("15e6c97d-2cbe-4ddc-ab57-987165aceb4d")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("e42ebc6a-eb5e-46d8-ac16-a68f260f608b"),
                            ButtonId = new Guid("aab6d3ee-b714-4193-84a0-4ba63447beef")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("89f3fc6d-ccee-4ba4-8b52-e8eeea4a3801"),
                            ButtonId = new Guid("5940cf4f-7f5d-4828-a871-b3af72cbebc6")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("89f3fc6d-ccee-4ba4-8b52-e8eeea4a3801"),
                            ButtonId = new Guid("a7ba2a79-27e1-49a3-96b1-2ea605d008ac")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("32e55730-da04-4727-9a86-d4e237d0acb8"),
                            ButtonId = new Guid("82eaeecf-4a31-42df-9a95-af93cf273cd4")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("32e55730-da04-4727-9a86-d4e237d0acb8"),
                            ButtonId = new Guid("543b82d8-d632-4ec3-813d-f8688f51f814")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("5214c5e6-ce9d-4238-9379-414eac3b1344"),
                            ButtonId = new Guid("de735f71-af06-4c29-b988-4bb8b1bb0852")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("5214c5e6-ce9d-4238-9379-414eac3b1344"),
                            ButtonId = new Guid("0b75cf62-a277-4eac-b7f3-f37248f3436a")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("eacdf1bb-f6e0-43c3-b498-97e99e295706"),
                            ButtonId = new Guid("7d74d804-1e97-45c1-961f-49bef3ad6c07")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("eacdf1bb-f6e0-43c3-b498-97e99e295706"),
                            ButtonId = new Guid("b8277854-2e0a-448d-bb78-b3da45ca4ae1")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("dc79b3e4-55ef-4d0d-836a-59d0b66ee89a"),
                            ButtonId = new Guid("5cc960fb-419a-4b2b-b47c-f6cecff9b4f8")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("dc79b3e4-55ef-4d0d-836a-59d0b66ee89a"),
                            ButtonId = new Guid("3079c9ce-194f-4d35-b804-84da9bcb4ad9")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("35c95ea1-6026-479b-bb66-ba7073cf05df"),
                            ButtonId = new Guid("c5b9a41e-9d97-427a-a297-a9de1f80b1e8")
                        },
                        new
                        {
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b"),
                            MenuId = new Guid("35c95ea1-6026-479b-bb66-ba7073cf05df"),
                            ButtonId = new Guid("cc27065f-9106-4a66-bf29-d114c570555f")
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Sample", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CellId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRealSample")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("NextPhotoTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CellId");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SampleDosage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCell")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SampleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SolutionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SampleId");

                    b.HasIndex("SolutionId");

                    b.ToTable("SampleDosages");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SdsPageDetection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DetectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DetectionPicture")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPurityQualified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<float>("ProteinTiter")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("SdsPageDetection");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("Consignee")
                        .HasColumnType("text");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ShipmentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Shipment");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("SkillName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Solution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProtocolStepId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolStepId")
                        .IsUnique();

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Species", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChineseName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EnglishName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LatinName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SterilityDetection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DetectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DetectionPicture")
                        .HasColumnType("text");

                    b.Property<bool>("IsBacterialPollute")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluorescence")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("SterilityDetection");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.StockIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StockInDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("StockIn");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Take", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentTaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int>("TakeCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Takes");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TakeTask", b =>
                {
                    b.Property<Guid>("TakeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("TakeId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TakeTasks");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProtocolId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid>("TakeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("NodeId");

                    b.HasIndex("ProtocolId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskLabware", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabwareId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "LabwareId");

                    b.HasIndex("LabwareId");

                    b.ToTable("TaskLabwares");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskReagent", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReagentId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "ReagentId");

                    b.HasIndex("ReagentId");

                    b.ToTable("TaskReagents");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskSample", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SampleId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "SampleId");

                    b.HasIndex("SampleId");

                    b.ToTable("TaskSamples");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskUser", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskUser");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EMail")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("KeycloakId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("WorkTime")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e011fd05-e118-4960-ba91-8c73d88e70f6"),
                            CreatedAt = new DateTime(2021, 8, 12, 15, 17, 44, 799, DateTimeKind.Local).AddTicks(2795),
                            EMail = "234298234@qq.com",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MobileNumber = "13523429876",
                            UserName = "admin@admin.com",
                            WorkTime = "8:00-9:00"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserDepartmentRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "DepartmentId", "RoleId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserDepartmentRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("e011fd05-e118-4960-ba91-8c73d88e70f6"),
                            DepartmentId = new Guid("e25a0038-98fe-42d8-bc52-36a03002807e"),
                            RoleId = new Guid("44db0513-b302-4f1d-8bc3-1484df89a57b")
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Button", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Menu", "Menu")
                        .WithMany("Buttons")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Cell", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Species", "Species")
                        .WithMany("Cells")
                        .HasForeignKey("SpeciesId");

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("CellId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("CellId");

                            b1.ToTable("Cell");

                            b1.WithOwner()
                                .HasForeignKey("CellId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("CellId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("CellId");

                            b1.ToTable("Cell");

                            b1.WithOwner()
                                .HasForeignKey("CellId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Device", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("DeviceId");

                            b1.ToTable("Devices");

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("DeviceId");

                            b1.ToTable("Devices");

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.DeviceParameter", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Device", "Device")
                        .WithMany("DeviceParameters")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.File", "Script", b1 =>
                        {
                            b1.Property<Guid>("DeviceParameterId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("DeviceParameterId");

                            b1.ToTable("DeviceParameters");

                            b1.WithOwner()
                                .HasForeignKey("DeviceParameterId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Labware", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("LabwareId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("LabwareId");

                            b1.ToTable("Labwares");

                            b1.WithOwner()
                                .HasForeignKey("LabwareId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("LabwareId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("LabwareId");

                            b1.ToTable("Labwares");

                            b1.WithOwner()
                                .HasForeignKey("LabwareId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.LabwareUsage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithMany("LabwareUsages")
                        .HasForeignKey("ProtocolStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Line", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "EndNode")
                        .WithMany("EndLines")
                        .HasForeignKey("EndNodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Process", "Process")
                        .WithMany("Lines")
                        .HasForeignKey("ProcessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "StartNode")
                        .WithMany("StartLines")
                        .HasForeignKey("StartNodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.MolecularCloning", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("MolecularCloning")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.MolecularCloning", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("MolecularCloningId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("MolecularCloningId");

                            b1.ToTable("MolecularCloning");

                            b1.WithOwner()
                                .HasForeignKey("MolecularCloningId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Node", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Skill", "NodeType")
                        .WithMany("Nodes")
                        .HasForeignKey("NodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Process", null)
                        .WithMany("Nodes")
                        .HasForeignKey("ProcessId");

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.TimeInterval", "Duration", b1 =>
                        {
                            b1.Property<Guid>("NodeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("NodeId");

                            b1.ToTable("Nodes");

                            b1.WithOwner()
                                .HasForeignKey("NodeId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeDevice", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Device", "Device")
                        .WithMany("Nodes")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeLabware", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Labware", "Labware")
                        .WithMany("Nodes")
                        .HasForeignKey("LabwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeProtocolStep", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany("ProtocolSteps")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithMany("Nodes")
                        .HasForeignKey("ProtocolStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeReagent", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Reagent", "Reagent")
                        .WithMany("Nodes")
                        .HasForeignKey("ReagentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.PlasmidPurification", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("PlasmidPurification")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.PlasmidPurification", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("PlasmidPurificationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("PlasmidPurificationId");

                            b1.ToTable("PlasmidPurification");

                            b1.WithOwner()
                                .HasForeignKey("PlasmidPurificationId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Project", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Process", "Process")
                        .WithMany("Projects")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectTask", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Projects")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectUser", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Project", "Project")
                        .WithMany("Users")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.DeviceParameter", "DeviceParameter")
                        .WithMany("ProtocolSteps")
                        .HasForeignKey("DeviceParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.QpcrDetection", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("QpcrDetection")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.QpcrDetection", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Reagent", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "AvailableCubage", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "AvailableQuality", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ReagentUsage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Solution", "Solution")
                        .WithMany("ReagentUsages")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Cubage", b1 =>
                        {
                            b1.Property<Guid>("ReagentUsageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentUsageId");

                            b1.ToTable("ReagentUsage");

                            b1.WithOwner()
                                .HasForeignKey("ReagentUsageId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("ReagentUsageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentUsageId");

                            b1.ToTable("ReagentUsage");

                            b1.WithOwner()
                                .HasForeignKey("ReagentUsageId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.RoleMenu", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Button", "Button")
                        .WithMany("RoleMenus")
                        .HasForeignKey("ButtonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Menu", "Menu")
                        .WithMany("Roles")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Role", "Role")
                        .WithMany("Menus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Sample", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Cell", "Cell")
                        .WithMany("Samples")
                        .HasForeignKey("CellId");

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Cubage", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SampleDosage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Sample", "Sample")
                        .WithMany("SampleDosages")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Solution", "Solution")
                        .WithMany("SampleDosages")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Cubage", b1 =>
                        {
                            b1.Property<Guid>("SampleDosageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleDosageId");

                            b1.ToTable("SampleDosages");

                            b1.WithOwner()
                                .HasForeignKey("SampleDosageId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("SampleDosageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleDosageId");

                            b1.ToTable("SampleDosages");

                            b1.WithOwner()
                                .HasForeignKey("SampleDosageId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SdsPageDetection", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("SdsPageDetection")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.SdsPageDetection", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Shipment", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("Shipment")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.Shipment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Address", "DeliveryAddress", b1 =>
                        {
                            b1.Property<Guid>("ShipmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .HasColumnType("text");

                            b1.Property<string>("Detail")
                                .HasColumnType("text");

                            b1.Property<string>("District")
                                .HasColumnType("text");

                            b1.Property<string>("Province")
                                .HasColumnType("text");

                            b1.HasKey("ShipmentId");

                            b1.ToTable("Shipment");

                            b1.WithOwner()
                                .HasForeignKey("ShipmentId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Solution", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithOne("Solution")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.Solution", "ProtocolStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Total", b1 =>
                        {
                            b1.Property<Guid>("SolutionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SolutionId");

                            b1.ToTable("Solutions");

                            b1.WithOwner()
                                .HasForeignKey("SolutionId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Species", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "SpeciesId", b1 =>
                        {
                            b1.Property<Guid>("SpeciesId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("SpeciesId");

                            b1.ToTable("Species");

                            b1.WithOwner()
                                .HasForeignKey("SpeciesId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SterilityDetection", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("SterilityDetection")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.SterilityDetection", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.StockIn", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("StockIn")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.StockIn", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Take", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Project", "Project")
                        .WithMany("Takes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TakeTask", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Take", "Take")
                        .WithMany("Tasks")
                        .HasForeignKey("TakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Takes")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Task", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Device", "Device")
                        .WithMany("Tasks")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany("Tasks")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithMany("Tasks")
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Megarobo.KunPengLIMS.Domain.Entities.File", "ResultAttachments", b1 =>
                        {
                            b1.Property<Guid>("TaskId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("TaskId", "Id");

                            b1.ToTable("Tasks_ResultAttachments");

                            b1.WithOwner()
                                .HasForeignKey("TaskId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskLabware", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Labware", "Labware")
                        .WithMany("Tasks")
                        .HasForeignKey("LabwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Labwares")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskReagent", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Reagent", "Reagent")
                        .WithMany("Tasks")
                        .HasForeignKey("ReagentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Reagents")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskSample", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Sample", "Sample")
                        .WithMany("Tasks")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Samples")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskUser", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Users")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserDepartmentRole", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Department", "Department")
                        .WithMany("UserRoles")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Role", "Role")
                        .WithMany("UserDepartments")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("DepartmentRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserSkill", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Skill", "Skill")
                        .WithMany("Users")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("Skills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
