// <auto-generated />
using System;
using Megarobo.KunPengLIMS.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Megarobo.KunPengLIMS.Infrastructure.Migrations
{
    [DbContext(typeof(LimsDbContext))]
    [Migration("20210809101930_AddFilesForOrder")]
    partial class AddFilesForOrder
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Button", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Button");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cce54550-ce05-404e-8aa0-7ef0b087de00"),
                            Code = "QueryUser",
                            MenuId = new Guid("b44cd111-64e4-4733-84a3-ad33ce3aef70"),
                            Name = "查询用户"
                        },
                        new
                        {
                            Id = new Guid("e8a50a37-eb36-4766-9fb2-d8eaed4ea5ca"),
                            Code = "AddUser",
                            MenuId = new Guid("b44cd111-64e4-4733-84a3-ad33ce3aef70"),
                            Name = "新增用户"
                        },
                        new
                        {
                            Id = new Guid("e5448ea1-60f5-42da-99a5-77796285c1dc"),
                            Code = "UpdateUser",
                            MenuId = new Guid("b44cd111-64e4-4733-84a3-ad33ce3aef70"),
                            Name = "修改用户"
                        },
                        new
                        {
                            Id = new Guid("f36b3aba-8ff1-440a-a8c7-f46818f5729e"),
                            Code = "DeleteUser",
                            MenuId = new Guid("b44cd111-64e4-4733-84a3-ad33ce3aef70"),
                            Name = "删除用户"
                        },
                        new
                        {
                            Id = new Guid("d0380f84-60dd-4abd-b014-50b7ecd96e56"),
                            Code = "ResetUser",
                            MenuId = new Guid("b44cd111-64e4-4733-84a3-ad33ce3aef70"),
                            Name = "重置用户"
                        },
                        new
                        {
                            Id = new Guid("845b8a96-3851-4a7c-8c02-3e9388d6f23e"),
                            Code = "QuerySkill",
                            MenuId = new Guid("3ae1259f-598d-41eb-9880-338733ecb37c"),
                            Name = "查询技能"
                        },
                        new
                        {
                            Id = new Guid("84fef568-941e-4520-9226-d9cbbf9c4b7c"),
                            Code = "AddSkill",
                            MenuId = new Guid("3ae1259f-598d-41eb-9880-338733ecb37c"),
                            Name = "新增技能"
                        },
                        new
                        {
                            Id = new Guid("bc0fd9f1-5389-40fe-91d7-39f3c486faa7"),
                            Code = "UpdateSkill",
                            MenuId = new Guid("3ae1259f-598d-41eb-9880-338733ecb37c"),
                            Name = "修改技能"
                        },
                        new
                        {
                            Id = new Guid("5e13e970-1d23-4581-84d3-536b98f7ce1b"),
                            Code = "DeleteSkill",
                            MenuId = new Guid("3ae1259f-598d-41eb-9880-338733ecb37c"),
                            Name = "删除技能"
                        },
                        new
                        {
                            Id = new Guid("eb5a56cf-d9e5-4c59-b6bc-6993e082634f"),
                            Code = "QueryDepartment",
                            MenuId = new Guid("9b2010d1-d7d2-46e8-aa26-a93cfe462094"),
                            Name = "查询部门"
                        },
                        new
                        {
                            Id = new Guid("2cc3fc36-45f9-45cc-840a-f5b9f02db2c7"),
                            Code = "AddDepartment",
                            MenuId = new Guid("9b2010d1-d7d2-46e8-aa26-a93cfe462094"),
                            Name = "新增部门"
                        },
                        new
                        {
                            Id = new Guid("624d5773-2520-4099-a8a0-0d6d32cf788e"),
                            Code = "UpdateDepartment",
                            MenuId = new Guid("9b2010d1-d7d2-46e8-aa26-a93cfe462094"),
                            Name = "修改部门"
                        },
                        new
                        {
                            Id = new Guid("1f2449fc-6e0f-4383-94a4-bd751373cec3"),
                            Code = "DeleteDepartment",
                            MenuId = new Guid("9b2010d1-d7d2-46e8-aa26-a93cfe462094"),
                            Name = "删除部门"
                        },
                        new
                        {
                            Id = new Guid("f456c8b5-d8d8-4b71-8bb5-4895f7fecb1c"),
                            Code = "QueryRole",
                            MenuId = new Guid("5b437f45-ff33-4268-b8a0-1f160f9e63e2"),
                            Name = "查询角色"
                        },
                        new
                        {
                            Id = new Guid("3f0f9060-213a-4304-af2c-f5d39ace903f"),
                            Code = "AddRole",
                            MenuId = new Guid("5b437f45-ff33-4268-b8a0-1f160f9e63e2"),
                            Name = "新增角色"
                        },
                        new
                        {
                            Id = new Guid("e7fcf4e3-5417-4139-bf72-4bd16b138ff1"),
                            Code = "UpdateRole",
                            MenuId = new Guid("5b437f45-ff33-4268-b8a0-1f160f9e63e2"),
                            Name = "修改角色"
                        },
                        new
                        {
                            Id = new Guid("c477fbcf-8787-4b9d-8e37-8052c0f4082c"),
                            Code = "DeleteRole",
                            MenuId = new Guid("5b437f45-ff33-4268-b8a0-1f160f9e63e2"),
                            Name = "删除角色"
                        },
                        new
                        {
                            Id = new Guid("5276710c-9a4f-41e5-9bb0-d0cf4f91e44f"),
                            Code = "QueryMenu",
                            MenuId = new Guid("23a3ccdb-de52-405d-81ad-e965375eeabe"),
                            Name = "查询菜单"
                        },
                        new
                        {
                            Id = new Guid("7df07530-d397-4ab8-8ade-6f0068db6b35"),
                            Code = "AddMenu",
                            MenuId = new Guid("23a3ccdb-de52-405d-81ad-e965375eeabe"),
                            Name = "新增菜单"
                        },
                        new
                        {
                            Id = new Guid("1210979c-8024-4180-bc52-403e17ccbc4c"),
                            Code = "UpdateMenu",
                            MenuId = new Guid("23a3ccdb-de52-405d-81ad-e965375eeabe"),
                            Name = "修改菜单"
                        },
                        new
                        {
                            Id = new Guid("0005712d-877e-47f1-8d89-5ff5b4f623a6"),
                            Code = "DeleteMenu",
                            MenuId = new Guid("23a3ccdb-de52-405d-81ad-e965375eeabe"),
                            Name = "删除菜单"
                        },
                        new
                        {
                            Id = new Guid("ce041e6a-779f-411b-be8b-0618bc6513eb"),
                            Code = "QueryDict",
                            MenuId = new Guid("d3e87668-21b1-48fa-9239-b1a555873afc"),
                            Name = "查询字典项"
                        },
                        new
                        {
                            Id = new Guid("5cc09918-fecf-494e-82e4-e808e1554318"),
                            Code = "AddDict",
                            MenuId = new Guid("d3e87668-21b1-48fa-9239-b1a555873afc"),
                            Name = "新增字典项"
                        },
                        new
                        {
                            Id = new Guid("511f3579-2841-4848-b80c-c4278bd11849"),
                            Code = "UpdateDict",
                            MenuId = new Guid("d3e87668-21b1-48fa-9239-b1a555873afc"),
                            Name = "修改字典项"
                        },
                        new
                        {
                            Id = new Guid("67f0ee56-876b-40ad-9c56-605979a0c5d1"),
                            Code = "DeleteDict",
                            MenuId = new Guid("d3e87668-21b1-48fa-9239-b1a555873afc"),
                            Name = "删除字典项"
                        },
                        new
                        {
                            Id = new Guid("249ad928-034a-4ea1-a9ad-9f3c17c40a07"),
                            Code = "UpdateDictValue",
                            MenuId = new Guid("d3e87668-21b1-48fa-9239-b1a555873afc"),
                            Name = "修改字典项值"
                        },
                        new
                        {
                            Id = new Guid("8eb5a63a-491e-41f9-a1bc-2673929037f0"),
                            Code = "QueryLog",
                            MenuId = new Guid("57f96d4c-b6a2-4582-adf7-8f3d13a959db"),
                            Name = "查询日志"
                        },
                        new
                        {
                            Id = new Guid("12a92fc3-a88d-4601-96da-713dfebb0daf"),
                            Code = "QuerySpecies",
                            MenuId = new Guid("8df97de7-9fc1-4e70-8cab-97b7874b3334"),
                            Name = "查询物种"
                        },
                        new
                        {
                            Id = new Guid("97c3596c-4d39-410d-ab0f-22fa25c49155"),
                            Code = "AddSpecies",
                            MenuId = new Guid("8df97de7-9fc1-4e70-8cab-97b7874b3334"),
                            Name = "新增物种"
                        },
                        new
                        {
                            Id = new Guid("fef043fa-72b8-4bef-af31-41c0f839fbf6"),
                            Code = "UpdateSpecies",
                            MenuId = new Guid("8df97de7-9fc1-4e70-8cab-97b7874b3334"),
                            Name = "修改物种"
                        },
                        new
                        {
                            Id = new Guid("0c5f79bd-c397-4025-9264-9639ea49c69d"),
                            Code = "DeleteSpecies",
                            MenuId = new Guid("8df97de7-9fc1-4e70-8cab-97b7874b3334"),
                            Name = "删除物种"
                        },
                        new
                        {
                            Id = new Guid("b502ab49-d8d6-41ef-9bbf-e53b95cc5ceb"),
                            Code = "QueryCell",
                            MenuId = new Guid("b6a18382-345c-4703-94db-03f40b4bd21a"),
                            Name = "查询细胞"
                        },
                        new
                        {
                            Id = new Guid("ea7aaa55-d680-450c-89e1-d040017ec296"),
                            Code = "AddCell",
                            MenuId = new Guid("b6a18382-345c-4703-94db-03f40b4bd21a"),
                            Name = "新增细胞"
                        },
                        new
                        {
                            Id = new Guid("792e680a-cd4e-47a8-b183-2c23d3dd535d"),
                            Code = "UpdateCell",
                            MenuId = new Guid("b6a18382-345c-4703-94db-03f40b4bd21a"),
                            Name = "修改细胞"
                        },
                        new
                        {
                            Id = new Guid("b0151dc9-996c-4aa5-97d6-6bb880ad49e9"),
                            Code = "DeleteCell",
                            MenuId = new Guid("b6a18382-345c-4703-94db-03f40b4bd21a"),
                            Name = "删除细胞"
                        },
                        new
                        {
                            Id = new Guid("09b09c2f-eacf-4089-ad40-797bdda2c4ae"),
                            Code = "QueryPosition",
                            MenuId = new Guid("24d62360-b2d8-42c4-a0ae-76152e55562f"),
                            Name = "查询位置"
                        },
                        new
                        {
                            Id = new Guid("862ec34f-be37-4462-b782-e8d46d7af9d0"),
                            Code = "QueryLabware",
                            MenuId = new Guid("1edc0786-4408-44da-8d0c-aa88f2f2a9c9"),
                            Name = "查询耗材"
                        },
                        new
                        {
                            Id = new Guid("d9640d4d-baf9-47a4-a394-6d71fec9ddef"),
                            Code = "QueryReagent",
                            MenuId = new Guid("66cbdde8-a894-4d5d-8620-3ac8c37b0791"),
                            Name = "查询试剂"
                        },
                        new
                        {
                            Id = new Guid("0d2a41e5-3627-43d3-bb84-c938a947292f"),
                            Code = "QueryDevice",
                            MenuId = new Guid("929d603c-06ca-4845-bf3b-ab3e8bf7ad15"),
                            Name = "查询设备"
                        },
                        new
                        {
                            Id = new Guid("e49e4a1c-b9f9-4f58-b98c-3620f00ae240"),
                            Code = "AddDevice",
                            MenuId = new Guid("929d603c-06ca-4845-bf3b-ab3e8bf7ad15"),
                            Name = "新增设备"
                        },
                        new
                        {
                            Id = new Guid("eadca0b2-6d88-4980-bdd7-5d36495ee7f1"),
                            Code = "UpdateDevice",
                            MenuId = new Guid("929d603c-06ca-4845-bf3b-ab3e8bf7ad15"),
                            Name = "修改设备"
                        },
                        new
                        {
                            Id = new Guid("80c1c245-9c4d-4228-a65a-9f1085e133f8"),
                            Code = "DeleteDevice",
                            MenuId = new Guid("929d603c-06ca-4845-bf3b-ab3e8bf7ad15"),
                            Name = "删除设备"
                        },
                        new
                        {
                            Id = new Guid("27fd9c5a-8d2a-4b7b-8c25-83a7b3d88c65"),
                            Code = "QuerySample",
                            MenuId = new Guid("769b18a2-aab4-4dad-b6f2-01fac40df787"),
                            Name = "查询样本"
                        },
                        new
                        {
                            Id = new Guid("05b4707b-bd6b-4595-b601-5be3724e347c"),
                            Code = "AddSample",
                            MenuId = new Guid("769b18a2-aab4-4dad-b6f2-01fac40df787"),
                            Name = "新增样本"
                        },
                        new
                        {
                            Id = new Guid("f5a9225c-e548-4c15-a925-1fa8502bd2c3"),
                            Code = "UpdateSample",
                            MenuId = new Guid("769b18a2-aab4-4dad-b6f2-01fac40df787"),
                            Name = "修改样本"
                        },
                        new
                        {
                            Id = new Guid("71ade60c-86b4-4337-b9dc-08252724b66b"),
                            Code = "DeleteSample",
                            MenuId = new Guid("769b18a2-aab4-4dad-b6f2-01fac40df787"),
                            Name = "删除样本"
                        },
                        new
                        {
                            Id = new Guid("48a5f738-e261-4f2b-abda-7bd82367f7d8"),
                            Code = "QueryMyTask",
                            MenuId = new Guid("387f7cff-c6f3-42ef-baa4-592a96395af3"),
                            Name = "查询我的任务"
                        },
                        new
                        {
                            Id = new Guid("04c34a70-4f89-441f-8a73-9cf9aff6265c"),
                            Code = "AddMyTask",
                            MenuId = new Guid("387f7cff-c6f3-42ef-baa4-592a96395af3"),
                            Name = "新增我的任务"
                        },
                        new
                        {
                            Id = new Guid("e2461ae0-0895-44c2-8c2e-0341082ad95d"),
                            Code = "UpdateMyTask",
                            MenuId = new Guid("387f7cff-c6f3-42ef-baa4-592a96395af3"),
                            Name = "修改我的任务"
                        },
                        new
                        {
                            Id = new Guid("df22a567-a9b4-40c0-ad42-cbb8a5127a6b"),
                            Code = "DeleteMyTask",
                            MenuId = new Guid("387f7cff-c6f3-42ef-baa4-592a96395af3"),
                            Name = "删除我的任务"
                        },
                        new
                        {
                            Id = new Guid("9e068b9c-4319-407e-86df-1c48d8c3c6f7"),
                            Code = "QueryTask",
                            MenuId = new Guid("7cd6d713-80af-41ad-b5da-7ab49256bfd8"),
                            Name = "查询今日任务"
                        },
                        new
                        {
                            Id = new Guid("f5332a01-e69a-4c32-a119-61648ce5ae40"),
                            Code = "AddTask",
                            MenuId = new Guid("7cd6d713-80af-41ad-b5da-7ab49256bfd8"),
                            Name = "新增今日任务"
                        },
                        new
                        {
                            Id = new Guid("f79c0c54-2055-4e6a-a761-cf66069453a9"),
                            Code = "UpdateTask",
                            MenuId = new Guid("7cd6d713-80af-41ad-b5da-7ab49256bfd8"),
                            Name = "修改今日任务"
                        },
                        new
                        {
                            Id = new Guid("ae0886e7-6772-4170-96e6-d2b45987dfb2"),
                            Code = "DeleteTask",
                            MenuId = new Guid("7cd6d713-80af-41ad-b5da-7ab49256bfd8"),
                            Name = "删除今日任务"
                        },
                        new
                        {
                            Id = new Guid("b22e0f2a-991c-4721-a4f8-b6ece26aab7a"),
                            Code = "QueryProtocolStep",
                            MenuId = new Guid("b01c7f0d-2ced-443c-84e8-306ee8ba8eb2"),
                            Name = "查询ProtocolStep"
                        },
                        new
                        {
                            Id = new Guid("925d7744-a03b-49c2-817d-24d3e900208f"),
                            Code = "AddProtocolStep",
                            MenuId = new Guid("b01c7f0d-2ced-443c-84e8-306ee8ba8eb2"),
                            Name = "新增ProtocolStep"
                        },
                        new
                        {
                            Id = new Guid("ae498aa0-7bd9-4fb6-9a56-ffda934b99c4"),
                            Code = "UpdateProtocolStep",
                            MenuId = new Guid("b01c7f0d-2ced-443c-84e8-306ee8ba8eb2"),
                            Name = "修改ProtocolStep"
                        },
                        new
                        {
                            Id = new Guid("c33b2ca7-b4d7-46fd-b642-29ed3f1b0748"),
                            Code = "DeleteProtocolStep",
                            MenuId = new Guid("b01c7f0d-2ced-443c-84e8-306ee8ba8eb2"),
                            Name = "删除ProtocolStep"
                        },
                        new
                        {
                            Id = new Guid("607d64bf-fd28-4e89-8356-8a180e471c8a"),
                            Code = "QueryNode",
                            MenuId = new Guid("6bcb1961-2903-465f-bf51-eb7504e4592b"),
                            Name = "查询节点"
                        },
                        new
                        {
                            Id = new Guid("21a5c012-2e03-4cfa-a5fb-48f607074823"),
                            Code = "AddNode",
                            MenuId = new Guid("6bcb1961-2903-465f-bf51-eb7504e4592b"),
                            Name = "新增节点"
                        },
                        new
                        {
                            Id = new Guid("945a71bd-56aa-4f53-a176-163edde7555a"),
                            Code = "UpdateNode",
                            MenuId = new Guid("6bcb1961-2903-465f-bf51-eb7504e4592b"),
                            Name = "修改节点"
                        },
                        new
                        {
                            Id = new Guid("7b4b9ba1-9766-4dc6-8dd9-0f19b15c0edc"),
                            Code = "DeleteNode",
                            MenuId = new Guid("6bcb1961-2903-465f-bf51-eb7504e4592b"),
                            Name = "删除节点"
                        },
                        new
                        {
                            Id = new Guid("c11cf2b2-e4cf-49b8-b732-02f3b7d472a2"),
                            Code = "QueryProject",
                            MenuId = new Guid("54b18211-5acb-4af7-a46e-e06ad3c04a74"),
                            Name = "查询项目"
                        },
                        new
                        {
                            Id = new Guid("1487ac76-7a3c-4bac-930e-7cb6ba78c669"),
                            Code = "AddProject",
                            MenuId = new Guid("54b18211-5acb-4af7-a46e-e06ad3c04a74"),
                            Name = "新增项目"
                        },
                        new
                        {
                            Id = new Guid("37c83e66-8d27-498c-855f-fa23ad8ae275"),
                            Code = "UpdateProject",
                            MenuId = new Guid("54b18211-5acb-4af7-a46e-e06ad3c04a74"),
                            Name = "修改项目"
                        },
                        new
                        {
                            Id = new Guid("3122ca43-7098-40f5-96d7-e749d0a989c7"),
                            Code = "DeleteProject",
                            MenuId = new Guid("54b18211-5acb-4af7-a46e-e06ad3c04a74"),
                            Name = "删除项目"
                        },
                        new
                        {
                            Id = new Guid("7de02c05-a351-4ebe-9e5e-1da18845da52"),
                            Code = "QueryTake",
                            MenuId = new Guid("9762dea9-1cb8-45c3-af85-7fd869b69ee6"),
                            Name = "查询Take"
                        },
                        new
                        {
                            Id = new Guid("3b5c2a85-cac6-4c5a-94b0-c1ba1d0fe165"),
                            Code = "AddTake",
                            MenuId = new Guid("9762dea9-1cb8-45c3-af85-7fd869b69ee6"),
                            Name = "新增Take"
                        },
                        new
                        {
                            Id = new Guid("8a3fea25-5f43-4a2b-b2db-21e2aaed17a4"),
                            Code = "UpdateTake",
                            MenuId = new Guid("9762dea9-1cb8-45c3-af85-7fd869b69ee6"),
                            Name = "修改Take"
                        },
                        new
                        {
                            Id = new Guid("a98060bf-80a4-4691-89be-239140d7b97b"),
                            Code = "DeleteTake",
                            MenuId = new Guid("9762dea9-1cb8-45c3-af85-7fd869b69ee6"),
                            Name = "删除Take"
                        },
                        new
                        {
                            Id = new Guid("9e61a0e9-bbd0-4969-94b3-053f9c94b3de"),
                            Code = "QuerySchedule",
                            MenuId = new Guid("9b595b71-510d-498c-a9b2-dab20f28e8da"),
                            Name = "查询排程"
                        },
                        new
                        {
                            Id = new Guid("23047700-2da3-4ad4-899b-354f21d2393c"),
                            Code = "QueryOrder",
                            MenuId = new Guid("ccb5ec96-aacb-40ad-9918-30b2803ffcfa"),
                            Name = "查询订单"
                        },
                        new
                        {
                            Id = new Guid("b7d40835-b2cb-4360-85d1-39e01f6ae0b2"),
                            Code = "AddOrder",
                            MenuId = new Guid("ccb5ec96-aacb-40ad-9918-30b2803ffcfa"),
                            Name = "新增订单"
                        },
                        new
                        {
                            Id = new Guid("3a7fde22-602b-4449-8bfc-9cf2c0a9d6b4"),
                            Code = "UpdateOrder",
                            MenuId = new Guid("ccb5ec96-aacb-40ad-9918-30b2803ffcfa"),
                            Name = "修改订单"
                        },
                        new
                        {
                            Id = new Guid("d480b21f-1c5c-4e4b-85ca-847438e48912"),
                            Code = "CloneMolecule",
                            MenuId = new Guid("ccb5ec96-aacb-40ad-9918-30b2803ffcfa"),
                            Name = "分子克隆"
                        },
                        new
                        {
                            Id = new Guid("d4ae7341-ee88-4092-a4f0-99d7352e482f"),
                            Code = "PurifyPlasmid",
                            MenuId = new Guid("ccb5ec96-aacb-40ad-9918-30b2803ffcfa"),
                            Name = "质粒纯化"
                        },
                        new
                        {
                            Id = new Guid("57d21c8f-9b2b-4d41-8af3-bc2285bce6df"),
                            Code = "StartProduce",
                            MenuId = new Guid("ccb5ec96-aacb-40ad-9918-30b2803ffcfa"),
                            Name = "进入生产"
                        },
                        new
                        {
                            Id = new Guid("dce5da26-eebd-4e09-8a39-57bce1760a64"),
                            Code = "Warehousing",
                            MenuId = new Guid("ccb5ec96-aacb-40ad-9918-30b2803ffcfa"),
                            Name = "QC&入库"
                        },
                        new
                        {
                            Id = new Guid("e63afb0e-654d-46b7-af38-4aa0cbb9f27c"),
                            Code = "FinishOrder",
                            MenuId = new Guid("ccb5ec96-aacb-40ad-9918-30b2803ffcfa"),
                            Name = "完成"
                        },
                        new
                        {
                            Id = new Guid("52118ed1-1466-4ca5-a732-66f02182fc03"),
                            Code = "QueryCloning",
                            MenuId = new Guid("bbcee40b-1898-44c7-9237-ade035bee7d3"),
                            Name = "查询分子克隆"
                        },
                        new
                        {
                            Id = new Guid("f51f3c67-cc12-4426-8ec6-9bd7d0385b85"),
                            Code = "FinishCloning",
                            MenuId = new Guid("bbcee40b-1898-44c7-9237-ade035bee7d3"),
                            Name = "完成分子克隆"
                        },
                        new
                        {
                            Id = new Guid("d7ba2dc5-0f62-4143-a297-fbb1c0118d61"),
                            Code = "QueryPurifying",
                            MenuId = new Guid("d721b3be-ffd9-43c5-ac45-c39944a89e61"),
                            Name = "查询质粒纯化"
                        },
                        new
                        {
                            Id = new Guid("f926d75d-409a-4ffb-bd42-8bcf435b1e52"),
                            Code = "FinishPurifying",
                            MenuId = new Guid("d721b3be-ffd9-43c5-ac45-c39944a89e61"),
                            Name = "完成质粒纯化"
                        },
                        new
                        {
                            Id = new Guid("20ba2f97-ad6b-4562-9cd4-fc79974f284e"),
                            Code = "QueryQpcr",
                            MenuId = new Guid("bbcee40b-1898-44c7-9237-ade035bee7d3"),
                            Name = "查询qPCR检测"
                        },
                        new
                        {
                            Id = new Guid("2afd4d3a-a5f9-4616-a30e-e84ce647659c"),
                            Code = "FinishQpcr",
                            MenuId = new Guid("bbcee40b-1898-44c7-9237-ade035bee7d3"),
                            Name = "完成qPCR检测"
                        },
                        new
                        {
                            Id = new Guid("bc66021f-9648-4df6-adbf-9e266a0c348b"),
                            Code = "QuerySdspage",
                            MenuId = new Guid("bdf03b4e-a3b2-4a23-a969-ace12f5340ec"),
                            Name = "查询SDS-PAGE检测"
                        },
                        new
                        {
                            Id = new Guid("16f8d431-fc74-4698-b842-2ec9187fbaf1"),
                            Code = "FinishSdspage",
                            MenuId = new Guid("bdf03b4e-a3b2-4a23-a969-ace12f5340ec"),
                            Name = "完成SDS-PAGE检测"
                        },
                        new
                        {
                            Id = new Guid("15bd8c59-1bb5-4127-a19b-42be553d5d89"),
                            Code = "QuerySterility",
                            MenuId = new Guid("e29c668c-0b92-43d8-9866-7e3cca77daaa"),
                            Name = "查询无菌检测"
                        },
                        new
                        {
                            Id = new Guid("9c2d0bc6-e2e0-43e6-9e93-344ca839fbf6"),
                            Code = "FinishSterility",
                            MenuId = new Guid("e29c668c-0b92-43d8-9866-7e3cca77daaa"),
                            Name = "完成无菌检测"
                        },
                        new
                        {
                            Id = new Guid("5af731de-bacc-4489-bef5-f122582779d9"),
                            Code = "QueryWarehousing",
                            MenuId = new Guid("feba01e4-98c8-483a-b284-dbf3eb7dbe91"),
                            Name = "查询入库记录"
                        },
                        new
                        {
                            Id = new Guid("0aecccce-65ea-463f-9ed7-e4a8c8934c7a"),
                            Code = "FinishWarehousing",
                            MenuId = new Guid("feba01e4-98c8-483a-b284-dbf3eb7dbe91"),
                            Name = "完成入库记录"
                        },
                        new
                        {
                            Id = new Guid("bd488987-79e1-41c7-93e0-a1a47ba704c5"),
                            Code = "QueryShipment",
                            MenuId = new Guid("566f37ac-bd48-429f-8298-7345c43a2c55"),
                            Name = "查询发货记录"
                        },
                        new
                        {
                            Id = new Guid("49cdb677-5eee-41ac-aa27-4d5af11aee8c"),
                            Code = "FinishShipment",
                            MenuId = new Guid("566f37ac-bd48-429f-8298-7345c43a2c55"),
                            Name = "完成发货记录"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Cell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("AtccId")
                        .HasColumnType("text");

                    b.Property<string>("AtccUrl")
                        .HasColumnType("text");

                    b.Property<int>("BioSafetyLevel")
                        .HasColumnType("integer");

                    b.Property<string>("CellCode")
                        .HasColumnType("text");

                    b.Property<string>("CellLineType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CrisprOrderLevel")
                        .HasColumnType("integer");

                    b.Property<string>("CultivationMethod")
                        .HasColumnType("text");

                    b.Property<string>("Disease")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Race")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<Guid?>("SpeciesId")
                        .HasColumnType("uuid");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("TissueType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Cell");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Manager")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1fefd903-624b-4d9b-b3f1-59dcb278a8fb"),
                            ContactNumber = "13245679856",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 616, DateTimeKind.Local).AddTicks(8240),
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manager = "张三",
                            Name = "深圳镁伽",
                            OrdinalNumber = 1,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModelNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.DeviceParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceParameters");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.DictItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("359ff969-4c3c-4436-8e4d-84212defae89"),
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(7080),
                            IsDeleted = false,
                            KeyName = "组织类型",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "cervix,lung,ELSE"
                        },
                        new
                        {
                            Id = new Guid("7041b779-78b3-4171-bd49-81c70bb654f4"),
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(7521),
                            IsDeleted = false,
                            KeyName = "细胞系种类",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "epithelial,ELSE"
                        },
                        new
                        {
                            Id = new Guid("b6edd245-709c-46f7-bbd6-1f8c57f8985f"),
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(7544),
                            IsDeleted = false,
                            KeyName = "培养方式",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "Adherent,Suspension,ELSE"
                        },
                        new
                        {
                            Id = new Guid("dafb9026-c451-49bc-bd3b-847c050fdfe2"),
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(7547),
                            IsDeleted = false,
                            KeyName = "疾病",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "Carcinoma,Adenocarcinoma,ELSE"
                        },
                        new
                        {
                            Id = new Guid("0466f477-7372-4eee-a0bf-1727c8ba18c1"),
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(7549),
                            IsDeleted = false,
                            KeyName = "性别",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "Female,Male,ELSE"
                        },
                        new
                        {
                            Id = new Guid("90ccadc8-a619-426c-8b0a-7e9245eca1a1"),
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(7552),
                            IsDeleted = false,
                            KeyName = "种族",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "Black,Caucasian,Asian,ELSE"
                        },
                        new
                        {
                            Id = new Guid("1bd011fc-89b8-430d-8026-48405153aac5"),
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(7561),
                            IsDeleted = false,
                            KeyName = "体积",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "μL,mL",
                            Value = "Carcinoma,Adenocarcinoma,ELSE"
                        },
                        new
                        {
                            Id = new Guid("9141827f-9b79-4f83-af46-05b2ac885905"),
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(7563),
                            IsDeleted = false,
                            KeyName = "浓度",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "%,mg/ml"
                        },
                        new
                        {
                            Id = new Guid("8e243a04-6a75-4581-8b77-0cdc1fb6cabb"),
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(7566),
                            IsDeleted = false,
                            KeyName = "供应商",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "ThermoFisher,全式金,诺维赞,碧云天,Gibco,Merck,invitrogen"
                        },
                        new
                        {
                            Id = new Guid("f7c3617c-b4fc-416b-84a0-9c51a106d8cf"),
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(7568),
                            IsDeleted = false,
                            KeyName = "质量",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "ng,μg,mg,g,kg"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Labware", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArticleNumber")
                        .HasColumnType("text");

                    b.Property<int>("AvailableHole")
                        .HasColumnType("integer");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("Specification")
                        .HasColumnType("text");

                    b.Property<string>("Subclass")
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Labwares");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.LabwareUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProtocolStepId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolStepId");

                    b.ToTable("LabwareUsage");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Line", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EndNodeID")
                        .HasColumnType("uuid");

                    b.Property<string>("Lable")
                        .HasColumnType("text");

                    b.Property<Guid>("ProcessID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StartNodeID")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EndNodeID");

                    b.HasIndex("ProcessID");

                    b.HasIndex("StartNodeID");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.LogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("OperationName")
                        .HasColumnType("text");

                    b.Property<DateTime>("OperationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OperationType")
                        .HasColumnType("text");

                    b.Property<string>("Operator")
                        .HasColumnType("text");

                    b.Property<string>("RequestParameters")
                        .HasColumnType("text");

                    b.Property<string>("RequestUrl")
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogItems");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Component")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("Redirect")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8c6618c5-a5b9-4333-9204-504289ea23a2"),
                            Code = "系统管理",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(2104),
                            Hidden = false,
                            Icon = "el-icon-s-tools",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system",
                            OrdinalNumber = 1,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/system",
                            Redirect = "/system/user",
                            Title = "系统管理",
                            Type = 0,
                            Url = "/system"
                        },
                        new
                        {
                            Id = new Guid("b44cd111-64e4-4733-84a3-ad33ce3aef70"),
                            Code = "用户管理",
                            Component = "system/user/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(4041),
                            Hidden = false,
                            Icon = "el-icon-user",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_user",
                            OrdinalNumber = 2,
                            ParentId = new Guid("8c6618c5-a5b9-4333-9204-504289ea23a2"),
                            Path = "user",
                            Title = "用户管理",
                            Type = 1,
                            Url = "user"
                        },
                        new
                        {
                            Id = new Guid("3ae1259f-598d-41eb-9880-338733ecb37c"),
                            Code = "技能管理",
                            Component = "system/skill/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(4792),
                            Hidden = false,
                            Icon = "skill",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_skill",
                            OrdinalNumber = 3,
                            ParentId = new Guid("8c6618c5-a5b9-4333-9204-504289ea23a2"),
                            Path = "skill",
                            Title = "技能管理",
                            Type = 1,
                            Url = "skill"
                        },
                        new
                        {
                            Id = new Guid("9b2010d1-d7d2-46e8-aa26-a93cfe462094"),
                            Code = "部门管理",
                            Component = "system/department/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(4947),
                            Hidden = false,
                            Icon = "peoples",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_department",
                            OrdinalNumber = 4,
                            ParentId = new Guid("8c6618c5-a5b9-4333-9204-504289ea23a2"),
                            Path = "department",
                            Title = "部门管理",
                            Type = 1,
                            Url = "department"
                        },
                        new
                        {
                            Id = new Guid("5b437f45-ff33-4268-b8a0-1f160f9e63e2"),
                            Code = "角色管理",
                            Component = "system/role/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(4961),
                            Hidden = false,
                            Icon = "el-icon-s-opportunity",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_role",
                            OrdinalNumber = 5,
                            ParentId = new Guid("8c6618c5-a5b9-4333-9204-504289ea23a2"),
                            Path = "role",
                            Title = "角色管理",
                            Type = 1,
                            Url = "role"
                        },
                        new
                        {
                            Id = new Guid("23a3ccdb-de52-405d-81ad-e965375eeabe"),
                            Code = "菜单管理",
                            Component = "system/menu/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(4971),
                            Hidden = false,
                            Icon = "el-icon-menu",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_menu",
                            OrdinalNumber = 6,
                            ParentId = new Guid("8c6618c5-a5b9-4333-9204-504289ea23a2"),
                            Path = "menu",
                            Title = "菜单管理",
                            Type = 1,
                            Url = "menu"
                        },
                        new
                        {
                            Id = new Guid("d3e87668-21b1-48fa-9239-b1a555873afc"),
                            Code = "字典项管理",
                            Component = "system/dictionary/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(4978),
                            Hidden = false,
                            Icon = "el-icon-tickets",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_dictionary",
                            OrdinalNumber = 7,
                            ParentId = new Guid("8c6618c5-a5b9-4333-9204-504289ea23a2"),
                            Path = "dictionary",
                            Title = "字典项管理",
                            Type = 1,
                            Url = "dictionary"
                        },
                        new
                        {
                            Id = new Guid("57f96d4c-b6a2-4582-adf7-8f3d13a959db"),
                            Code = "日志管理",
                            Component = "system/logs/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(4991),
                            Hidden = false,
                            Icon = "el-icon-edit-outline",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_log",
                            OrdinalNumber = 8,
                            ParentId = new Guid("8c6618c5-a5b9-4333-9204-504289ea23a2"),
                            Path = "log",
                            Title = "日志管理",
                            Type = 1,
                            Url = "log"
                        },
                        new
                        {
                            Id = new Guid("8c3a4acc-aba1-4f5c-b18d-b72516762175"),
                            Code = "基础数据配置",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(4995),
                            Hidden = false,
                            Icon = "el-icon-files",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic",
                            OrdinalNumber = 9,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/basic",
                            Redirect = "/basic/user",
                            Title = "基础数据配置",
                            Type = 0,
                            Url = "/basic"
                        },
                        new
                        {
                            Id = new Guid("8df97de7-9fc1-4e70-8cab-97b7874b3334"),
                            Code = "物种管理",
                            Component = "basic/species/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5005),
                            Hidden = false,
                            Icon = "el-icon-more",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_species",
                            OrdinalNumber = 10,
                            ParentId = new Guid("8c3a4acc-aba1-4f5c-b18d-b72516762175"),
                            Path = "species",
                            Title = "物种管理",
                            Type = 1,
                            Url = "species"
                        },
                        new
                        {
                            Id = new Guid("b6a18382-345c-4703-94db-03f40b4bd21a"),
                            Code = "细胞管理",
                            Component = "basic/cells/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5014),
                            Hidden = false,
                            Icon = "cells",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_cells",
                            OrdinalNumber = 11,
                            ParentId = new Guid("8c3a4acc-aba1-4f5c-b18d-b72516762175"),
                            Path = "cells",
                            Title = "细胞管理",
                            Type = 1,
                            Url = "cells"
                        },
                        new
                        {
                            Id = new Guid("24d62360-b2d8-42c4-a0ae-76152e55562f"),
                            Code = "位置管理",
                            Component = "basic/place/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5023),
                            Hidden = false,
                            Icon = "el-icon-location",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_place",
                            OrdinalNumber = 12,
                            ParentId = new Guid("8c3a4acc-aba1-4f5c-b18d-b72516762175"),
                            Path = "place",
                            Title = "位置管理",
                            Type = 1,
                            Url = "place"
                        },
                        new
                        {
                            Id = new Guid("1edc0786-4408-44da-8d0c-aa88f2f2a9c9"),
                            Code = "耗材管理",
                            Component = "basic/material/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5028),
                            Hidden = false,
                            Icon = "el-icon-printer",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_material",
                            OrdinalNumber = 13,
                            ParentId = new Guid("8c3a4acc-aba1-4f5c-b18d-b72516762175"),
                            Path = "material",
                            Title = "耗材管理",
                            Type = 1,
                            Url = "material"
                        },
                        new
                        {
                            Id = new Guid("66cbdde8-a894-4d5d-8620-3ac8c37b0791"),
                            Code = "试剂管理",
                            Component = "basic/reagent/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5032),
                            Hidden = false,
                            Icon = "chemistry",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_reagent",
                            OrdinalNumber = 14,
                            ParentId = new Guid("8c3a4acc-aba1-4f5c-b18d-b72516762175"),
                            Path = "reagent",
                            Title = "试剂管理",
                            Type = 1,
                            Url = "reagent"
                        },
                        new
                        {
                            Id = new Guid("929d603c-06ca-4845-bf3b-ab3e8bf7ad15"),
                            Code = "设备管理",
                            Component = "basic/equipment/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5036),
                            Hidden = false,
                            Icon = "el-icon-suitcase",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_equipment",
                            OrdinalNumber = 15,
                            ParentId = new Guid("8c3a4acc-aba1-4f5c-b18d-b72516762175"),
                            Path = "equipment",
                            Title = "设备管理",
                            Type = 1,
                            Url = "equipment"
                        },
                        new
                        {
                            Id = new Guid("769b18a2-aab4-4dad-b6f2-01fac40df787"),
                            Code = "样本管理",
                            Component = "sample/sample/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5045),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "sample_sample",
                            OrdinalNumber = 16,
                            ParentId = new Guid("8c3a4acc-aba1-4f5c-b18d-b72516762175"),
                            Path = "sample",
                            Title = "样本管理",
                            Type = 1,
                            Url = "sample"
                        },
                        new
                        {
                            Id = new Guid("14409391-adc2-4b1c-bb1d-4d22f426e62d"),
                            Code = "任务管理",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5054),
                            Hidden = false,
                            Icon = "el-icon-document-copy",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "task",
                            OrdinalNumber = 17,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/task",
                            Redirect = "/task/today",
                            Title = "任务管理",
                            Type = 0,
                            Url = "/task"
                        },
                        new
                        {
                            Id = new Guid("387f7cff-c6f3-42ef-baa4-592a96395af3"),
                            Code = "我的任务",
                            Component = "task/myTask/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5058),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "task_owner",
                            OrdinalNumber = 18,
                            ParentId = new Guid("14409391-adc2-4b1c-bb1d-4d22f426e62d"),
                            Path = "owner",
                            Title = "我的任务",
                            Type = 1,
                            Url = "owner"
                        },
                        new
                        {
                            Id = new Guid("7cd6d713-80af-41ad-b5da-7ab49256bfd8"),
                            Code = "今日任务",
                            Component = "task/today/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5065),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "task_today",
                            OrdinalNumber = 19,
                            ParentId = new Guid("14409391-adc2-4b1c-bb1d-4d22f426e62d"),
                            Path = "today",
                            Title = "今日任务",
                            Type = 1,
                            Url = "today"
                        },
                        new
                        {
                            Id = new Guid("9aa606c8-631e-4fc5-b5fe-9235da7cd3a4"),
                            Code = "项目管理",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5075),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "itiems",
                            OrdinalNumber = 20,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/items",
                            Redirect = "/items",
                            Title = "项目管理",
                            Type = 0,
                            Url = "/items"
                        },
                        new
                        {
                            Id = new Guid("b01c7f0d-2ced-443c-84e8-306ee8ba8eb2"),
                            Code = "Protocol Step管理",
                            Component = "items/proStep/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5078),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_protocol",
                            OrdinalNumber = 21,
                            ParentId = new Guid("9aa606c8-631e-4fc5-b5fe-9235da7cd3a4"),
                            Path = "protocol",
                            Title = "Protocol Step管理",
                            Type = 1,
                            Url = "protocol"
                        },
                        new
                        {
                            Id = new Guid("6bcb1961-2903-465f-bf51-eb7504e4592b"),
                            Code = "节点管理",
                            Component = "items/node/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5087),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_node",
                            OrdinalNumber = 22,
                            ParentId = new Guid("9aa606c8-631e-4fc5-b5fe-9235da7cd3a4"),
                            Path = "node",
                            Title = "节点管理",
                            Type = 1,
                            Url = "node"
                        },
                        new
                        {
                            Id = new Guid("54b18211-5acb-4af7-a46e-e06ad3c04a74"),
                            Code = "项目管理",
                            Component = "items/project/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5095),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_project",
                            OrdinalNumber = 23,
                            ParentId = new Guid("9aa606c8-631e-4fc5-b5fe-9235da7cd3a4"),
                            Path = "project",
                            Title = "项目管理",
                            Type = 1,
                            Url = "project"
                        },
                        new
                        {
                            Id = new Guid("9762dea9-1cb8-45c3-af85-7fd869b69ee6"),
                            Code = "Take管理",
                            Component = "items/task/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5134),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_take",
                            OrdinalNumber = 24,
                            ParentId = new Guid("9aa606c8-631e-4fc5-b5fe-9235da7cd3a4"),
                            Path = "take",
                            Title = "Take管理",
                            Type = 1,
                            Url = "take"
                        },
                        new
                        {
                            Id = new Guid("9b595b71-510d-498c-a9b2-dab20f28e8da"),
                            Code = "排程",
                            Component = "items/aps/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5145),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_aps",
                            OrdinalNumber = 25,
                            ParentId = new Guid("9aa606c8-631e-4fc5-b5fe-9235da7cd3a4"),
                            Path = "aps",
                            Title = "排程",
                            Type = 1,
                            Url = "aps"
                        },
                        new
                        {
                            Id = new Guid("aa00bce0-d1ce-47a3-b399-b9e7bde1e274"),
                            Code = "生产管理",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5150),
                            Hidden = false,
                            Icon = "el-icon-s-cooperation",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce",
                            OrdinalNumber = 26,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/produce",
                            Redirect = "/produce",
                            Title = "生产管理",
                            Type = 0,
                            Url = "/produce"
                        },
                        new
                        {
                            Id = new Guid("ccb5ec96-aacb-40ad-9918-30b2803ffcfa"),
                            Code = "订单",
                            Component = "produce/order/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5154),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_order",
                            OrdinalNumber = 27,
                            ParentId = new Guid("aa00bce0-d1ce-47a3-b399-b9e7bde1e274"),
                            Path = "order",
                            Title = "订单",
                            Type = 1,
                            Url = "order"
                        },
                        new
                        {
                            Id = new Guid("bbcee40b-1898-44c7-9237-ade035bee7d3"),
                            Code = "分子克隆",
                            Component = "produce/clone/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5170),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_clone",
                            OrdinalNumber = 28,
                            ParentId = new Guid("aa00bce0-d1ce-47a3-b399-b9e7bde1e274"),
                            Path = "clone",
                            Title = "分子克隆",
                            Type = 1,
                            Url = "clone"
                        },
                        new
                        {
                            Id = new Guid("d721b3be-ffd9-43c5-ac45-c39944a89e61"),
                            Code = "质粒纯化",
                            Component = "produce/plasmid/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5179),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_plasmid",
                            OrdinalNumber = 29,
                            ParentId = new Guid("aa00bce0-d1ce-47a3-b399-b9e7bde1e274"),
                            Path = "plasmid",
                            Title = "质粒纯化",
                            Type = 1,
                            Url = "plasmid"
                        },
                        new
                        {
                            Id = new Guid("bda7fe73-e5d3-4ef3-a0b8-d77c512c6cfc"),
                            Code = "qPCR检测",
                            Component = "produce/qPCR/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5184),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_qPCR",
                            OrdinalNumber = 30,
                            ParentId = new Guid("aa00bce0-d1ce-47a3-b399-b9e7bde1e274"),
                            Path = "qPCR",
                            Title = "qPCR检测",
                            Type = 1,
                            Url = "qPCR"
                        },
                        new
                        {
                            Id = new Guid("bdf03b4e-a3b2-4a23-a969-ace12f5340ec"),
                            Code = "SDS-PAGE检测",
                            Component = "produce/SDS/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5190),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_SDS",
                            OrdinalNumber = 31,
                            ParentId = new Guid("aa00bce0-d1ce-47a3-b399-b9e7bde1e274"),
                            Path = "SDS",
                            Title = "SDS-PAGE检测",
                            Type = 1,
                            Url = "SDS"
                        },
                        new
                        {
                            Id = new Guid("e29c668c-0b92-43d8-9866-7e3cca77daaa"),
                            Code = "无菌检测",
                            Component = "produce/asepticCheck/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5197),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_asepticCheck",
                            OrdinalNumber = 32,
                            ParentId = new Guid("aa00bce0-d1ce-47a3-b399-b9e7bde1e274"),
                            Path = "asepticCheck",
                            Title = "无菌检测",
                            Type = 1,
                            Url = "asepticCheck"
                        },
                        new
                        {
                            Id = new Guid("feba01e4-98c8-483a-b284-dbf3eb7dbe91"),
                            Code = "入库登记",
                            Component = "produce/wareHouse/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5202),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_wareHouse",
                            OrdinalNumber = 33,
                            ParentId = new Guid("aa00bce0-d1ce-47a3-b399-b9e7bde1e274"),
                            Path = "wareHouse",
                            Title = "入库登记",
                            Type = 1,
                            Url = "wareHouse"
                        },
                        new
                        {
                            Id = new Guid("566f37ac-bd48-429f-8298-7345c43a2c55"),
                            Code = "发货记录",
                            Component = "produce/deliverGoods/index",
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(5208),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_deliverGoods",
                            OrdinalNumber = 34,
                            ParentId = new Guid("aa00bce0-d1ce-47a3-b399-b9e7bde1e274"),
                            Path = "deliverGoods",
                            Title = "发货记录",
                            Type = 1,
                            Url = "deliverGoods"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.MolecularCloning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("CarrierStructure")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Enzyme")
                        .HasColumnType("text");

                    b.Property<string>("EnzymeCuttingPicture")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Od")
                        .HasColumnType("real");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("MolecularCloning");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CanGenerateResultFile")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanGenerateResultSample")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InteractiveTime")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("NodeTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uuid");

                    b.Property<string>("TimeWaitToRun")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NodeTypeId");

                    b.HasIndex("ProcessId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeDevice", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "DeviceId");

                    b.HasIndex("DeviceId");

                    b.ToTable("NodeDevices");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeLabware", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabwareId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "LabwareId");

                    b.HasIndex("LabwareId");

                    b.ToTable("NodeLabwares");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeProtocolStep", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProtocolStepId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "ProtocolStepId");

                    b.HasIndex("ProtocolStepId");

                    b.ToTable("NodeProtocolSteps");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeReagent", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReagentId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "ReagentId");

                    b.HasIndex("ReagentId");

                    b.ToTable("NodeReagents");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AnalysisReport")
                        .HasColumnType("text");

                    b.Property<Guid>("AnalysisReportFileId")
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("CarrierStructure")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("DemandTiter")
                        .HasColumnType("real");

                    b.Property<DateTime>("FinisheDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InsertionSequence")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<int>("PackagingTrayNumber")
                        .HasColumnType("integer");

                    b.Property<float>("Plasmid1")
                        .HasColumnType("real");

                    b.Property<float>("Plasmid2")
                        .HasColumnType("real");

                    b.Property<float>("Plasmid3")
                        .HasColumnType("real");

                    b.Property<float>("Plasmid4")
                        .HasColumnType("real");

                    b.Property<int>("PlasmidSize")
                        .HasColumnType("integer");

                    b.Property<int>("PlasmidType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SeroType")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<float>("SubpackageCubage")
                        .HasColumnType("real");

                    b.Property<int>("SubpackageNumber")
                        .HasColumnType("integer");

                    b.Property<float>("TotelDemand")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.PlasmidPurification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("CarrierStructure")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Enzyme")
                        .HasColumnType("text");

                    b.Property<string>("EnzymeCuttingPicture")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Od")
                        .HasColumnType("real");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlasmidSize")
                        .HasColumnType("integer");

                    b.Property<int>("PlasmidType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("PlasmidPurification");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PlannedStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectTask", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("ProjectId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectUser", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DeviceParameterId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceParameterId");

                    b.ToTable("ProtocolSteps");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.QpcrDetection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DetectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<float>("Titer")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("QpcrDetection");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Reagent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArticleNumber")
                        .HasColumnType("text");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Reagents");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ReagentUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("SolutionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SolutionId");

                    b.ToTable("ReagentUsage");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 617, DateTimeKind.Local).AddTicks(297),
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "超级管理员"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.RoleMenu", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ButtonId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "MenuId", "ButtonId");

                    b.HasIndex("ButtonId");

                    b.HasIndex("MenuId");

                    b.ToTable("RoleMenu");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("b44cd111-64e4-4733-84a3-ad33ce3aef70"),
                            ButtonId = new Guid("cce54550-ce05-404e-8aa0-7ef0b087de00")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("b44cd111-64e4-4733-84a3-ad33ce3aef70"),
                            ButtonId = new Guid("e8a50a37-eb36-4766-9fb2-d8eaed4ea5ca")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("b44cd111-64e4-4733-84a3-ad33ce3aef70"),
                            ButtonId = new Guid("e5448ea1-60f5-42da-99a5-77796285c1dc")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("b44cd111-64e4-4733-84a3-ad33ce3aef70"),
                            ButtonId = new Guid("f36b3aba-8ff1-440a-a8c7-f46818f5729e")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("b44cd111-64e4-4733-84a3-ad33ce3aef70"),
                            ButtonId = new Guid("d0380f84-60dd-4abd-b014-50b7ecd96e56")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("3ae1259f-598d-41eb-9880-338733ecb37c"),
                            ButtonId = new Guid("845b8a96-3851-4a7c-8c02-3e9388d6f23e")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("3ae1259f-598d-41eb-9880-338733ecb37c"),
                            ButtonId = new Guid("84fef568-941e-4520-9226-d9cbbf9c4b7c")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("3ae1259f-598d-41eb-9880-338733ecb37c"),
                            ButtonId = new Guid("bc0fd9f1-5389-40fe-91d7-39f3c486faa7")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("3ae1259f-598d-41eb-9880-338733ecb37c"),
                            ButtonId = new Guid("5e13e970-1d23-4581-84d3-536b98f7ce1b")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("9b2010d1-d7d2-46e8-aa26-a93cfe462094"),
                            ButtonId = new Guid("eb5a56cf-d9e5-4c59-b6bc-6993e082634f")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("9b2010d1-d7d2-46e8-aa26-a93cfe462094"),
                            ButtonId = new Guid("2cc3fc36-45f9-45cc-840a-f5b9f02db2c7")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("9b2010d1-d7d2-46e8-aa26-a93cfe462094"),
                            ButtonId = new Guid("624d5773-2520-4099-a8a0-0d6d32cf788e")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("9b2010d1-d7d2-46e8-aa26-a93cfe462094"),
                            ButtonId = new Guid("1f2449fc-6e0f-4383-94a4-bd751373cec3")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("5b437f45-ff33-4268-b8a0-1f160f9e63e2"),
                            ButtonId = new Guid("f456c8b5-d8d8-4b71-8bb5-4895f7fecb1c")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("5b437f45-ff33-4268-b8a0-1f160f9e63e2"),
                            ButtonId = new Guid("3f0f9060-213a-4304-af2c-f5d39ace903f")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("5b437f45-ff33-4268-b8a0-1f160f9e63e2"),
                            ButtonId = new Guid("e7fcf4e3-5417-4139-bf72-4bd16b138ff1")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("5b437f45-ff33-4268-b8a0-1f160f9e63e2"),
                            ButtonId = new Guid("c477fbcf-8787-4b9d-8e37-8052c0f4082c")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("23a3ccdb-de52-405d-81ad-e965375eeabe"),
                            ButtonId = new Guid("5276710c-9a4f-41e5-9bb0-d0cf4f91e44f")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("23a3ccdb-de52-405d-81ad-e965375eeabe"),
                            ButtonId = new Guid("7df07530-d397-4ab8-8ade-6f0068db6b35")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("23a3ccdb-de52-405d-81ad-e965375eeabe"),
                            ButtonId = new Guid("1210979c-8024-4180-bc52-403e17ccbc4c")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("23a3ccdb-de52-405d-81ad-e965375eeabe"),
                            ButtonId = new Guid("0005712d-877e-47f1-8d89-5ff5b4f623a6")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("d3e87668-21b1-48fa-9239-b1a555873afc"),
                            ButtonId = new Guid("ce041e6a-779f-411b-be8b-0618bc6513eb")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("d3e87668-21b1-48fa-9239-b1a555873afc"),
                            ButtonId = new Guid("5cc09918-fecf-494e-82e4-e808e1554318")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("d3e87668-21b1-48fa-9239-b1a555873afc"),
                            ButtonId = new Guid("511f3579-2841-4848-b80c-c4278bd11849")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("d3e87668-21b1-48fa-9239-b1a555873afc"),
                            ButtonId = new Guid("67f0ee56-876b-40ad-9c56-605979a0c5d1")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("d3e87668-21b1-48fa-9239-b1a555873afc"),
                            ButtonId = new Guid("249ad928-034a-4ea1-a9ad-9f3c17c40a07")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("57f96d4c-b6a2-4582-adf7-8f3d13a959db"),
                            ButtonId = new Guid("8eb5a63a-491e-41f9-a1bc-2673929037f0")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("8df97de7-9fc1-4e70-8cab-97b7874b3334"),
                            ButtonId = new Guid("12a92fc3-a88d-4601-96da-713dfebb0daf")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("8df97de7-9fc1-4e70-8cab-97b7874b3334"),
                            ButtonId = new Guid("97c3596c-4d39-410d-ab0f-22fa25c49155")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("8df97de7-9fc1-4e70-8cab-97b7874b3334"),
                            ButtonId = new Guid("fef043fa-72b8-4bef-af31-41c0f839fbf6")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("8df97de7-9fc1-4e70-8cab-97b7874b3334"),
                            ButtonId = new Guid("0c5f79bd-c397-4025-9264-9639ea49c69d")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("b6a18382-345c-4703-94db-03f40b4bd21a"),
                            ButtonId = new Guid("b502ab49-d8d6-41ef-9bbf-e53b95cc5ceb")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("b6a18382-345c-4703-94db-03f40b4bd21a"),
                            ButtonId = new Guid("ea7aaa55-d680-450c-89e1-d040017ec296")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("b6a18382-345c-4703-94db-03f40b4bd21a"),
                            ButtonId = new Guid("792e680a-cd4e-47a8-b183-2c23d3dd535d")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("b6a18382-345c-4703-94db-03f40b4bd21a"),
                            ButtonId = new Guid("b0151dc9-996c-4aa5-97d6-6bb880ad49e9")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("24d62360-b2d8-42c4-a0ae-76152e55562f"),
                            ButtonId = new Guid("09b09c2f-eacf-4089-ad40-797bdda2c4ae")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("1edc0786-4408-44da-8d0c-aa88f2f2a9c9"),
                            ButtonId = new Guid("862ec34f-be37-4462-b782-e8d46d7af9d0")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("66cbdde8-a894-4d5d-8620-3ac8c37b0791"),
                            ButtonId = new Guid("d9640d4d-baf9-47a4-a394-6d71fec9ddef")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("929d603c-06ca-4845-bf3b-ab3e8bf7ad15"),
                            ButtonId = new Guid("0d2a41e5-3627-43d3-bb84-c938a947292f")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("929d603c-06ca-4845-bf3b-ab3e8bf7ad15"),
                            ButtonId = new Guid("e49e4a1c-b9f9-4f58-b98c-3620f00ae240")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("929d603c-06ca-4845-bf3b-ab3e8bf7ad15"),
                            ButtonId = new Guid("eadca0b2-6d88-4980-bdd7-5d36495ee7f1")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("929d603c-06ca-4845-bf3b-ab3e8bf7ad15"),
                            ButtonId = new Guid("80c1c245-9c4d-4228-a65a-9f1085e133f8")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("769b18a2-aab4-4dad-b6f2-01fac40df787"),
                            ButtonId = new Guid("27fd9c5a-8d2a-4b7b-8c25-83a7b3d88c65")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("769b18a2-aab4-4dad-b6f2-01fac40df787"),
                            ButtonId = new Guid("05b4707b-bd6b-4595-b601-5be3724e347c")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("769b18a2-aab4-4dad-b6f2-01fac40df787"),
                            ButtonId = new Guid("f5a9225c-e548-4c15-a925-1fa8502bd2c3")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("769b18a2-aab4-4dad-b6f2-01fac40df787"),
                            ButtonId = new Guid("71ade60c-86b4-4337-b9dc-08252724b66b")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("387f7cff-c6f3-42ef-baa4-592a96395af3"),
                            ButtonId = new Guid("48a5f738-e261-4f2b-abda-7bd82367f7d8")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("387f7cff-c6f3-42ef-baa4-592a96395af3"),
                            ButtonId = new Guid("04c34a70-4f89-441f-8a73-9cf9aff6265c")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("387f7cff-c6f3-42ef-baa4-592a96395af3"),
                            ButtonId = new Guid("e2461ae0-0895-44c2-8c2e-0341082ad95d")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("387f7cff-c6f3-42ef-baa4-592a96395af3"),
                            ButtonId = new Guid("df22a567-a9b4-40c0-ad42-cbb8a5127a6b")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("7cd6d713-80af-41ad-b5da-7ab49256bfd8"),
                            ButtonId = new Guid("9e068b9c-4319-407e-86df-1c48d8c3c6f7")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("7cd6d713-80af-41ad-b5da-7ab49256bfd8"),
                            ButtonId = new Guid("f5332a01-e69a-4c32-a119-61648ce5ae40")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("7cd6d713-80af-41ad-b5da-7ab49256bfd8"),
                            ButtonId = new Guid("f79c0c54-2055-4e6a-a761-cf66069453a9")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("7cd6d713-80af-41ad-b5da-7ab49256bfd8"),
                            ButtonId = new Guid("ae0886e7-6772-4170-96e6-d2b45987dfb2")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("b01c7f0d-2ced-443c-84e8-306ee8ba8eb2"),
                            ButtonId = new Guid("b22e0f2a-991c-4721-a4f8-b6ece26aab7a")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("b01c7f0d-2ced-443c-84e8-306ee8ba8eb2"),
                            ButtonId = new Guid("925d7744-a03b-49c2-817d-24d3e900208f")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("b01c7f0d-2ced-443c-84e8-306ee8ba8eb2"),
                            ButtonId = new Guid("ae498aa0-7bd9-4fb6-9a56-ffda934b99c4")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("b01c7f0d-2ced-443c-84e8-306ee8ba8eb2"),
                            ButtonId = new Guid("c33b2ca7-b4d7-46fd-b642-29ed3f1b0748")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("6bcb1961-2903-465f-bf51-eb7504e4592b"),
                            ButtonId = new Guid("607d64bf-fd28-4e89-8356-8a180e471c8a")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("6bcb1961-2903-465f-bf51-eb7504e4592b"),
                            ButtonId = new Guid("21a5c012-2e03-4cfa-a5fb-48f607074823")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("6bcb1961-2903-465f-bf51-eb7504e4592b"),
                            ButtonId = new Guid("945a71bd-56aa-4f53-a176-163edde7555a")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("6bcb1961-2903-465f-bf51-eb7504e4592b"),
                            ButtonId = new Guid("7b4b9ba1-9766-4dc6-8dd9-0f19b15c0edc")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("54b18211-5acb-4af7-a46e-e06ad3c04a74"),
                            ButtonId = new Guid("c11cf2b2-e4cf-49b8-b732-02f3b7d472a2")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("54b18211-5acb-4af7-a46e-e06ad3c04a74"),
                            ButtonId = new Guid("1487ac76-7a3c-4bac-930e-7cb6ba78c669")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("54b18211-5acb-4af7-a46e-e06ad3c04a74"),
                            ButtonId = new Guid("37c83e66-8d27-498c-855f-fa23ad8ae275")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("54b18211-5acb-4af7-a46e-e06ad3c04a74"),
                            ButtonId = new Guid("3122ca43-7098-40f5-96d7-e749d0a989c7")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("9762dea9-1cb8-45c3-af85-7fd869b69ee6"),
                            ButtonId = new Guid("7de02c05-a351-4ebe-9e5e-1da18845da52")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("9762dea9-1cb8-45c3-af85-7fd869b69ee6"),
                            ButtonId = new Guid("3b5c2a85-cac6-4c5a-94b0-c1ba1d0fe165")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("9762dea9-1cb8-45c3-af85-7fd869b69ee6"),
                            ButtonId = new Guid("8a3fea25-5f43-4a2b-b2db-21e2aaed17a4")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("9762dea9-1cb8-45c3-af85-7fd869b69ee6"),
                            ButtonId = new Guid("a98060bf-80a4-4691-89be-239140d7b97b")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("9b595b71-510d-498c-a9b2-dab20f28e8da"),
                            ButtonId = new Guid("9e61a0e9-bbd0-4969-94b3-053f9c94b3de")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("ccb5ec96-aacb-40ad-9918-30b2803ffcfa"),
                            ButtonId = new Guid("23047700-2da3-4ad4-899b-354f21d2393c")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("ccb5ec96-aacb-40ad-9918-30b2803ffcfa"),
                            ButtonId = new Guid("b7d40835-b2cb-4360-85d1-39e01f6ae0b2")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("ccb5ec96-aacb-40ad-9918-30b2803ffcfa"),
                            ButtonId = new Guid("3a7fde22-602b-4449-8bfc-9cf2c0a9d6b4")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("ccb5ec96-aacb-40ad-9918-30b2803ffcfa"),
                            ButtonId = new Guid("d480b21f-1c5c-4e4b-85ca-847438e48912")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("ccb5ec96-aacb-40ad-9918-30b2803ffcfa"),
                            ButtonId = new Guid("d4ae7341-ee88-4092-a4f0-99d7352e482f")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("ccb5ec96-aacb-40ad-9918-30b2803ffcfa"),
                            ButtonId = new Guid("57d21c8f-9b2b-4d41-8af3-bc2285bce6df")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("ccb5ec96-aacb-40ad-9918-30b2803ffcfa"),
                            ButtonId = new Guid("dce5da26-eebd-4e09-8a39-57bce1760a64")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("ccb5ec96-aacb-40ad-9918-30b2803ffcfa"),
                            ButtonId = new Guid("e63afb0e-654d-46b7-af38-4aa0cbb9f27c")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("bbcee40b-1898-44c7-9237-ade035bee7d3"),
                            ButtonId = new Guid("52118ed1-1466-4ca5-a732-66f02182fc03")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("bbcee40b-1898-44c7-9237-ade035bee7d3"),
                            ButtonId = new Guid("f51f3c67-cc12-4426-8ec6-9bd7d0385b85")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("d721b3be-ffd9-43c5-ac45-c39944a89e61"),
                            ButtonId = new Guid("d7ba2dc5-0f62-4143-a297-fbb1c0118d61")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("d721b3be-ffd9-43c5-ac45-c39944a89e61"),
                            ButtonId = new Guid("f926d75d-409a-4ffb-bd42-8bcf435b1e52")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("bda7fe73-e5d3-4ef3-a0b8-d77c512c6cfc"),
                            ButtonId = new Guid("20ba2f97-ad6b-4562-9cd4-fc79974f284e")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("bda7fe73-e5d3-4ef3-a0b8-d77c512c6cfc"),
                            ButtonId = new Guid("2afd4d3a-a5f9-4616-a30e-e84ce647659c")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("bdf03b4e-a3b2-4a23-a969-ace12f5340ec"),
                            ButtonId = new Guid("bc66021f-9648-4df6-adbf-9e266a0c348b")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("bdf03b4e-a3b2-4a23-a969-ace12f5340ec"),
                            ButtonId = new Guid("16f8d431-fc74-4698-b842-2ec9187fbaf1")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("e29c668c-0b92-43d8-9866-7e3cca77daaa"),
                            ButtonId = new Guid("15bd8c59-1bb5-4127-a19b-42be553d5d89")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("e29c668c-0b92-43d8-9866-7e3cca77daaa"),
                            ButtonId = new Guid("9c2d0bc6-e2e0-43e6-9e93-344ca839fbf6")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("feba01e4-98c8-483a-b284-dbf3eb7dbe91"),
                            ButtonId = new Guid("5af731de-bacc-4489-bef5-f122582779d9")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("feba01e4-98c8-483a-b284-dbf3eb7dbe91"),
                            ButtonId = new Guid("0aecccce-65ea-463f-9ed7-e4a8c8934c7a")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("566f37ac-bd48-429f-8298-7345c43a2c55"),
                            ButtonId = new Guid("bd488987-79e1-41c7-93e0-a1a47ba704c5")
                        },
                        new
                        {
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52"),
                            MenuId = new Guid("566f37ac-bd48-429f-8298-7345c43a2c55"),
                            ButtonId = new Guid("49cdb677-5eee-41ac-aa27-4d5af11aee8c")
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Sample", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CellId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRealSample")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("NextPhotoTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CellId");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SampleDosage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCell")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SampleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SolutionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SampleId");

                    b.HasIndex("SolutionId");

                    b.ToTable("SampleDosages");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SdsPageDetection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DetectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DetectionPicture")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPurityQualified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<float>("ProteinTiter")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("SdsPageDetection");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("Consignee")
                        .HasColumnType("text");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ShipmentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Shipment");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("SkillName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Solution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProtocolStepId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolStepId")
                        .IsUnique();

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Species", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChineseName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EnglishName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LatinName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SterilityDetection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DetectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DetectionPicture")
                        .HasColumnType("text");

                    b.Property<bool>("IsBacterialPollute")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluorescence")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("SterilityDetection");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.StockIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StockInDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("StockIn");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Take", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentTaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int>("TakeCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Takes");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TakeTask", b =>
                {
                    b.Property<Guid>("TakeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("TakeId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TakeTasks");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProtocolId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid>("TakeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("NodeId");

                    b.HasIndex("ProtocolId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskLabware", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabwareId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "LabwareId");

                    b.HasIndex("LabwareId");

                    b.ToTable("TaskLabwares");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskReagent", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReagentId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "ReagentId");

                    b.HasIndex("ReagentId");

                    b.ToTable("TaskReagents");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskSample", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SampleId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "SampleId");

                    b.HasIndex("SampleId");

                    b.ToTable("TaskSamples");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskUser", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskUser");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EMail")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("WorkTime")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("72871f96-9674-4322-844f-43976a0afaee"),
                            CreatedAt = new DateTime(2021, 8, 9, 18, 19, 29, 614, DateTimeKind.Local).AddTicks(1085),
                            EMail = "234298234@qq.com",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MobileNumber = "13523429876",
                            UserName = "admin@admin.com",
                            WorkTime = "8:00-9:00"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserDepartmentRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "DepartmentId", "RoleId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserDepartmentRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("72871f96-9674-4322-844f-43976a0afaee"),
                            DepartmentId = new Guid("1fefd903-624b-4d9b-b3f1-59dcb278a8fb"),
                            RoleId = new Guid("574ae085-4909-4123-b6c4-ca0efba05c52")
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Button", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Menu", "Menu")
                        .WithMany("Buttons")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Cell", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Species", "Species")
                        .WithMany("Cells")
                        .HasForeignKey("SpeciesId");

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("CellId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("CellId");

                            b1.ToTable("Cell");

                            b1.WithOwner()
                                .HasForeignKey("CellId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("CellId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("CellId");

                            b1.ToTable("Cell");

                            b1.WithOwner()
                                .HasForeignKey("CellId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Device", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("DeviceId");

                            b1.ToTable("Devices");

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("DeviceId");

                            b1.ToTable("Devices");

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.DeviceParameter", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Device", "Device")
                        .WithMany("DeviceParameters")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.File", "Script", b1 =>
                        {
                            b1.Property<Guid>("DeviceParameterId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("DeviceParameterId");

                            b1.ToTable("DeviceParameters");

                            b1.WithOwner()
                                .HasForeignKey("DeviceParameterId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Labware", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("LabwareId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("LabwareId");

                            b1.ToTable("Labwares");

                            b1.WithOwner()
                                .HasForeignKey("LabwareId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("LabwareId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("LabwareId");

                            b1.ToTable("Labwares");

                            b1.WithOwner()
                                .HasForeignKey("LabwareId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.LabwareUsage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithMany("LabwareUsages")
                        .HasForeignKey("ProtocolStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Line", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "EndNode")
                        .WithMany("EndLines")
                        .HasForeignKey("EndNodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Process", "Process")
                        .WithMany("Lines")
                        .HasForeignKey("ProcessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "StartNode")
                        .WithMany("StartLines")
                        .HasForeignKey("StartNodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.MolecularCloning", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("MolecularCloning")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.MolecularCloning", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("MolecularCloningId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("MolecularCloningId");

                            b1.ToTable("MolecularCloning");

                            b1.WithOwner()
                                .HasForeignKey("MolecularCloningId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Node", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Skill", "NodeType")
                        .WithMany("Nodes")
                        .HasForeignKey("NodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Process", null)
                        .WithMany("Nodes")
                        .HasForeignKey("ProcessId");

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.TimeInterval", "Duration", b1 =>
                        {
                            b1.Property<Guid>("NodeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("NodeId");

                            b1.ToTable("Nodes");

                            b1.WithOwner()
                                .HasForeignKey("NodeId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeDevice", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Device", "Device")
                        .WithMany("Nodes")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeLabware", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Labware", "Labware")
                        .WithMany("Nodes")
                        .HasForeignKey("LabwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeProtocolStep", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany("ProtocolSteps")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithMany("Nodes")
                        .HasForeignKey("ProtocolStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeReagent", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Reagent", "Reagent")
                        .WithMany("Nodes")
                        .HasForeignKey("ReagentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.PlasmidPurification", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("PlasmidPurification")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.PlasmidPurification", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("PlasmidPurificationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("PlasmidPurificationId");

                            b1.ToTable("PlasmidPurification");

                            b1.WithOwner()
                                .HasForeignKey("PlasmidPurificationId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Project", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Process", "Process")
                        .WithMany("Projects")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectTask", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Projects")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectUser", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Project", "Project")
                        .WithMany("Users")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.DeviceParameter", "DeviceParameter")
                        .WithMany("ProtocolSteps")
                        .HasForeignKey("DeviceParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.QpcrDetection", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("QpcrDetection")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.QpcrDetection", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Reagent", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "AvailableCubage", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "AvailableQuality", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ReagentUsage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Solution", "Solution")
                        .WithMany("ReagentUsages")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Cubage", b1 =>
                        {
                            b1.Property<Guid>("ReagentUsageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentUsageId");

                            b1.ToTable("ReagentUsage");

                            b1.WithOwner()
                                .HasForeignKey("ReagentUsageId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("ReagentUsageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentUsageId");

                            b1.ToTable("ReagentUsage");

                            b1.WithOwner()
                                .HasForeignKey("ReagentUsageId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.RoleMenu", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Button", "Button")
                        .WithMany("RoleMenus")
                        .HasForeignKey("ButtonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Menu", "Menu")
                        .WithMany("Roles")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Role", "Role")
                        .WithMany("Menus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Sample", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Cell", "Cell")
                        .WithMany("Samples")
                        .HasForeignKey("CellId");

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Cubage", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SampleDosage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Sample", "Sample")
                        .WithMany("SampleDosages")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Solution", "Solution")
                        .WithMany("SampleDosages")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Cubage", b1 =>
                        {
                            b1.Property<Guid>("SampleDosageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleDosageId");

                            b1.ToTable("SampleDosages");

                            b1.WithOwner()
                                .HasForeignKey("SampleDosageId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("SampleDosageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleDosageId");

                            b1.ToTable("SampleDosages");

                            b1.WithOwner()
                                .HasForeignKey("SampleDosageId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SdsPageDetection", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("SdsPageDetection")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.SdsPageDetection", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Shipment", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("Shipment")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.Shipment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Address", "DeliveryAddress", b1 =>
                        {
                            b1.Property<Guid>("ShipmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .HasColumnType("text");

                            b1.Property<string>("Detail")
                                .HasColumnType("text");

                            b1.Property<string>("District")
                                .HasColumnType("text");

                            b1.Property<string>("Province")
                                .HasColumnType("text");

                            b1.HasKey("ShipmentId");

                            b1.ToTable("Shipment");

                            b1.WithOwner()
                                .HasForeignKey("ShipmentId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Solution", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithOne("Solution")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.Solution", "ProtocolStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Total", b1 =>
                        {
                            b1.Property<Guid>("SolutionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SolutionId");

                            b1.ToTable("Solutions");

                            b1.WithOwner()
                                .HasForeignKey("SolutionId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Species", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "SpeciesId", b1 =>
                        {
                            b1.Property<Guid>("SpeciesId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("SpeciesId");

                            b1.ToTable("Species");

                            b1.WithOwner()
                                .HasForeignKey("SpeciesId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SterilityDetection", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("SterilityDetection")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.SterilityDetection", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.StockIn", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("StockIn")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.StockIn", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Take", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Project", "Project")
                        .WithMany("Takes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TakeTask", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Take", "Take")
                        .WithMany("Tasks")
                        .HasForeignKey("TakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Takes")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Task", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Device", "Device")
                        .WithMany("Tasks")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany("Tasks")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithMany("Tasks")
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Megarobo.KunPengLIMS.Domain.Entities.File", "ResultAttachments", b1 =>
                        {
                            b1.Property<Guid>("TaskId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("TaskId", "Id");

                            b1.ToTable("Tasks_ResultAttachments");

                            b1.WithOwner()
                                .HasForeignKey("TaskId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskLabware", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Labware", "Labware")
                        .WithMany("Tasks")
                        .HasForeignKey("LabwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Labwares")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskReagent", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Reagent", "Reagent")
                        .WithMany("Tasks")
                        .HasForeignKey("ReagentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Reagents")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskSample", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Sample", "Sample")
                        .WithMany("Tasks")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Samples")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskUser", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Users")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserDepartmentRole", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Department", "Department")
                        .WithMany("UserRoles")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Role", "Role")
                        .WithMany("UserDepartments")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("DepartmentRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserSkill", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Skill", "Skill")
                        .WithMany("Users")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("Skills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
