// <auto-generated />
using System;
using Megarobo.KunPengLIMS.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Megarobo.KunPengLIMS.Infrastructure.Migrations
{
    [DbContext(typeof(LimsDbContext))]
    [Migration("20210803081447_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Button", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Button");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dbb69650-c913-4c45-b4b4-ee2bb9cb06ef"),
                            Code = "QueryUser",
                            MenuId = new Guid("fab8cd31-d860-4134-9298-fc736892fb6f"),
                            Name = "查询用户"
                        },
                        new
                        {
                            Id = new Guid("f88a11c4-22fe-41b5-99aa-21824609d0e5"),
                            Code = "AddUser",
                            MenuId = new Guid("fab8cd31-d860-4134-9298-fc736892fb6f"),
                            Name = "新增用户"
                        },
                        new
                        {
                            Id = new Guid("32cd9d88-cf63-4d8f-bc02-abef629ed94b"),
                            Code = "UpdateUser",
                            MenuId = new Guid("fab8cd31-d860-4134-9298-fc736892fb6f"),
                            Name = "修改用户"
                        },
                        new
                        {
                            Id = new Guid("d72050d3-7ff6-4f5d-94a2-4ff15a9c63f7"),
                            Code = "DeleteUser",
                            MenuId = new Guid("fab8cd31-d860-4134-9298-fc736892fb6f"),
                            Name = "删除用户"
                        },
                        new
                        {
                            Id = new Guid("6d846116-b8df-434a-addb-dd5c7f83721c"),
                            Code = "ResetUser",
                            MenuId = new Guid("fab8cd31-d860-4134-9298-fc736892fb6f"),
                            Name = "重置用户"
                        },
                        new
                        {
                            Id = new Guid("dcd021c2-6ae4-40ed-9830-9453ae935103"),
                            Code = "QuerySkill",
                            MenuId = new Guid("2a688a7f-5845-4aed-8908-ac1cdb30889e"),
                            Name = "查询技能"
                        },
                        new
                        {
                            Id = new Guid("65c1b920-fe0a-4f7c-a473-e2be1b9088d9"),
                            Code = "AddSkill",
                            MenuId = new Guid("2a688a7f-5845-4aed-8908-ac1cdb30889e"),
                            Name = "新增技能"
                        },
                        new
                        {
                            Id = new Guid("a7477f64-252e-4792-b439-730f3fa8a109"),
                            Code = "UpdateSkill",
                            MenuId = new Guid("2a688a7f-5845-4aed-8908-ac1cdb30889e"),
                            Name = "修改技能"
                        },
                        new
                        {
                            Id = new Guid("2d75fd69-be11-43ce-a88d-f618cb318248"),
                            Code = "DeleteSkill",
                            MenuId = new Guid("2a688a7f-5845-4aed-8908-ac1cdb30889e"),
                            Name = "删除技能"
                        },
                        new
                        {
                            Id = new Guid("2a19e86d-691a-45cb-97d0-aa462e82b128"),
                            Code = "QueryDepartment",
                            MenuId = new Guid("8a6c8b20-d03f-49ad-96ec-94a10b4966a5"),
                            Name = "查询部门"
                        },
                        new
                        {
                            Id = new Guid("3cd9bfaa-0804-4e63-a5c5-88eb48904aba"),
                            Code = "AddDepartment",
                            MenuId = new Guid("8a6c8b20-d03f-49ad-96ec-94a10b4966a5"),
                            Name = "新增部门"
                        },
                        new
                        {
                            Id = new Guid("af85023c-b3f6-4251-b21b-5185b1322c54"),
                            Code = "UpdateDepartment",
                            MenuId = new Guid("8a6c8b20-d03f-49ad-96ec-94a10b4966a5"),
                            Name = "修改部门"
                        },
                        new
                        {
                            Id = new Guid("3903f7e0-800c-472d-9056-9280dc7fee85"),
                            Code = "DeleteDepartment",
                            MenuId = new Guid("8a6c8b20-d03f-49ad-96ec-94a10b4966a5"),
                            Name = "删除部门"
                        },
                        new
                        {
                            Id = new Guid("c1d795f4-c36f-4dc9-9be9-c1fcbd3776e2"),
                            Code = "QueryRole",
                            MenuId = new Guid("729c372c-872a-4aa5-a223-f50dbfb7cadd"),
                            Name = "查询角色"
                        },
                        new
                        {
                            Id = new Guid("c4cb610a-be3e-4e43-9cb1-aa44497f7012"),
                            Code = "AddRole",
                            MenuId = new Guid("729c372c-872a-4aa5-a223-f50dbfb7cadd"),
                            Name = "新增角色"
                        },
                        new
                        {
                            Id = new Guid("96cb3c26-3c42-4d27-86f6-7d573133dc0f"),
                            Code = "UpdateRole",
                            MenuId = new Guid("729c372c-872a-4aa5-a223-f50dbfb7cadd"),
                            Name = "修改角色"
                        },
                        new
                        {
                            Id = new Guid("c8fba0cf-cf75-498e-92b3-a361f0e45990"),
                            Code = "DeleteRole",
                            MenuId = new Guid("729c372c-872a-4aa5-a223-f50dbfb7cadd"),
                            Name = "删除角色"
                        },
                        new
                        {
                            Id = new Guid("3f05a015-0d24-4e8c-b72f-bed3e146f5e1"),
                            Code = "QueryMenu",
                            MenuId = new Guid("2026cca2-d896-4d27-8cd0-af3c65761933"),
                            Name = "查询菜单"
                        },
                        new
                        {
                            Id = new Guid("55a29b85-4be3-4598-95b9-9719dc5c2847"),
                            Code = "AddMenu",
                            MenuId = new Guid("2026cca2-d896-4d27-8cd0-af3c65761933"),
                            Name = "新增菜单"
                        },
                        new
                        {
                            Id = new Guid("07c33006-2f49-4dfa-ac67-af5dc7477fce"),
                            Code = "UpdateMenu",
                            MenuId = new Guid("2026cca2-d896-4d27-8cd0-af3c65761933"),
                            Name = "修改菜单"
                        },
                        new
                        {
                            Id = new Guid("9b805cde-c0a4-4389-ab41-d1710bdf82ac"),
                            Code = "DeleteMenu",
                            MenuId = new Guid("2026cca2-d896-4d27-8cd0-af3c65761933"),
                            Name = "删除菜单"
                        },
                        new
                        {
                            Id = new Guid("e007b218-cd17-4881-a638-1334d446d1d9"),
                            Code = "QueryDict",
                            MenuId = new Guid("41d94627-6e49-4f97-b577-9103db3e5760"),
                            Name = "查询字典项"
                        },
                        new
                        {
                            Id = new Guid("8b1c54c8-f0a1-48ba-8337-04a1ddc7ac6c"),
                            Code = "AddDict",
                            MenuId = new Guid("41d94627-6e49-4f97-b577-9103db3e5760"),
                            Name = "新增字典项"
                        },
                        new
                        {
                            Id = new Guid("bf712af0-a843-4a04-aa68-6bbd873ddbab"),
                            Code = "UpdateDict",
                            MenuId = new Guid("41d94627-6e49-4f97-b577-9103db3e5760"),
                            Name = "修改字典项"
                        },
                        new
                        {
                            Id = new Guid("032b5097-ed6c-48df-8cd5-b8a502474f02"),
                            Code = "DeleteDict",
                            MenuId = new Guid("41d94627-6e49-4f97-b577-9103db3e5760"),
                            Name = "删除字典项"
                        },
                        new
                        {
                            Id = new Guid("a1838bf7-3ab3-4190-ac6d-1c610d59cf20"),
                            Code = "UpdateDictValue",
                            MenuId = new Guid("41d94627-6e49-4f97-b577-9103db3e5760"),
                            Name = "修改字典项值"
                        },
                        new
                        {
                            Id = new Guid("6cc1c906-8730-46f6-9c65-619070db0d00"),
                            Code = "QueryLog",
                            MenuId = new Guid("405dbfc2-6728-42c8-98dc-ad896f65d03c"),
                            Name = "查询日志"
                        },
                        new
                        {
                            Id = new Guid("23170dc3-ea7d-4bd3-9cb8-9fce3ac90410"),
                            Code = "QuerySpecies",
                            MenuId = new Guid("530611b4-cb3c-4a3b-9f44-3260951b6944"),
                            Name = "查询物种"
                        },
                        new
                        {
                            Id = new Guid("3721cb3f-bd2f-4c05-98d6-b782a448b994"),
                            Code = "AddSpecies",
                            MenuId = new Guid("530611b4-cb3c-4a3b-9f44-3260951b6944"),
                            Name = "新增物种"
                        },
                        new
                        {
                            Id = new Guid("9c795bed-c9ee-4af7-881d-8310fa5e2ec4"),
                            Code = "UpdateSpecies",
                            MenuId = new Guid("530611b4-cb3c-4a3b-9f44-3260951b6944"),
                            Name = "修改物种"
                        },
                        new
                        {
                            Id = new Guid("4d983b17-4d34-4206-9527-ef2d1d5212b7"),
                            Code = "DeleteSpecies",
                            MenuId = new Guid("530611b4-cb3c-4a3b-9f44-3260951b6944"),
                            Name = "删除物种"
                        },
                        new
                        {
                            Id = new Guid("9ca95f44-55a9-47d0-b54d-acc31c2d8195"),
                            Code = "QueryCell",
                            MenuId = new Guid("c92356bf-1162-43dc-8ed2-7edf6b2135ea"),
                            Name = "查询细胞"
                        },
                        new
                        {
                            Id = new Guid("5dbbffe2-c9cf-4401-818f-74b48dad39ac"),
                            Code = "AddCell",
                            MenuId = new Guid("c92356bf-1162-43dc-8ed2-7edf6b2135ea"),
                            Name = "新增细胞"
                        },
                        new
                        {
                            Id = new Guid("dffcb380-a0df-4ba3-a2b7-d426699eb51d"),
                            Code = "UpdateCell",
                            MenuId = new Guid("c92356bf-1162-43dc-8ed2-7edf6b2135ea"),
                            Name = "修改细胞"
                        },
                        new
                        {
                            Id = new Guid("0bb1dccd-2ed9-495e-b5b6-c38fe8a60038"),
                            Code = "DeleteCell",
                            MenuId = new Guid("c92356bf-1162-43dc-8ed2-7edf6b2135ea"),
                            Name = "删除细胞"
                        },
                        new
                        {
                            Id = new Guid("50bef62f-8a71-4995-9b81-6230f9b9a0a5"),
                            Code = "QueryPosition",
                            MenuId = new Guid("bc37e0ef-a2a5-4b2a-8d43-41a4212b4660"),
                            Name = "查询位置"
                        },
                        new
                        {
                            Id = new Guid("c463fa8f-1ccb-4004-a6e1-c61e712a840f"),
                            Code = "QueryLabware",
                            MenuId = new Guid("55c9d00b-d7f9-433d-a12d-9a05525e2838"),
                            Name = "查询耗材"
                        },
                        new
                        {
                            Id = new Guid("7c550b69-5ec1-4f26-8179-89e35f04b413"),
                            Code = "QueryReagent",
                            MenuId = new Guid("18962658-0157-4b19-8687-059ae542a05d"),
                            Name = "查询试剂"
                        },
                        new
                        {
                            Id = new Guid("a37ecd7f-c235-4d3e-b350-c991c0e78590"),
                            Code = "QueryDevice",
                            MenuId = new Guid("e9cd9ca7-63b7-40bb-8abf-261db166a3c6"),
                            Name = "查询设备"
                        },
                        new
                        {
                            Id = new Guid("94b077f5-6020-4c3b-9ce6-38057b45d775"),
                            Code = "AddDevice",
                            MenuId = new Guid("e9cd9ca7-63b7-40bb-8abf-261db166a3c6"),
                            Name = "新增设备"
                        },
                        new
                        {
                            Id = new Guid("fe8f919f-2c46-43e7-8ecd-ff72187d96a2"),
                            Code = "UpdateDevice",
                            MenuId = new Guid("e9cd9ca7-63b7-40bb-8abf-261db166a3c6"),
                            Name = "修改设备"
                        },
                        new
                        {
                            Id = new Guid("f4c4f8d5-163d-41ea-9519-84513a3b5db4"),
                            Code = "DeleteDevice",
                            MenuId = new Guid("e9cd9ca7-63b7-40bb-8abf-261db166a3c6"),
                            Name = "删除设备"
                        },
                        new
                        {
                            Id = new Guid("1c6b0d7a-ff79-46e4-a989-0fa87bc713ba"),
                            Code = "QuerySample",
                            MenuId = new Guid("99b2f202-ee6a-47be-b8db-288740882a3d"),
                            Name = "查询样本"
                        },
                        new
                        {
                            Id = new Guid("dc309dec-f340-4128-9278-e072a3be2609"),
                            Code = "AddSample",
                            MenuId = new Guid("99b2f202-ee6a-47be-b8db-288740882a3d"),
                            Name = "新增样本"
                        },
                        new
                        {
                            Id = new Guid("7c613761-706e-4c6f-8ec8-9ab19cf95f7d"),
                            Code = "UpdateSample",
                            MenuId = new Guid("99b2f202-ee6a-47be-b8db-288740882a3d"),
                            Name = "修改样本"
                        },
                        new
                        {
                            Id = new Guid("1fc6f7c1-c041-4fa8-993b-ccbe43fac3a0"),
                            Code = "DeleteSample",
                            MenuId = new Guid("99b2f202-ee6a-47be-b8db-288740882a3d"),
                            Name = "删除样本"
                        },
                        new
                        {
                            Id = new Guid("953e3c9f-c648-493c-a17a-92f7fcee6422"),
                            Code = "QueryMyTask",
                            MenuId = new Guid("60b0c0c6-b9ad-4226-bf46-4e6ae46ada25"),
                            Name = "查询我的任务"
                        },
                        new
                        {
                            Id = new Guid("eac75ad8-c65a-41b2-aeb3-6b68a3771ad4"),
                            Code = "AddMyTask",
                            MenuId = new Guid("60b0c0c6-b9ad-4226-bf46-4e6ae46ada25"),
                            Name = "新增我的任务"
                        },
                        new
                        {
                            Id = new Guid("598ea3ae-262f-485f-8017-be3e45b36741"),
                            Code = "UpdateMyTask",
                            MenuId = new Guid("60b0c0c6-b9ad-4226-bf46-4e6ae46ada25"),
                            Name = "修改我的任务"
                        },
                        new
                        {
                            Id = new Guid("bf570b4d-b3c7-46b7-87fd-4e60887588f0"),
                            Code = "DeleteMyTask",
                            MenuId = new Guid("60b0c0c6-b9ad-4226-bf46-4e6ae46ada25"),
                            Name = "删除我的任务"
                        },
                        new
                        {
                            Id = new Guid("960e53c5-1995-44ea-a2c4-ec6769bc45c8"),
                            Code = "QueryTask",
                            MenuId = new Guid("fb1c4b54-dbb5-489a-a024-d4e5912d1a7b"),
                            Name = "查询今日任务"
                        },
                        new
                        {
                            Id = new Guid("04a62669-a3c6-4304-84f0-98dbc43292ec"),
                            Code = "AddTask",
                            MenuId = new Guid("fb1c4b54-dbb5-489a-a024-d4e5912d1a7b"),
                            Name = "新增今日任务"
                        },
                        new
                        {
                            Id = new Guid("bc44ed28-992e-4133-a3e0-19df1aa98970"),
                            Code = "UpdateTask",
                            MenuId = new Guid("fb1c4b54-dbb5-489a-a024-d4e5912d1a7b"),
                            Name = "修改今日任务"
                        },
                        new
                        {
                            Id = new Guid("72d8fdb9-b7de-4408-b831-12947d66c797"),
                            Code = "DeleteTask",
                            MenuId = new Guid("fb1c4b54-dbb5-489a-a024-d4e5912d1a7b"),
                            Name = "删除今日任务"
                        },
                        new
                        {
                            Id = new Guid("f9bf9f52-4a97-455b-a925-a6ae30623f98"),
                            Code = "QueryProtocolStep",
                            MenuId = new Guid("aa378fda-8d94-4d4b-9803-246c7da7c7c2"),
                            Name = "查询ProtocolStep"
                        },
                        new
                        {
                            Id = new Guid("f52804c7-e413-47f4-bdac-d90e5800e2c1"),
                            Code = "AddProtocolStep",
                            MenuId = new Guid("aa378fda-8d94-4d4b-9803-246c7da7c7c2"),
                            Name = "新增ProtocolStep"
                        },
                        new
                        {
                            Id = new Guid("7aee416a-a3e1-4b85-b9a0-1e64f519d5c9"),
                            Code = "UpdateProtocolStep",
                            MenuId = new Guid("aa378fda-8d94-4d4b-9803-246c7da7c7c2"),
                            Name = "修改ProtocolStep"
                        },
                        new
                        {
                            Id = new Guid("009d1ed9-dd20-425b-a9be-6efa30217f7d"),
                            Code = "DeleteProtocolStep",
                            MenuId = new Guid("aa378fda-8d94-4d4b-9803-246c7da7c7c2"),
                            Name = "删除ProtocolStep"
                        },
                        new
                        {
                            Id = new Guid("eca11d90-9930-4ec2-a8ba-83a712c7bb0c"),
                            Code = "QueryNode",
                            MenuId = new Guid("b8c0e30e-9af4-474e-aaaa-a41728e14eb7"),
                            Name = "查询节点"
                        },
                        new
                        {
                            Id = new Guid("a9270634-897e-4da3-9efa-f625e00d5dc4"),
                            Code = "AddNode",
                            MenuId = new Guid("b8c0e30e-9af4-474e-aaaa-a41728e14eb7"),
                            Name = "新增节点"
                        },
                        new
                        {
                            Id = new Guid("83bede36-2944-44ed-bd6c-4236863326ac"),
                            Code = "UpdateNode",
                            MenuId = new Guid("b8c0e30e-9af4-474e-aaaa-a41728e14eb7"),
                            Name = "修改节点"
                        },
                        new
                        {
                            Id = new Guid("072b38c3-b7df-48d3-a2f0-e7894d420455"),
                            Code = "DeleteNode",
                            MenuId = new Guid("b8c0e30e-9af4-474e-aaaa-a41728e14eb7"),
                            Name = "删除节点"
                        },
                        new
                        {
                            Id = new Guid("26c67e24-a662-4784-8dac-5d3019ad96a3"),
                            Code = "QueryProject",
                            MenuId = new Guid("6baf94eb-2a25-4635-91d1-3e507a14c381"),
                            Name = "查询项目"
                        },
                        new
                        {
                            Id = new Guid("0fccfbd3-26db-4dfc-a7da-38afc820c0ee"),
                            Code = "AddProject",
                            MenuId = new Guid("6baf94eb-2a25-4635-91d1-3e507a14c381"),
                            Name = "新增项目"
                        },
                        new
                        {
                            Id = new Guid("7a6b1f68-8a9e-47d6-98ff-5fd73a04163f"),
                            Code = "UpdateProject",
                            MenuId = new Guid("6baf94eb-2a25-4635-91d1-3e507a14c381"),
                            Name = "修改项目"
                        },
                        new
                        {
                            Id = new Guid("01a6c4d6-8c7b-4cfe-b1fa-022641a436bb"),
                            Code = "DeleteProject",
                            MenuId = new Guid("6baf94eb-2a25-4635-91d1-3e507a14c381"),
                            Name = "删除项目"
                        },
                        new
                        {
                            Id = new Guid("dc2ab682-a0cd-4379-976a-a7dd35e21aad"),
                            Code = "QueryTake",
                            MenuId = new Guid("e9d6f900-122e-4e31-ba33-c4787677b457"),
                            Name = "查询Take"
                        },
                        new
                        {
                            Id = new Guid("b8776a37-49e1-4e26-9cf8-9bc6857d747e"),
                            Code = "AddTake",
                            MenuId = new Guid("e9d6f900-122e-4e31-ba33-c4787677b457"),
                            Name = "新增Take"
                        },
                        new
                        {
                            Id = new Guid("6181ea92-177b-4f49-81f7-c6c9dea25755"),
                            Code = "UpdateTake",
                            MenuId = new Guid("e9d6f900-122e-4e31-ba33-c4787677b457"),
                            Name = "修改Take"
                        },
                        new
                        {
                            Id = new Guid("e255c2b8-f00a-4b41-8629-df0321029d79"),
                            Code = "DeleteTake",
                            MenuId = new Guid("e9d6f900-122e-4e31-ba33-c4787677b457"),
                            Name = "删除Take"
                        },
                        new
                        {
                            Id = new Guid("bd488e50-04d4-4845-8960-eddc6b99ce74"),
                            Code = "QuerySchedule",
                            MenuId = new Guid("f09ce904-3eb8-489e-8e6a-86d4a953e07d"),
                            Name = "查询排程"
                        },
                        new
                        {
                            Id = new Guid("3b67ff3f-9419-4344-8346-194ccc597207"),
                            Code = "QueryOrder",
                            MenuId = new Guid("db56dac2-5935-4925-b105-4ffa507f7a8b"),
                            Name = "查询订单"
                        },
                        new
                        {
                            Id = new Guid("befdbeb9-b943-4929-9efe-2bda694672d3"),
                            Code = "AddOrder",
                            MenuId = new Guid("db56dac2-5935-4925-b105-4ffa507f7a8b"),
                            Name = "新增订单"
                        },
                        new
                        {
                            Id = new Guid("4d0ff55c-37e4-4120-8f4c-f2b350c43f7a"),
                            Code = "UpdateOrder",
                            MenuId = new Guid("db56dac2-5935-4925-b105-4ffa507f7a8b"),
                            Name = "修改订单"
                        },
                        new
                        {
                            Id = new Guid("7ede79e8-3720-4bb3-93a5-66c6e71d2a46"),
                            Code = "DeleteOrder",
                            MenuId = new Guid("db56dac2-5935-4925-b105-4ffa507f7a8b"),
                            Name = "删除订单"
                        },
                        new
                        {
                            Id = new Guid("13968f94-4723-453c-b485-1e81382c62f7"),
                            Code = "QueryCloning",
                            MenuId = new Guid("e1ebe261-b19e-459d-8a7c-164523e26f0f"),
                            Name = "查询分子克隆"
                        },
                        new
                        {
                            Id = new Guid("7a79aad3-8974-4c55-aa3a-99d2b983a236"),
                            Code = "AddCloning",
                            MenuId = new Guid("e1ebe261-b19e-459d-8a7c-164523e26f0f"),
                            Name = "新增分子克隆"
                        },
                        new
                        {
                            Id = new Guid("912cb8ba-7666-46e2-a948-1ca6e7e6802e"),
                            Code = "UpdateCloning",
                            MenuId = new Guid("e1ebe261-b19e-459d-8a7c-164523e26f0f"),
                            Name = "修改分子克隆"
                        },
                        new
                        {
                            Id = new Guid("cc45a9c3-f522-4d3b-8e0c-b1c6a4f17d77"),
                            Code = "DeleteCloning",
                            MenuId = new Guid("e1ebe261-b19e-459d-8a7c-164523e26f0f"),
                            Name = "删除分子克隆"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Cell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("AtccId")
                        .HasColumnType("text");

                    b.Property<string>("AtccUrl")
                        .HasColumnType("text");

                    b.Property<int>("BioSafetyLevel")
                        .HasColumnType("integer");

                    b.Property<string>("CellCode")
                        .HasColumnType("text");

                    b.Property<string>("CellLineType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CrisprOrderLevel")
                        .HasColumnType("integer");

                    b.Property<string>("CultivationMethod")
                        .HasColumnType("text");

                    b.Property<string>("Disease")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Race")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<Guid?>("SpeciesId")
                        .HasColumnType("uuid");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("TissueType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Cell");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Manager")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d328f396-f9e3-476c-a7e9-1687c21f0a0f"),
                            ContactNumber = "13245679856",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 170, DateTimeKind.Local).AddTicks(5625),
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manager = "张三",
                            Name = "深圳镁伽",
                            OrdinalNumber = 1,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModelNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.DeviceParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceParameters");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.DictItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictItems");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Labware", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArticleNumber")
                        .HasColumnType("text");

                    b.Property<int>("AvailableHole")
                        .HasColumnType("integer");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("Specification")
                        .HasColumnType("text");

                    b.Property<string>("Subclass")
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Labwares");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.LabwareUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProtocolStepId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolStepId");

                    b.ToTable("LabwareUsage");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Line", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EndNodeID")
                        .HasColumnType("uuid");

                    b.Property<string>("Lable")
                        .HasColumnType("text");

                    b.Property<Guid>("ProcessID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StartNodeID")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EndNodeID");

                    b.HasIndex("ProcessID");

                    b.HasIndex("StartNodeID");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.LogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("OperationName")
                        .HasColumnType("text");

                    b.Property<DateTime>("OperationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OperationType")
                        .HasColumnType("text");

                    b.Property<string>("Operator")
                        .HasColumnType("text");

                    b.Property<string>("RequestParameters")
                        .HasColumnType("text");

                    b.Property<string>("RequestUrl")
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogItems");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Component")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("Redirect")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("005f028c-3656-4316-b09c-c7a2dbb63867"),
                            Code = "系统管理",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 170, DateTimeKind.Local).AddTicks(9370),
                            Hidden = false,
                            Icon = "el-icon-s-tools",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system",
                            OrdinalNumber = 1,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/system",
                            Redirect = "/system/user",
                            Title = "系统管理",
                            Type = 0,
                            Url = "/system"
                        },
                        new
                        {
                            Id = new Guid("fab8cd31-d860-4134-9298-fc736892fb6f"),
                            Code = "用户管理",
                            Component = "system/user/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(1107),
                            Hidden = false,
                            Icon = "el-icon-user",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_user",
                            OrdinalNumber = 2,
                            ParentId = new Guid("005f028c-3656-4316-b09c-c7a2dbb63867"),
                            Path = "user",
                            Title = "用户管理",
                            Type = 1,
                            Url = "user"
                        },
                        new
                        {
                            Id = new Guid("2a688a7f-5845-4aed-8908-ac1cdb30889e"),
                            Code = "技能管理",
                            Component = "system/skill/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2032),
                            Hidden = false,
                            Icon = "skill",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_skill",
                            OrdinalNumber = 3,
                            ParentId = new Guid("005f028c-3656-4316-b09c-c7a2dbb63867"),
                            Path = "skill",
                            Title = "技能管理",
                            Type = 1,
                            Url = "skill"
                        },
                        new
                        {
                            Id = new Guid("8a6c8b20-d03f-49ad-96ec-94a10b4966a5"),
                            Code = "部门管理",
                            Component = "system/department/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2088),
                            Hidden = false,
                            Icon = "peoples",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_department",
                            OrdinalNumber = 4,
                            ParentId = new Guid("005f028c-3656-4316-b09c-c7a2dbb63867"),
                            Path = "department",
                            Title = "部门管理",
                            Type = 1,
                            Url = "department"
                        },
                        new
                        {
                            Id = new Guid("729c372c-872a-4aa5-a223-f50dbfb7cadd"),
                            Code = "角色管理",
                            Component = "system/role/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2099),
                            Hidden = false,
                            Icon = "el-icon-s-opportunity",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_role",
                            OrdinalNumber = 5,
                            ParentId = new Guid("005f028c-3656-4316-b09c-c7a2dbb63867"),
                            Path = "role",
                            Title = "角色管理",
                            Type = 1,
                            Url = "role"
                        },
                        new
                        {
                            Id = new Guid("2026cca2-d896-4d27-8cd0-af3c65761933"),
                            Code = "菜单管理",
                            Component = "system/menu/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2108),
                            Hidden = false,
                            Icon = "el-icon-menu",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_menu",
                            OrdinalNumber = 6,
                            ParentId = new Guid("005f028c-3656-4316-b09c-c7a2dbb63867"),
                            Path = "menu",
                            Title = "菜单管理",
                            Type = 1,
                            Url = "menu"
                        },
                        new
                        {
                            Id = new Guid("41d94627-6e49-4f97-b577-9103db3e5760"),
                            Code = "字典项管理",
                            Component = "system/dictionary/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2117),
                            Hidden = false,
                            Icon = "el-icon-tickets",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_dictionary",
                            OrdinalNumber = 7,
                            ParentId = new Guid("005f028c-3656-4316-b09c-c7a2dbb63867"),
                            Path = "dictionary",
                            Title = "字典项管理",
                            Type = 1,
                            Url = "dictionary"
                        },
                        new
                        {
                            Id = new Guid("405dbfc2-6728-42c8-98dc-ad896f65d03c"),
                            Code = "日志管理",
                            Component = "system/logs/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2126),
                            Hidden = false,
                            Icon = "el-icon-edit-outline",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_log",
                            OrdinalNumber = 8,
                            ParentId = new Guid("005f028c-3656-4316-b09c-c7a2dbb63867"),
                            Path = "log",
                            Title = "日志管理",
                            Type = 1,
                            Url = "log"
                        },
                        new
                        {
                            Id = new Guid("84d017c4-1bea-48e8-94a5-adfddd11fc20"),
                            Code = "基础数据配置",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2132),
                            Hidden = false,
                            Icon = "el-icon-files",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic",
                            OrdinalNumber = 9,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/basic",
                            Redirect = "/basic/user",
                            Title = "基础数据配置",
                            Type = 0,
                            Url = "/basic"
                        },
                        new
                        {
                            Id = new Guid("530611b4-cb3c-4a3b-9f44-3260951b6944"),
                            Code = "物种管理",
                            Component = "basic/species/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2142),
                            Hidden = false,
                            Icon = "el-icon-more",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_species",
                            OrdinalNumber = 10,
                            ParentId = new Guid("84d017c4-1bea-48e8-94a5-adfddd11fc20"),
                            Path = "species",
                            Title = "物种管理",
                            Type = 1,
                            Url = "species"
                        },
                        new
                        {
                            Id = new Guid("c92356bf-1162-43dc-8ed2-7edf6b2135ea"),
                            Code = "细胞管理",
                            Component = "basic/cells/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2151),
                            Hidden = false,
                            Icon = "cells",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_cells",
                            OrdinalNumber = 11,
                            ParentId = new Guid("84d017c4-1bea-48e8-94a5-adfddd11fc20"),
                            Path = "cells",
                            Title = "细胞管理",
                            Type = 1,
                            Url = "cells"
                        },
                        new
                        {
                            Id = new Guid("bc37e0ef-a2a5-4b2a-8d43-41a4212b4660"),
                            Code = "位置管理",
                            Component = "basic/place/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2159),
                            Hidden = false,
                            Icon = "el-icon-location",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_place",
                            OrdinalNumber = 12,
                            ParentId = new Guid("84d017c4-1bea-48e8-94a5-adfddd11fc20"),
                            Path = "place",
                            Title = "位置管理",
                            Type = 1,
                            Url = "place"
                        },
                        new
                        {
                            Id = new Guid("55c9d00b-d7f9-433d-a12d-9a05525e2838"),
                            Code = "耗材管理",
                            Component = "basic/material/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2163),
                            Hidden = false,
                            Icon = "el-icon-printer",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_material",
                            OrdinalNumber = 13,
                            ParentId = new Guid("84d017c4-1bea-48e8-94a5-adfddd11fc20"),
                            Path = "material",
                            Title = "耗材管理",
                            Type = 1,
                            Url = "material"
                        },
                        new
                        {
                            Id = new Guid("18962658-0157-4b19-8687-059ae542a05d"),
                            Code = "试剂管理",
                            Component = "basic/reagent/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2167),
                            Hidden = false,
                            Icon = "chemistry",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_reagent",
                            OrdinalNumber = 14,
                            ParentId = new Guid("84d017c4-1bea-48e8-94a5-adfddd11fc20"),
                            Path = "reagent",
                            Title = "试剂管理",
                            Type = 1,
                            Url = "reagent"
                        },
                        new
                        {
                            Id = new Guid("e9cd9ca7-63b7-40bb-8abf-261db166a3c6"),
                            Code = "设备管理",
                            Component = "basic/equipment/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2173),
                            Hidden = false,
                            Icon = "el-icon-suitcase",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_equipment",
                            OrdinalNumber = 15,
                            ParentId = new Guid("84d017c4-1bea-48e8-94a5-adfddd11fc20"),
                            Path = "equipment",
                            Title = "设备管理",
                            Type = 1,
                            Url = "equipment"
                        },
                        new
                        {
                            Id = new Guid("99b2f202-ee6a-47be-b8db-288740882a3d"),
                            Code = "样本管理",
                            Component = "sample/sample/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2181),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "sample_sample",
                            OrdinalNumber = 16,
                            ParentId = new Guid("84d017c4-1bea-48e8-94a5-adfddd11fc20"),
                            Path = "sample",
                            Title = "样本管理",
                            Type = 1,
                            Url = "sample"
                        },
                        new
                        {
                            Id = new Guid("b1c1d0db-d0b6-4f54-bab2-bed7fa247779"),
                            Code = "任务管理",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2189),
                            Hidden = false,
                            Icon = "el-icon-document-copy",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "task",
                            OrdinalNumber = 17,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/task",
                            Redirect = "/task/today",
                            Title = "任务管理",
                            Type = 0,
                            Url = "/task"
                        },
                        new
                        {
                            Id = new Guid("60b0c0c6-b9ad-4226-bf46-4e6ae46ada25"),
                            Code = "我的任务",
                            Component = "task/myTask/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2193),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "task_owner",
                            OrdinalNumber = 18,
                            ParentId = new Guid("b1c1d0db-d0b6-4f54-bab2-bed7fa247779"),
                            Path = "owner",
                            Title = "我的任务",
                            Type = 1,
                            Url = "owner"
                        },
                        new
                        {
                            Id = new Guid("fb1c4b54-dbb5-489a-a024-d4e5912d1a7b"),
                            Code = "今日任务",
                            Component = "task/today/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2201),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "task_today",
                            OrdinalNumber = 19,
                            ParentId = new Guid("b1c1d0db-d0b6-4f54-bab2-bed7fa247779"),
                            Path = "today",
                            Title = "今日任务",
                            Type = 1,
                            Url = "today"
                        },
                        new
                        {
                            Id = new Guid("5fce4782-d3b7-40de-b9d1-70f30f3c8115"),
                            Code = "项目管理",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2208),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "itiems",
                            OrdinalNumber = 20,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/items",
                            Redirect = "/items",
                            Title = "项目管理",
                            Type = 0,
                            Url = "/items"
                        },
                        new
                        {
                            Id = new Guid("aa378fda-8d94-4d4b-9803-246c7da7c7c2"),
                            Code = "Protocol Step管理",
                            Component = "items/proStep/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2211),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_protocol",
                            OrdinalNumber = 21,
                            ParentId = new Guid("5fce4782-d3b7-40de-b9d1-70f30f3c8115"),
                            Path = "protocol",
                            Title = "Protocol Step管理",
                            Type = 1,
                            Url = "protocol"
                        },
                        new
                        {
                            Id = new Guid("b8c0e30e-9af4-474e-aaaa-a41728e14eb7"),
                            Code = "节点管理",
                            Component = "items/node/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2220),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_node",
                            OrdinalNumber = 22,
                            ParentId = new Guid("5fce4782-d3b7-40de-b9d1-70f30f3c8115"),
                            Path = "node",
                            Title = "节点管理",
                            Type = 1,
                            Url = "node"
                        },
                        new
                        {
                            Id = new Guid("6baf94eb-2a25-4635-91d1-3e507a14c381"),
                            Code = "项目管理",
                            Component = "items/project/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2229),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_project",
                            OrdinalNumber = 23,
                            ParentId = new Guid("5fce4782-d3b7-40de-b9d1-70f30f3c8115"),
                            Path = "project",
                            Title = "项目管理",
                            Type = 1,
                            Url = "project"
                        },
                        new
                        {
                            Id = new Guid("e9d6f900-122e-4e31-ba33-c4787677b457"),
                            Code = "Take管理",
                            Component = "items/task/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2262),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_take",
                            OrdinalNumber = 24,
                            ParentId = new Guid("5fce4782-d3b7-40de-b9d1-70f30f3c8115"),
                            Path = "take",
                            Title = "Take管理",
                            Type = 1,
                            Url = "take"
                        },
                        new
                        {
                            Id = new Guid("f09ce904-3eb8-489e-8e6a-86d4a953e07d"),
                            Code = "排程",
                            Component = "items/aps/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2271),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_aps",
                            OrdinalNumber = 25,
                            ParentId = new Guid("5fce4782-d3b7-40de-b9d1-70f30f3c8115"),
                            Path = "aps",
                            Title = "排程",
                            Type = 1,
                            Url = "aps"
                        },
                        new
                        {
                            Id = new Guid("3686c957-edd5-461b-b697-b9d603db60c3"),
                            Code = "生产管理",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2275),
                            Hidden = false,
                            Icon = "el-icon-s-cooperation",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce",
                            OrdinalNumber = 26,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/produce",
                            Redirect = "/produce",
                            Title = "生产管理",
                            Type = 0,
                            Url = "/produce"
                        },
                        new
                        {
                            Id = new Guid("db56dac2-5935-4925-b105-4ffa507f7a8b"),
                            Code = "订单",
                            Component = "produce/order/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2278),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_order",
                            OrdinalNumber = 27,
                            ParentId = new Guid("3686c957-edd5-461b-b697-b9d603db60c3"),
                            Path = "order",
                            Title = "订单",
                            Type = 1,
                            Url = "order"
                        },
                        new
                        {
                            Id = new Guid("e1ebe261-b19e-459d-8a7c-164523e26f0f"),
                            Code = "分子克隆",
                            Component = "produce/clone/index",
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 171, DateTimeKind.Local).AddTicks(2287),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_clone",
                            OrdinalNumber = 28,
                            ParentId = new Guid("3686c957-edd5-461b-b697-b9d603db60c3"),
                            Path = "clone",
                            Title = "分子克隆",
                            Type = 1,
                            Url = "clone"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.MolecularCloning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("CarrierStructure")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Enzyme")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Od")
                        .HasColumnType("real");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("MolecularCloning");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CanGenerateResultFile")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanGenerateResultSample")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InteractiveTime")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("NodeTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uuid");

                    b.Property<string>("TimeWaitToRun")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NodeTypeId");

                    b.HasIndex("ProcessId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeDevice", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "DeviceId");

                    b.HasIndex("DeviceId");

                    b.ToTable("NodeDevices");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeLabware", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabwareId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "LabwareId");

                    b.HasIndex("LabwareId");

                    b.ToTable("NodeLabwares");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeProtocolStep", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProtocolStepId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "ProtocolStepId");

                    b.HasIndex("ProtocolStepId");

                    b.ToTable("NodeProtocolSteps");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeReagent", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReagentId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "ReagentId");

                    b.HasIndex("ReagentId");

                    b.ToTable("NodeReagents");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("CarrierStructure")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("DemandTiter")
                        .HasColumnType("real");

                    b.Property<DateTime>("FinisheDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InsertionSequence")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<int>("PackagingTrayNumber")
                        .HasColumnType("integer");

                    b.Property<float>("Plasmid1")
                        .HasColumnType("real");

                    b.Property<float>("Plasmid2")
                        .HasColumnType("real");

                    b.Property<float>("Plasmid3")
                        .HasColumnType("real");

                    b.Property<float>("Plasmid4")
                        .HasColumnType("real");

                    b.Property<int>("PlasmidSize")
                        .HasColumnType("integer");

                    b.Property<int>("PlasmidType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SeroType")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<float>("SubpackageCubage")
                        .HasColumnType("real");

                    b.Property<int>("SubpackageNumber")
                        .HasColumnType("integer");

                    b.Property<float>("TotelDemand")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.PlasmidPurification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("CarrierStructure")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Enzyme")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Od")
                        .HasColumnType("real");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlasmidSize")
                        .HasColumnType("integer");

                    b.Property<int>("PlasmidType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("PlasmidPurification");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PlannedStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectTask", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("ProjectId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectUser", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DeviceParameterId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceParameterId");

                    b.ToTable("ProtocolSteps");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.QpcrDetection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DetectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<float>("Titer")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("QpcrDetection");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Reagent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArticleNumber")
                        .HasColumnType("text");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Reagents");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ReagentUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("SolutionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SolutionId");

                    b.ToTable("ReagentUsage");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 170, DateTimeKind.Local).AddTicks(7352),
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "超级管理员"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.RoleMenu", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ButtonId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "MenuId", "ButtonId");

                    b.HasIndex("ButtonId");

                    b.HasIndex("MenuId");

                    b.ToTable("RoleMenu");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("fab8cd31-d860-4134-9298-fc736892fb6f"),
                            ButtonId = new Guid("dbb69650-c913-4c45-b4b4-ee2bb9cb06ef")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("fab8cd31-d860-4134-9298-fc736892fb6f"),
                            ButtonId = new Guid("f88a11c4-22fe-41b5-99aa-21824609d0e5")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("fab8cd31-d860-4134-9298-fc736892fb6f"),
                            ButtonId = new Guid("32cd9d88-cf63-4d8f-bc02-abef629ed94b")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("fab8cd31-d860-4134-9298-fc736892fb6f"),
                            ButtonId = new Guid("d72050d3-7ff6-4f5d-94a2-4ff15a9c63f7")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("fab8cd31-d860-4134-9298-fc736892fb6f"),
                            ButtonId = new Guid("6d846116-b8df-434a-addb-dd5c7f83721c")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("2a688a7f-5845-4aed-8908-ac1cdb30889e"),
                            ButtonId = new Guid("dcd021c2-6ae4-40ed-9830-9453ae935103")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("2a688a7f-5845-4aed-8908-ac1cdb30889e"),
                            ButtonId = new Guid("65c1b920-fe0a-4f7c-a473-e2be1b9088d9")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("2a688a7f-5845-4aed-8908-ac1cdb30889e"),
                            ButtonId = new Guid("a7477f64-252e-4792-b439-730f3fa8a109")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("2a688a7f-5845-4aed-8908-ac1cdb30889e"),
                            ButtonId = new Guid("2d75fd69-be11-43ce-a88d-f618cb318248")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("8a6c8b20-d03f-49ad-96ec-94a10b4966a5"),
                            ButtonId = new Guid("2a19e86d-691a-45cb-97d0-aa462e82b128")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("8a6c8b20-d03f-49ad-96ec-94a10b4966a5"),
                            ButtonId = new Guid("3cd9bfaa-0804-4e63-a5c5-88eb48904aba")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("8a6c8b20-d03f-49ad-96ec-94a10b4966a5"),
                            ButtonId = new Guid("af85023c-b3f6-4251-b21b-5185b1322c54")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("8a6c8b20-d03f-49ad-96ec-94a10b4966a5"),
                            ButtonId = new Guid("3903f7e0-800c-472d-9056-9280dc7fee85")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("729c372c-872a-4aa5-a223-f50dbfb7cadd"),
                            ButtonId = new Guid("c1d795f4-c36f-4dc9-9be9-c1fcbd3776e2")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("729c372c-872a-4aa5-a223-f50dbfb7cadd"),
                            ButtonId = new Guid("c4cb610a-be3e-4e43-9cb1-aa44497f7012")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("729c372c-872a-4aa5-a223-f50dbfb7cadd"),
                            ButtonId = new Guid("96cb3c26-3c42-4d27-86f6-7d573133dc0f")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("729c372c-872a-4aa5-a223-f50dbfb7cadd"),
                            ButtonId = new Guid("c8fba0cf-cf75-498e-92b3-a361f0e45990")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("2026cca2-d896-4d27-8cd0-af3c65761933"),
                            ButtonId = new Guid("3f05a015-0d24-4e8c-b72f-bed3e146f5e1")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("2026cca2-d896-4d27-8cd0-af3c65761933"),
                            ButtonId = new Guid("55a29b85-4be3-4598-95b9-9719dc5c2847")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("2026cca2-d896-4d27-8cd0-af3c65761933"),
                            ButtonId = new Guid("07c33006-2f49-4dfa-ac67-af5dc7477fce")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("2026cca2-d896-4d27-8cd0-af3c65761933"),
                            ButtonId = new Guid("9b805cde-c0a4-4389-ab41-d1710bdf82ac")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("41d94627-6e49-4f97-b577-9103db3e5760"),
                            ButtonId = new Guid("e007b218-cd17-4881-a638-1334d446d1d9")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("41d94627-6e49-4f97-b577-9103db3e5760"),
                            ButtonId = new Guid("8b1c54c8-f0a1-48ba-8337-04a1ddc7ac6c")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("41d94627-6e49-4f97-b577-9103db3e5760"),
                            ButtonId = new Guid("bf712af0-a843-4a04-aa68-6bbd873ddbab")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("41d94627-6e49-4f97-b577-9103db3e5760"),
                            ButtonId = new Guid("032b5097-ed6c-48df-8cd5-b8a502474f02")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("41d94627-6e49-4f97-b577-9103db3e5760"),
                            ButtonId = new Guid("a1838bf7-3ab3-4190-ac6d-1c610d59cf20")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("405dbfc2-6728-42c8-98dc-ad896f65d03c"),
                            ButtonId = new Guid("6cc1c906-8730-46f6-9c65-619070db0d00")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("530611b4-cb3c-4a3b-9f44-3260951b6944"),
                            ButtonId = new Guid("23170dc3-ea7d-4bd3-9cb8-9fce3ac90410")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("530611b4-cb3c-4a3b-9f44-3260951b6944"),
                            ButtonId = new Guid("3721cb3f-bd2f-4c05-98d6-b782a448b994")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("530611b4-cb3c-4a3b-9f44-3260951b6944"),
                            ButtonId = new Guid("9c795bed-c9ee-4af7-881d-8310fa5e2ec4")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("530611b4-cb3c-4a3b-9f44-3260951b6944"),
                            ButtonId = new Guid("4d983b17-4d34-4206-9527-ef2d1d5212b7")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("c92356bf-1162-43dc-8ed2-7edf6b2135ea"),
                            ButtonId = new Guid("9ca95f44-55a9-47d0-b54d-acc31c2d8195")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("c92356bf-1162-43dc-8ed2-7edf6b2135ea"),
                            ButtonId = new Guid("5dbbffe2-c9cf-4401-818f-74b48dad39ac")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("c92356bf-1162-43dc-8ed2-7edf6b2135ea"),
                            ButtonId = new Guid("dffcb380-a0df-4ba3-a2b7-d426699eb51d")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("c92356bf-1162-43dc-8ed2-7edf6b2135ea"),
                            ButtonId = new Guid("0bb1dccd-2ed9-495e-b5b6-c38fe8a60038")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("bc37e0ef-a2a5-4b2a-8d43-41a4212b4660"),
                            ButtonId = new Guid("50bef62f-8a71-4995-9b81-6230f9b9a0a5")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("55c9d00b-d7f9-433d-a12d-9a05525e2838"),
                            ButtonId = new Guid("c463fa8f-1ccb-4004-a6e1-c61e712a840f")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("18962658-0157-4b19-8687-059ae542a05d"),
                            ButtonId = new Guid("7c550b69-5ec1-4f26-8179-89e35f04b413")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("e9cd9ca7-63b7-40bb-8abf-261db166a3c6"),
                            ButtonId = new Guid("a37ecd7f-c235-4d3e-b350-c991c0e78590")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("e9cd9ca7-63b7-40bb-8abf-261db166a3c6"),
                            ButtonId = new Guid("94b077f5-6020-4c3b-9ce6-38057b45d775")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("e9cd9ca7-63b7-40bb-8abf-261db166a3c6"),
                            ButtonId = new Guid("fe8f919f-2c46-43e7-8ecd-ff72187d96a2")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("e9cd9ca7-63b7-40bb-8abf-261db166a3c6"),
                            ButtonId = new Guid("f4c4f8d5-163d-41ea-9519-84513a3b5db4")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("99b2f202-ee6a-47be-b8db-288740882a3d"),
                            ButtonId = new Guid("1c6b0d7a-ff79-46e4-a989-0fa87bc713ba")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("99b2f202-ee6a-47be-b8db-288740882a3d"),
                            ButtonId = new Guid("dc309dec-f340-4128-9278-e072a3be2609")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("99b2f202-ee6a-47be-b8db-288740882a3d"),
                            ButtonId = new Guid("7c613761-706e-4c6f-8ec8-9ab19cf95f7d")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("99b2f202-ee6a-47be-b8db-288740882a3d"),
                            ButtonId = new Guid("1fc6f7c1-c041-4fa8-993b-ccbe43fac3a0")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("60b0c0c6-b9ad-4226-bf46-4e6ae46ada25"),
                            ButtonId = new Guid("953e3c9f-c648-493c-a17a-92f7fcee6422")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("60b0c0c6-b9ad-4226-bf46-4e6ae46ada25"),
                            ButtonId = new Guid("eac75ad8-c65a-41b2-aeb3-6b68a3771ad4")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("60b0c0c6-b9ad-4226-bf46-4e6ae46ada25"),
                            ButtonId = new Guid("598ea3ae-262f-485f-8017-be3e45b36741")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("60b0c0c6-b9ad-4226-bf46-4e6ae46ada25"),
                            ButtonId = new Guid("bf570b4d-b3c7-46b7-87fd-4e60887588f0")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("fb1c4b54-dbb5-489a-a024-d4e5912d1a7b"),
                            ButtonId = new Guid("960e53c5-1995-44ea-a2c4-ec6769bc45c8")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("fb1c4b54-dbb5-489a-a024-d4e5912d1a7b"),
                            ButtonId = new Guid("04a62669-a3c6-4304-84f0-98dbc43292ec")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("fb1c4b54-dbb5-489a-a024-d4e5912d1a7b"),
                            ButtonId = new Guid("bc44ed28-992e-4133-a3e0-19df1aa98970")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("fb1c4b54-dbb5-489a-a024-d4e5912d1a7b"),
                            ButtonId = new Guid("72d8fdb9-b7de-4408-b831-12947d66c797")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("aa378fda-8d94-4d4b-9803-246c7da7c7c2"),
                            ButtonId = new Guid("f9bf9f52-4a97-455b-a925-a6ae30623f98")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("aa378fda-8d94-4d4b-9803-246c7da7c7c2"),
                            ButtonId = new Guid("f52804c7-e413-47f4-bdac-d90e5800e2c1")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("aa378fda-8d94-4d4b-9803-246c7da7c7c2"),
                            ButtonId = new Guid("7aee416a-a3e1-4b85-b9a0-1e64f519d5c9")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("aa378fda-8d94-4d4b-9803-246c7da7c7c2"),
                            ButtonId = new Guid("009d1ed9-dd20-425b-a9be-6efa30217f7d")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("b8c0e30e-9af4-474e-aaaa-a41728e14eb7"),
                            ButtonId = new Guid("eca11d90-9930-4ec2-a8ba-83a712c7bb0c")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("b8c0e30e-9af4-474e-aaaa-a41728e14eb7"),
                            ButtonId = new Guid("a9270634-897e-4da3-9efa-f625e00d5dc4")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("b8c0e30e-9af4-474e-aaaa-a41728e14eb7"),
                            ButtonId = new Guid("83bede36-2944-44ed-bd6c-4236863326ac")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("b8c0e30e-9af4-474e-aaaa-a41728e14eb7"),
                            ButtonId = new Guid("072b38c3-b7df-48d3-a2f0-e7894d420455")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("6baf94eb-2a25-4635-91d1-3e507a14c381"),
                            ButtonId = new Guid("26c67e24-a662-4784-8dac-5d3019ad96a3")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("6baf94eb-2a25-4635-91d1-3e507a14c381"),
                            ButtonId = new Guid("0fccfbd3-26db-4dfc-a7da-38afc820c0ee")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("6baf94eb-2a25-4635-91d1-3e507a14c381"),
                            ButtonId = new Guid("7a6b1f68-8a9e-47d6-98ff-5fd73a04163f")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("6baf94eb-2a25-4635-91d1-3e507a14c381"),
                            ButtonId = new Guid("01a6c4d6-8c7b-4cfe-b1fa-022641a436bb")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("e9d6f900-122e-4e31-ba33-c4787677b457"),
                            ButtonId = new Guid("dc2ab682-a0cd-4379-976a-a7dd35e21aad")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("e9d6f900-122e-4e31-ba33-c4787677b457"),
                            ButtonId = new Guid("b8776a37-49e1-4e26-9cf8-9bc6857d747e")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("e9d6f900-122e-4e31-ba33-c4787677b457"),
                            ButtonId = new Guid("6181ea92-177b-4f49-81f7-c6c9dea25755")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("e9d6f900-122e-4e31-ba33-c4787677b457"),
                            ButtonId = new Guid("e255c2b8-f00a-4b41-8629-df0321029d79")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("f09ce904-3eb8-489e-8e6a-86d4a953e07d"),
                            ButtonId = new Guid("bd488e50-04d4-4845-8960-eddc6b99ce74")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("db56dac2-5935-4925-b105-4ffa507f7a8b"),
                            ButtonId = new Guid("3b67ff3f-9419-4344-8346-194ccc597207")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("db56dac2-5935-4925-b105-4ffa507f7a8b"),
                            ButtonId = new Guid("befdbeb9-b943-4929-9efe-2bda694672d3")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("db56dac2-5935-4925-b105-4ffa507f7a8b"),
                            ButtonId = new Guid("4d0ff55c-37e4-4120-8f4c-f2b350c43f7a")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("db56dac2-5935-4925-b105-4ffa507f7a8b"),
                            ButtonId = new Guid("7ede79e8-3720-4bb3-93a5-66c6e71d2a46")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("e1ebe261-b19e-459d-8a7c-164523e26f0f"),
                            ButtonId = new Guid("13968f94-4723-453c-b485-1e81382c62f7")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("e1ebe261-b19e-459d-8a7c-164523e26f0f"),
                            ButtonId = new Guid("7a79aad3-8974-4c55-aa3a-99d2b983a236")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("e1ebe261-b19e-459d-8a7c-164523e26f0f"),
                            ButtonId = new Guid("912cb8ba-7666-46e2-a948-1ca6e7e6802e")
                        },
                        new
                        {
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc"),
                            MenuId = new Guid("e1ebe261-b19e-459d-8a7c-164523e26f0f"),
                            ButtonId = new Guid("cc45a9c3-f522-4d3b-8e0c-b1c6a4f17d77")
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Sample", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CellId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRealSample")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("NextPhotoTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CellId");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SampleDosage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCell")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SampleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SolutionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SampleId");

                    b.HasIndex("SolutionId");

                    b.ToTable("SampleDosages");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SdsPageDetection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DetectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPurityQualified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<float>("ProteinTiter")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("SdsPageDetection");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("Consignee")
                        .HasColumnType("text");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ShipmentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Shipment");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("SkillName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Solution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProtocolStepId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolStepId")
                        .IsUnique();

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Species", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChineseName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EnglishName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LatinName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SterilityDetection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DetectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsBacterialPollute")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluorescence")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("SterilityDetection");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.StockIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StockInDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("StockIn");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Take", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentTaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int>("TakeCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Takes");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TakeTask", b =>
                {
                    b.Property<Guid>("TakeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("TakeId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TakeTasks");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProtocolId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid>("TakeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("NodeId");

                    b.HasIndex("ProtocolId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskLabware", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabwareId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "LabwareId");

                    b.HasIndex("LabwareId");

                    b.ToTable("TaskLabwares");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskReagent", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReagentId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "ReagentId");

                    b.HasIndex("ReagentId");

                    b.ToTable("TaskReagents");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskSample", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SampleId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "SampleId");

                    b.HasIndex("SampleId");

                    b.ToTable("TaskSamples");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskUser", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskUser");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EMail")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("WorkTime")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ebb78c0-2703-4632-8f94-998666788413"),
                            CreatedAt = new DateTime(2021, 8, 3, 16, 14, 47, 167, DateTimeKind.Local).AddTicks(8802),
                            EMail = "234298234@qq.com",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MobileNumber = "13523429876",
                            UserName = "admin@admin.com",
                            WorkTime = "8:00-9:00"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserDepartmentRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "DepartmentId", "RoleId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserDepartmentRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8ebb78c0-2703-4632-8f94-998666788413"),
                            DepartmentId = new Guid("d328f396-f9e3-476c-a7e9-1687c21f0a0f"),
                            RoleId = new Guid("e2a7fa8b-b40d-4d05-98c6-9087176640bc")
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Button", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Menu", "Menu")
                        .WithMany("Buttons")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Cell", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Species", "Species")
                        .WithMany("Cells")
                        .HasForeignKey("SpeciesId");

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("CellId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("CellId");

                            b1.ToTable("Cell");

                            b1.WithOwner()
                                .HasForeignKey("CellId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("CellId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("CellId");

                            b1.ToTable("Cell");

                            b1.WithOwner()
                                .HasForeignKey("CellId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Device", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("DeviceId");

                            b1.ToTable("Devices");

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("DeviceId");

                            b1.ToTable("Devices");

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.DeviceParameter", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Device", "Device")
                        .WithMany("DeviceParameters")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.File", "Script", b1 =>
                        {
                            b1.Property<Guid>("DeviceParameterId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("DeviceParameterId");

                            b1.ToTable("DeviceParameters");

                            b1.WithOwner()
                                .HasForeignKey("DeviceParameterId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Labware", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("LabwareId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("LabwareId");

                            b1.ToTable("Labwares");

                            b1.WithOwner()
                                .HasForeignKey("LabwareId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("LabwareId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("LabwareId");

                            b1.ToTable("Labwares");

                            b1.WithOwner()
                                .HasForeignKey("LabwareId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.LabwareUsage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithMany("LabwareUsages")
                        .HasForeignKey("ProtocolStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Line", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "EndNode")
                        .WithMany("EndLines")
                        .HasForeignKey("EndNodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Process", "Process")
                        .WithMany("Lines")
                        .HasForeignKey("ProcessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "StartNode")
                        .WithMany("StartLines")
                        .HasForeignKey("StartNodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.MolecularCloning", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("MolecularCloning")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.MolecularCloning", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("MolecularCloningId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("MolecularCloningId");

                            b1.ToTable("MolecularCloning");

                            b1.WithOwner()
                                .HasForeignKey("MolecularCloningId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Node", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Skill", "NodeType")
                        .WithMany("Nodes")
                        .HasForeignKey("NodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Process", null)
                        .WithMany("Nodes")
                        .HasForeignKey("ProcessId");

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.TimeInterval", "Duration", b1 =>
                        {
                            b1.Property<Guid>("NodeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("NodeId");

                            b1.ToTable("Nodes");

                            b1.WithOwner()
                                .HasForeignKey("NodeId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeDevice", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Device", "Device")
                        .WithMany("Nodes")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeLabware", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Labware", "Labware")
                        .WithMany("Nodes")
                        .HasForeignKey("LabwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeProtocolStep", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany("ProtocolSteps")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithMany("Nodes")
                        .HasForeignKey("ProtocolStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeReagent", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Reagent", "Reagent")
                        .WithMany("Nodes")
                        .HasForeignKey("ReagentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.PlasmidPurification", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("PlasmidPurification")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.PlasmidPurification", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("PlasmidPurificationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("PlasmidPurificationId");

                            b1.ToTable("PlasmidPurification");

                            b1.WithOwner()
                                .HasForeignKey("PlasmidPurificationId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Project", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Process", "Process")
                        .WithMany("Projects")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectTask", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Projects")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectUser", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Project", "Project")
                        .WithMany("Users")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.DeviceParameter", "DeviceParameter")
                        .WithMany("ProtocolSteps")
                        .HasForeignKey("DeviceParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.QpcrDetection", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("QpcrDetection")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.QpcrDetection", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Reagent", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "AvailableCubage", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "AvailableQuality", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ReagentUsage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Solution", "Solution")
                        .WithMany("ReagentUsages")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Cubage", b1 =>
                        {
                            b1.Property<Guid>("ReagentUsageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentUsageId");

                            b1.ToTable("ReagentUsage");

                            b1.WithOwner()
                                .HasForeignKey("ReagentUsageId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("ReagentUsageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentUsageId");

                            b1.ToTable("ReagentUsage");

                            b1.WithOwner()
                                .HasForeignKey("ReagentUsageId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.RoleMenu", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Button", "Button")
                        .WithMany("RoleMenus")
                        .HasForeignKey("ButtonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Menu", "Menu")
                        .WithMany("Roles")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Role", "Role")
                        .WithMany("Menus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Sample", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Cell", "Cell")
                        .WithMany("Samples")
                        .HasForeignKey("CellId");

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Cubage", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SampleDosage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Sample", "Sample")
                        .WithMany("SampleDosages")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Solution", "Solution")
                        .WithMany("SampleDosages")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Cubage", b1 =>
                        {
                            b1.Property<Guid>("SampleDosageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleDosageId");

                            b1.ToTable("SampleDosages");

                            b1.WithOwner()
                                .HasForeignKey("SampleDosageId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("SampleDosageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleDosageId");

                            b1.ToTable("SampleDosages");

                            b1.WithOwner()
                                .HasForeignKey("SampleDosageId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SdsPageDetection", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("SdsPageDetection")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.SdsPageDetection", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Shipment", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("Shipment")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.Shipment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Address", "DeliveryAddress", b1 =>
                        {
                            b1.Property<Guid>("ShipmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .HasColumnType("text");

                            b1.Property<string>("Detail")
                                .HasColumnType("text");

                            b1.Property<string>("District")
                                .HasColumnType("text");

                            b1.Property<string>("Province")
                                .HasColumnType("text");

                            b1.HasKey("ShipmentId");

                            b1.ToTable("Shipment");

                            b1.WithOwner()
                                .HasForeignKey("ShipmentId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Solution", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithOne("Solution")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.Solution", "ProtocolStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Total", b1 =>
                        {
                            b1.Property<Guid>("SolutionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SolutionId");

                            b1.ToTable("Solutions");

                            b1.WithOwner()
                                .HasForeignKey("SolutionId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Species", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "SpeciesId", b1 =>
                        {
                            b1.Property<Guid>("SpeciesId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("SpeciesId");

                            b1.ToTable("Species");

                            b1.WithOwner()
                                .HasForeignKey("SpeciesId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SterilityDetection", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("SterilityDetection")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.SterilityDetection", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.StockIn", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("StockIn")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.StockIn", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Take", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Project", "Project")
                        .WithMany("Takes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TakeTask", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Take", "Take")
                        .WithMany("Tasks")
                        .HasForeignKey("TakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Takes")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Task", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Device", "Device")
                        .WithMany("Tasks")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany("Tasks")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithMany("Tasks")
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Megarobo.KunPengLIMS.Domain.Entities.File", "ResultAttachments", b1 =>
                        {
                            b1.Property<Guid>("TaskId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("TaskId", "Id");

                            b1.ToTable("Tasks_ResultAttachments");

                            b1.WithOwner()
                                .HasForeignKey("TaskId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskLabware", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Labware", "Labware")
                        .WithMany("Tasks")
                        .HasForeignKey("LabwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Labwares")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskReagent", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Reagent", "Reagent")
                        .WithMany("Tasks")
                        .HasForeignKey("ReagentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Reagents")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskSample", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Sample", "Sample")
                        .WithMany("Tasks")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Samples")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskUser", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Users")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserDepartmentRole", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Department", "Department")
                        .WithMany("UserRoles")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Role", "Role")
                        .WithMany("UserDepartments")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("DepartmentRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserSkill", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Skill", "Skill")
                        .WithMany("Users")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("Skills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
