// <auto-generated />
using System;
using Megarobo.KunPengLIMS.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Megarobo.KunPengLIMS.Infrastructure.Migrations
{
    [DbContext(typeof(LimsDbContext))]
    partial class LimsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Cell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("AtccId")
                        .HasColumnType("text");

                    b.Property<string>("AtccUrl")
                        .HasColumnType("text");

                    b.Property<int>("BioSafetyLevel")
                        .HasColumnType("integer");

                    b.Property<string>("CellCode")
                        .HasColumnType("text");

                    b.Property<string>("CellLineType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CrisprOrderLevel")
                        .HasColumnType("integer");

                    b.Property<string>("CultivationMethod")
                        .HasColumnType("text");

                    b.Property<string>("Disease")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Race")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<Guid?>("SpeciesId")
                        .HasColumnType("uuid");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("TissueType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Cell");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Manager")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModelNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.DeviceParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceParameters");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.DevicePosition", b =>
                {
                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid");

                    b.HasKey("DeviceId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("DevicePosition");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.DictItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictItems");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Labware", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArticleNumber")
                        .HasColumnType("text");

                    b.Property<int>("AvailableHole")
                        .HasColumnType("integer");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("Specification")
                        .HasColumnType("text");

                    b.Property<string>("Subclass")
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Labwares");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.LabwarePosition", b =>
                {
                    b.Property<Guid>("LabwareId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid");

                    b.HasKey("LabwareId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("LabwarePositions");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.LabwareUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProtocolStepId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolStepId");

                    b.ToTable("LabwareUsage");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Line", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EndNodeID")
                        .HasColumnType("uuid");

                    b.Property<string>("Lable")
                        .HasColumnType("text");

                    b.Property<Guid>("ProcessID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StartNodeID")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EndNodeID");

                    b.HasIndex("ProcessID");

                    b.HasIndex("StartNodeID");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.LogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("OperationName")
                        .HasColumnType("text");

                    b.Property<DateTime>("OperationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OperationType")
                        .HasColumnType("text");

                    b.Property<string>("Operator")
                        .HasColumnType("text");

                    b.Property<string>("RequestParameters")
                        .HasColumnType("text");

                    b.Property<string>("RequestUrl")
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogItems");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CanGenerateResultFile")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanGenerateResultSample")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InteractiveTime")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("NodeTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uuid");

                    b.Property<string>("TimeWaitToRun")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NodeTypeId");

                    b.HasIndex("ProcessId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeDevice", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "DeviceId");

                    b.HasIndex("DeviceId");

                    b.ToTable("NodeDevices");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeLabware", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabwareId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "LabwareId");

                    b.HasIndex("LabwareId");

                    b.ToTable("NodeLabwares");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeProtocolStep", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProtocolStepId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "ProtocolStepId");

                    b.HasIndex("ProtocolStepId");

                    b.ToTable("NodeProtocolSteps");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeReagent", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReagentId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "ReagentId");

                    b.HasIndex("ReagentId");

                    b.ToTable("NodeReagents");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Hole")
                        .HasColumnType("integer");

                    b.Property<int>("Layer")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Room")
                        .HasColumnType("text");

                    b.Property<int>("Tower")
                        .HasColumnType("integer");

                    b.Property<string>("Well")
                        .HasColumnType("text");

                    b.Property<string>("Zone")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PlannedStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectTask", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("ProjectId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectUser", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DeviceParameterId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceParameterId");

                    b.ToTable("ProtocolSteps");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Reagent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArticleNumber")
                        .HasColumnType("text");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Reagents");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ReagentDosage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReagentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReagentId");

                    b.ToTable("ReagentDosages");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ReagentPosition", b =>
                {
                    b.Property<Guid>("ReagentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid");

                    b.HasKey("ReagentId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("ReagentPositions");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ReagentUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("SolutionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SolutionId");

                    b.ToTable("ReagentUsage");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.RoleMenu", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("RoleMenu");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Sample", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CellId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRealSample")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("NextPhotoTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CellId");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SampleDosage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCell")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SampleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SolutionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SampleId");

                    b.HasIndex("SolutionId");

                    b.ToTable("SampleDosages");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SamplePosition", b =>
                {
                    b.Property<Guid>("SampleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uuid");

                    b.HasKey("SampleId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("SamplePosition");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("SkillName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Solution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProtocolStepId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolStepId")
                        .IsUnique();

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SolutionReagentDosage", b =>
                {
                    b.Property<Guid>("SolutionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReagentDosageId")
                        .HasColumnType("uuid");

                    b.HasKey("SolutionId", "ReagentDosageId");

                    b.HasIndex("ReagentDosageId");

                    b.ToTable("SolutionReagentDosages");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SolutionSampleDosage", b =>
                {
                    b.Property<Guid>("SolutionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SampleDosageId")
                        .HasColumnType("uuid");

                    b.HasKey("SolutionId", "SampleDosageId");

                    b.HasIndex("SampleDosageId");

                    b.ToTable("SolutionSampleDosages");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Species", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChineseName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EnglishName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LatinName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Take", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentTaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int>("TakeCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Takes");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TakeTask", b =>
                {
                    b.Property<Guid>("TakeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("TakeId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TakeTasks");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProtocolId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid>("TakeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("NodeId");

                    b.HasIndex("ProtocolId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskLabware", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabwareId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "LabwareId");

                    b.HasIndex("LabwareId");

                    b.ToTable("TaskLabwares");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskReagent", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReagentId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "ReagentId");

                    b.HasIndex("ReagentId");

                    b.ToTable("TaskReagents");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskSample", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SampleId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "SampleId");

                    b.HasIndex("SampleId");

                    b.ToTable("TaskSamples");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskUser", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskUser");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EMail")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("WorkTime")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserDepartmentRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "DepartmentId", "RoleId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserDepartmentRole");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Cell", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Species", "Species")
                        .WithMany("Cells")
                        .HasForeignKey("SpeciesId");

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("CellId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("CellId");

                            b1.ToTable("Cell");

                            b1.WithOwner()
                                .HasForeignKey("CellId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("CellId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("CellId");

                            b1.ToTable("Cell");

                            b1.WithOwner()
                                .HasForeignKey("CellId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Device", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("DeviceId");

                            b1.ToTable("Devices");

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("DeviceId");

                            b1.ToTable("Devices");

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.DeviceParameter", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Device", "Device")
                        .WithMany("DeviceParameters")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.File", "Script", b1 =>
                        {
                            b1.Property<Guid>("DeviceParameterId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("DeviceParameterId");

                            b1.ToTable("DeviceParameters");

                            b1.WithOwner()
                                .HasForeignKey("DeviceParameterId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.DevicePosition", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Device", "Device")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Position", "Position")
                        .WithMany("Devices")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Labware", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("LabwareId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("LabwareId");

                            b1.ToTable("Labwares");

                            b1.WithOwner()
                                .HasForeignKey("LabwareId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("LabwareId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("LabwareId");

                            b1.ToTable("Labwares");

                            b1.WithOwner()
                                .HasForeignKey("LabwareId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.LabwarePosition", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Labware", "Labware")
                        .WithMany("Positions")
                        .HasForeignKey("LabwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Position", "Position")
                        .WithMany("Labwares")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.LabwareUsage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithMany("LabwareUsages")
                        .HasForeignKey("ProtocolStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Line", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "EndNode")
                        .WithMany("EndLines")
                        .HasForeignKey("EndNodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Process", "Process")
                        .WithMany("Lines")
                        .HasForeignKey("ProcessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "StartNode")
                        .WithMany("StartLines")
                        .HasForeignKey("StartNodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Node", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Skill", "NodeType")
                        .WithMany("Nodes")
                        .HasForeignKey("NodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Process", null)
                        .WithMany("Nodes")
                        .HasForeignKey("ProcessId");

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.TimeInterval", "Duration", b1 =>
                        {
                            b1.Property<Guid>("NodeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("NodeId");

                            b1.ToTable("Nodes");

                            b1.WithOwner()
                                .HasForeignKey("NodeId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeDevice", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Device", "Device")
                        .WithMany("Nodes")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeLabware", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Labware", "Labware")
                        .WithMany("Nodes")
                        .HasForeignKey("LabwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeProtocolStep", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany("ProtocolSteps")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithMany("Nodes")
                        .HasForeignKey("ProtocolStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeReagent", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Reagent", "Reagent")
                        .WithMany("Nodes")
                        .HasForeignKey("ReagentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Project", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Process", "Process")
                        .WithMany("Projects")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectTask", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Projects")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectUser", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Project", "Project")
                        .WithMany("Users")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.DeviceParameter", "DeviceParameter")
                        .WithMany("ProtocolSteps")
                        .HasForeignKey("DeviceParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Reagent", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "AvailableCubage", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "AvailableQuality", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ReagentDosage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Reagent", "Reagent")
                        .WithMany("ReagentDosages")
                        .HasForeignKey("ReagentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Cubage", b1 =>
                        {
                            b1.Property<Guid>("ReagentDosageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentDosageId");

                            b1.ToTable("ReagentDosages");

                            b1.WithOwner()
                                .HasForeignKey("ReagentDosageId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("ReagentDosageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentDosageId");

                            b1.ToTable("ReagentDosages");

                            b1.WithOwner()
                                .HasForeignKey("ReagentDosageId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ReagentPosition", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Position", "Position")
                        .WithMany("Reagents")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Reagent", "Reagent")
                        .WithMany("Positions")
                        .HasForeignKey("ReagentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ReagentUsage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Solution", "Solution")
                        .WithMany("ReagentUsages")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Cubage", b1 =>
                        {
                            b1.Property<Guid>("ReagentUsageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentUsageId");

                            b1.ToTable("ReagentUsage");

                            b1.WithOwner()
                                .HasForeignKey("ReagentUsageId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("ReagentUsageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentUsageId");

                            b1.ToTable("ReagentUsage");

                            b1.WithOwner()
                                .HasForeignKey("ReagentUsageId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.RoleMenu", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Menu", "Menu")
                        .WithMany("Roles")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Role", "Role")
                        .WithMany("Menus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Sample", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Cell", "Cell")
                        .WithMany("Samples")
                        .HasForeignKey("CellId");

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Cubage", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SampleDosage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Sample", "Sample")
                        .WithMany("SampleDosages")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Solution", "Solution")
                        .WithMany("SampleDosages")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Cubage", b1 =>
                        {
                            b1.Property<Guid>("SampleDosageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleDosageId");

                            b1.ToTable("SampleDosages");

                            b1.WithOwner()
                                .HasForeignKey("SampleDosageId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("SampleDosageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleDosageId");

                            b1.ToTable("SampleDosages");

                            b1.WithOwner()
                                .HasForeignKey("SampleDosageId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SamplePosition", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Position", "Position")
                        .WithMany("Samples")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Sample", "Sample")
                        .WithMany("Positions")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Solution", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithOne("Solution")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.Solution", "ProtocolStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Total", b1 =>
                        {
                            b1.Property<Guid>("SolutionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SolutionId");

                            b1.ToTable("Solutions");

                            b1.WithOwner()
                                .HasForeignKey("SolutionId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SolutionReagentDosage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ReagentDosage", "ReagentDosage")
                        .WithMany("Solutions")
                        .HasForeignKey("ReagentDosageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Solution", "Solution")
                        .WithMany()
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SolutionSampleDosage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.SampleDosage", "SampleDosage")
                        .WithMany()
                        .HasForeignKey("SampleDosageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Solution", "Solution")
                        .WithMany()
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Species", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "SpeciesId", b1 =>
                        {
                            b1.Property<Guid>("SpeciesId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("SpeciesId");

                            b1.ToTable("Species");

                            b1.WithOwner()
                                .HasForeignKey("SpeciesId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Take", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Project", "Project")
                        .WithMany("Takes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TakeTask", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Take", "Take")
                        .WithMany("Tasks")
                        .HasForeignKey("TakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Takes")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Task", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Device", "Device")
                        .WithMany("Tasks")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany("Tasks")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithMany("Tasks")
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Megarobo.KunPengLIMS.Domain.Entities.File", "ResultAttachments", b1 =>
                        {
                            b1.Property<Guid>("TaskId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("TaskId", "Id");

                            b1.ToTable("Tasks_ResultAttachments");

                            b1.WithOwner()
                                .HasForeignKey("TaskId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskLabware", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Labware", "Labware")
                        .WithMany("Tasks")
                        .HasForeignKey("LabwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Labwares")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskReagent", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Reagent", "Reagent")
                        .WithMany("Tasks")
                        .HasForeignKey("ReagentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Reagents")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskSample", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Sample", "Sample")
                        .WithMany("Tasks")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Samples")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskUser", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Users")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserDepartmentRole", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Department", "Department")
                        .WithMany("UserRoles")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Role", "Role")
                        .WithMany("UserDepartments")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("DepartmentRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserSkill", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Skill", "Skill")
                        .WithMany("Users")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("Skills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
