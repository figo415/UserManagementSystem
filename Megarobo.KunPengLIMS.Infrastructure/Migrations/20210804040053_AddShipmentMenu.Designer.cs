// <auto-generated />
using System;
using Megarobo.KunPengLIMS.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Megarobo.KunPengLIMS.Infrastructure.Migrations
{
    [DbContext(typeof(LimsDbContext))]
    [Migration("20210804040053_AddShipmentMenu")]
    partial class AddShipmentMenu
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Button", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Button");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fe5b706c-cf43-4467-8341-6e20980d2d6e"),
                            Code = "QueryUser",
                            MenuId = new Guid("e2331e8c-f238-40c4-abfa-956e03ed9ba5"),
                            Name = "查询用户"
                        },
                        new
                        {
                            Id = new Guid("a3d61144-4e3e-46f3-a445-f7f9be882844"),
                            Code = "AddUser",
                            MenuId = new Guid("e2331e8c-f238-40c4-abfa-956e03ed9ba5"),
                            Name = "新增用户"
                        },
                        new
                        {
                            Id = new Guid("4ad196d3-5ed8-47af-9ca4-45a731dbc4b2"),
                            Code = "UpdateUser",
                            MenuId = new Guid("e2331e8c-f238-40c4-abfa-956e03ed9ba5"),
                            Name = "修改用户"
                        },
                        new
                        {
                            Id = new Guid("0fc0ecbc-6470-465a-9b01-9db147698428"),
                            Code = "DeleteUser",
                            MenuId = new Guid("e2331e8c-f238-40c4-abfa-956e03ed9ba5"),
                            Name = "删除用户"
                        },
                        new
                        {
                            Id = new Guid("f65bcbd0-8426-4c13-9d20-8f2550d7ea35"),
                            Code = "ResetUser",
                            MenuId = new Guid("e2331e8c-f238-40c4-abfa-956e03ed9ba5"),
                            Name = "重置用户"
                        },
                        new
                        {
                            Id = new Guid("d2ed3697-438a-482a-a9a7-d2d090df27c0"),
                            Code = "QuerySkill",
                            MenuId = new Guid("23a329c1-02dd-47b6-9d67-5d3591f984e8"),
                            Name = "查询技能"
                        },
                        new
                        {
                            Id = new Guid("549db880-e764-4273-b489-e004dde5c19d"),
                            Code = "AddSkill",
                            MenuId = new Guid("23a329c1-02dd-47b6-9d67-5d3591f984e8"),
                            Name = "新增技能"
                        },
                        new
                        {
                            Id = new Guid("2027f88f-3562-4e02-948d-8ebc6b06f77a"),
                            Code = "UpdateSkill",
                            MenuId = new Guid("23a329c1-02dd-47b6-9d67-5d3591f984e8"),
                            Name = "修改技能"
                        },
                        new
                        {
                            Id = new Guid("f1c22dba-0990-4ac2-80a6-dcd50e150bd0"),
                            Code = "DeleteSkill",
                            MenuId = new Guid("23a329c1-02dd-47b6-9d67-5d3591f984e8"),
                            Name = "删除技能"
                        },
                        new
                        {
                            Id = new Guid("f96aa350-94b6-4437-a9f6-f64a13305a85"),
                            Code = "QueryDepartment",
                            MenuId = new Guid("3e0e871a-dd1a-4403-97fe-e006dd424918"),
                            Name = "查询部门"
                        },
                        new
                        {
                            Id = new Guid("5bb11723-1d83-42b1-bf40-5f91e321a387"),
                            Code = "AddDepartment",
                            MenuId = new Guid("3e0e871a-dd1a-4403-97fe-e006dd424918"),
                            Name = "新增部门"
                        },
                        new
                        {
                            Id = new Guid("cd8b207c-4b13-4cc2-9b18-d9bf28a0c362"),
                            Code = "UpdateDepartment",
                            MenuId = new Guid("3e0e871a-dd1a-4403-97fe-e006dd424918"),
                            Name = "修改部门"
                        },
                        new
                        {
                            Id = new Guid("ad833ada-c1fe-4f77-aee7-1bf014487cc5"),
                            Code = "DeleteDepartment",
                            MenuId = new Guid("3e0e871a-dd1a-4403-97fe-e006dd424918"),
                            Name = "删除部门"
                        },
                        new
                        {
                            Id = new Guid("4c4d2f31-aa9b-4321-a1fc-591eab8bfb32"),
                            Code = "QueryRole",
                            MenuId = new Guid("16844e51-6f7e-4502-bc4e-33193aa57c61"),
                            Name = "查询角色"
                        },
                        new
                        {
                            Id = new Guid("7526a5cd-9635-4b4e-8281-15b9b00ebcb7"),
                            Code = "AddRole",
                            MenuId = new Guid("16844e51-6f7e-4502-bc4e-33193aa57c61"),
                            Name = "新增角色"
                        },
                        new
                        {
                            Id = new Guid("45b5c253-94c1-4c5f-b3cb-e283a8711243"),
                            Code = "UpdateRole",
                            MenuId = new Guid("16844e51-6f7e-4502-bc4e-33193aa57c61"),
                            Name = "修改角色"
                        },
                        new
                        {
                            Id = new Guid("50211a2f-9aa9-4431-829b-c0e355c9cd07"),
                            Code = "DeleteRole",
                            MenuId = new Guid("16844e51-6f7e-4502-bc4e-33193aa57c61"),
                            Name = "删除角色"
                        },
                        new
                        {
                            Id = new Guid("b7070bc7-7ac0-4f66-a874-b131486e7893"),
                            Code = "QueryMenu",
                            MenuId = new Guid("810a01d1-a1d5-475a-bc64-7229682722d3"),
                            Name = "查询菜单"
                        },
                        new
                        {
                            Id = new Guid("d74bdbf7-c019-41e2-81c9-9c7f57228234"),
                            Code = "AddMenu",
                            MenuId = new Guid("810a01d1-a1d5-475a-bc64-7229682722d3"),
                            Name = "新增菜单"
                        },
                        new
                        {
                            Id = new Guid("99d0b4bb-12cc-4f97-8d3d-d9a870ebe814"),
                            Code = "UpdateMenu",
                            MenuId = new Guid("810a01d1-a1d5-475a-bc64-7229682722d3"),
                            Name = "修改菜单"
                        },
                        new
                        {
                            Id = new Guid("0bad6c29-27a7-4cab-b154-f1db3732fd40"),
                            Code = "DeleteMenu",
                            MenuId = new Guid("810a01d1-a1d5-475a-bc64-7229682722d3"),
                            Name = "删除菜单"
                        },
                        new
                        {
                            Id = new Guid("ce9ce7b3-c7af-4c51-b1b5-6d2492eac5c6"),
                            Code = "QueryDict",
                            MenuId = new Guid("bf5c77c9-bdea-4aeb-ba3e-f293699a5cdd"),
                            Name = "查询字典项"
                        },
                        new
                        {
                            Id = new Guid("c08e1bb1-cc50-4dc1-b633-76efb7824b21"),
                            Code = "AddDict",
                            MenuId = new Guid("bf5c77c9-bdea-4aeb-ba3e-f293699a5cdd"),
                            Name = "新增字典项"
                        },
                        new
                        {
                            Id = new Guid("55e8ae74-5705-4d5a-b504-2de42c712593"),
                            Code = "UpdateDict",
                            MenuId = new Guid("bf5c77c9-bdea-4aeb-ba3e-f293699a5cdd"),
                            Name = "修改字典项"
                        },
                        new
                        {
                            Id = new Guid("4533bbb4-6b8d-4333-9882-d340910ca371"),
                            Code = "DeleteDict",
                            MenuId = new Guid("bf5c77c9-bdea-4aeb-ba3e-f293699a5cdd"),
                            Name = "删除字典项"
                        },
                        new
                        {
                            Id = new Guid("c690cc78-aa0b-4898-a81b-9b7c9c2e7ac5"),
                            Code = "UpdateDictValue",
                            MenuId = new Guid("bf5c77c9-bdea-4aeb-ba3e-f293699a5cdd"),
                            Name = "修改字典项值"
                        },
                        new
                        {
                            Id = new Guid("d99b42e1-db69-42a4-9e5d-b8b780a9a23a"),
                            Code = "QueryLog",
                            MenuId = new Guid("fd518834-4281-4cab-a7d5-efcfa69b3632"),
                            Name = "查询日志"
                        },
                        new
                        {
                            Id = new Guid("f171f9a2-d4fa-4c4f-99a7-aec74e91e956"),
                            Code = "QuerySpecies",
                            MenuId = new Guid("01f8b333-d9c9-46ff-a8af-1b8ffe38d966"),
                            Name = "查询物种"
                        },
                        new
                        {
                            Id = new Guid("772d87c0-87a8-4a9f-9eed-ac03789badf6"),
                            Code = "AddSpecies",
                            MenuId = new Guid("01f8b333-d9c9-46ff-a8af-1b8ffe38d966"),
                            Name = "新增物种"
                        },
                        new
                        {
                            Id = new Guid("b7919203-5b26-4aad-82cc-dfcba56bcb89"),
                            Code = "UpdateSpecies",
                            MenuId = new Guid("01f8b333-d9c9-46ff-a8af-1b8ffe38d966"),
                            Name = "修改物种"
                        },
                        new
                        {
                            Id = new Guid("b18609d3-cfb3-480f-bb6b-6e68d2858d46"),
                            Code = "DeleteSpecies",
                            MenuId = new Guid("01f8b333-d9c9-46ff-a8af-1b8ffe38d966"),
                            Name = "删除物种"
                        },
                        new
                        {
                            Id = new Guid("d1acf2f5-c2a9-452e-9489-c6bb970a0aea"),
                            Code = "QueryCell",
                            MenuId = new Guid("ef7b2ce5-0a62-4ab8-8085-cfb25e516105"),
                            Name = "查询细胞"
                        },
                        new
                        {
                            Id = new Guid("cc8714d0-2f55-4eb6-9951-34e7a31b2896"),
                            Code = "AddCell",
                            MenuId = new Guid("ef7b2ce5-0a62-4ab8-8085-cfb25e516105"),
                            Name = "新增细胞"
                        },
                        new
                        {
                            Id = new Guid("71ad007d-3fb8-4a1b-bfe2-4e68aa62da6c"),
                            Code = "UpdateCell",
                            MenuId = new Guid("ef7b2ce5-0a62-4ab8-8085-cfb25e516105"),
                            Name = "修改细胞"
                        },
                        new
                        {
                            Id = new Guid("2a141afe-0acf-4437-90c6-bc7bbf96307c"),
                            Code = "DeleteCell",
                            MenuId = new Guid("ef7b2ce5-0a62-4ab8-8085-cfb25e516105"),
                            Name = "删除细胞"
                        },
                        new
                        {
                            Id = new Guid("87c3e722-b69c-4480-b0ec-0b42243fa21a"),
                            Code = "QueryPosition",
                            MenuId = new Guid("2806e5f6-0913-4c86-a6fd-d3712b47b75b"),
                            Name = "查询位置"
                        },
                        new
                        {
                            Id = new Guid("42248e94-7021-4b3e-a959-4b552fe783fa"),
                            Code = "QueryLabware",
                            MenuId = new Guid("8b1a27cc-d6b0-4663-940e-84bd94ec003b"),
                            Name = "查询耗材"
                        },
                        new
                        {
                            Id = new Guid("22f252e5-c3e8-4501-aca4-118b8cfd2600"),
                            Code = "QueryReagent",
                            MenuId = new Guid("c08903f4-e213-4b0b-92cc-94215e3c5231"),
                            Name = "查询试剂"
                        },
                        new
                        {
                            Id = new Guid("8f99a12a-332d-43f2-8d95-d20f80cfb90d"),
                            Code = "QueryDevice",
                            MenuId = new Guid("5368cdcd-ccde-40a1-b8d3-52ec8fab80e2"),
                            Name = "查询设备"
                        },
                        new
                        {
                            Id = new Guid("d1154d60-f1d3-46d1-87b8-14abd32dfd4e"),
                            Code = "AddDevice",
                            MenuId = new Guid("5368cdcd-ccde-40a1-b8d3-52ec8fab80e2"),
                            Name = "新增设备"
                        },
                        new
                        {
                            Id = new Guid("e727894f-d0fe-4a61-9c55-058dbb807485"),
                            Code = "UpdateDevice",
                            MenuId = new Guid("5368cdcd-ccde-40a1-b8d3-52ec8fab80e2"),
                            Name = "修改设备"
                        },
                        new
                        {
                            Id = new Guid("fd0b874f-bd7a-432f-a94d-f7694fb63fdc"),
                            Code = "DeleteDevice",
                            MenuId = new Guid("5368cdcd-ccde-40a1-b8d3-52ec8fab80e2"),
                            Name = "删除设备"
                        },
                        new
                        {
                            Id = new Guid("1651bd6b-1c41-4fa5-8653-ba50fd87a306"),
                            Code = "QuerySample",
                            MenuId = new Guid("354ccee8-859b-44f5-8069-b053190ee170"),
                            Name = "查询样本"
                        },
                        new
                        {
                            Id = new Guid("504048ee-fbde-40df-90cc-7ae074eab642"),
                            Code = "AddSample",
                            MenuId = new Guid("354ccee8-859b-44f5-8069-b053190ee170"),
                            Name = "新增样本"
                        },
                        new
                        {
                            Id = new Guid("dd499b8a-6d66-4d9a-8937-4cb576ddae76"),
                            Code = "UpdateSample",
                            MenuId = new Guid("354ccee8-859b-44f5-8069-b053190ee170"),
                            Name = "修改样本"
                        },
                        new
                        {
                            Id = new Guid("0448d884-5b0c-456b-8feb-0d9fa3990415"),
                            Code = "DeleteSample",
                            MenuId = new Guid("354ccee8-859b-44f5-8069-b053190ee170"),
                            Name = "删除样本"
                        },
                        new
                        {
                            Id = new Guid("40d2ede0-becc-428f-bfd4-fe5bbbbd5749"),
                            Code = "QueryMyTask",
                            MenuId = new Guid("3e6363a3-0e62-4f8c-ab37-b437e4905a3f"),
                            Name = "查询我的任务"
                        },
                        new
                        {
                            Id = new Guid("cdc1ddd8-c48b-4fa5-8900-6b30806a6175"),
                            Code = "AddMyTask",
                            MenuId = new Guid("3e6363a3-0e62-4f8c-ab37-b437e4905a3f"),
                            Name = "新增我的任务"
                        },
                        new
                        {
                            Id = new Guid("cbf711ac-7fcd-4567-b9d9-1002878d35f7"),
                            Code = "UpdateMyTask",
                            MenuId = new Guid("3e6363a3-0e62-4f8c-ab37-b437e4905a3f"),
                            Name = "修改我的任务"
                        },
                        new
                        {
                            Id = new Guid("934c1c56-8ca0-4ee1-abcc-3b6620b0cade"),
                            Code = "DeleteMyTask",
                            MenuId = new Guid("3e6363a3-0e62-4f8c-ab37-b437e4905a3f"),
                            Name = "删除我的任务"
                        },
                        new
                        {
                            Id = new Guid("c3b44418-a8a5-44e0-acc0-139b2ed7a45c"),
                            Code = "QueryTask",
                            MenuId = new Guid("169af775-c9e0-417c-950d-190bc12cc65a"),
                            Name = "查询今日任务"
                        },
                        new
                        {
                            Id = new Guid("8e88541e-a7b8-413d-9763-305a0db06cb1"),
                            Code = "AddTask",
                            MenuId = new Guid("169af775-c9e0-417c-950d-190bc12cc65a"),
                            Name = "新增今日任务"
                        },
                        new
                        {
                            Id = new Guid("3a167599-4fc9-4b5e-a3d2-e819151c5a10"),
                            Code = "UpdateTask",
                            MenuId = new Guid("169af775-c9e0-417c-950d-190bc12cc65a"),
                            Name = "修改今日任务"
                        },
                        new
                        {
                            Id = new Guid("c3dc9cfb-72c1-46bf-a6e1-c1f27472a2cf"),
                            Code = "DeleteTask",
                            MenuId = new Guid("169af775-c9e0-417c-950d-190bc12cc65a"),
                            Name = "删除今日任务"
                        },
                        new
                        {
                            Id = new Guid("ebeffd64-2c62-4fbe-9b07-c8fc9ed82160"),
                            Code = "QueryProtocolStep",
                            MenuId = new Guid("0c487d71-8d6e-4c2f-b209-0b1bc007e61a"),
                            Name = "查询ProtocolStep"
                        },
                        new
                        {
                            Id = new Guid("7d0f42de-cee3-459b-9766-c84c19efefbc"),
                            Code = "AddProtocolStep",
                            MenuId = new Guid("0c487d71-8d6e-4c2f-b209-0b1bc007e61a"),
                            Name = "新增ProtocolStep"
                        },
                        new
                        {
                            Id = new Guid("048c83ab-38a7-4583-a9f6-54b510387921"),
                            Code = "UpdateProtocolStep",
                            MenuId = new Guid("0c487d71-8d6e-4c2f-b209-0b1bc007e61a"),
                            Name = "修改ProtocolStep"
                        },
                        new
                        {
                            Id = new Guid("4a2675e0-78c9-4339-90f8-fd5f6d1a2c0a"),
                            Code = "DeleteProtocolStep",
                            MenuId = new Guid("0c487d71-8d6e-4c2f-b209-0b1bc007e61a"),
                            Name = "删除ProtocolStep"
                        },
                        new
                        {
                            Id = new Guid("e69066d2-051c-465c-9ddc-794cfe62a692"),
                            Code = "QueryNode",
                            MenuId = new Guid("63ec3388-7f67-46f0-9e5b-4cd3b76fb8bb"),
                            Name = "查询节点"
                        },
                        new
                        {
                            Id = new Guid("72d159ef-0b5e-4ed7-b109-f85c816163fd"),
                            Code = "AddNode",
                            MenuId = new Guid("63ec3388-7f67-46f0-9e5b-4cd3b76fb8bb"),
                            Name = "新增节点"
                        },
                        new
                        {
                            Id = new Guid("663ec245-a1fa-488f-9ce6-09f8a2b8c246"),
                            Code = "UpdateNode",
                            MenuId = new Guid("63ec3388-7f67-46f0-9e5b-4cd3b76fb8bb"),
                            Name = "修改节点"
                        },
                        new
                        {
                            Id = new Guid("8bf1c7ca-34d6-4f8d-8d18-7bc204879ed5"),
                            Code = "DeleteNode",
                            MenuId = new Guid("63ec3388-7f67-46f0-9e5b-4cd3b76fb8bb"),
                            Name = "删除节点"
                        },
                        new
                        {
                            Id = new Guid("7d03be34-6fb6-4dea-9085-27ee5f4f1323"),
                            Code = "QueryProject",
                            MenuId = new Guid("7b82ae08-06ee-442b-94ec-7b1d0ec5771d"),
                            Name = "查询项目"
                        },
                        new
                        {
                            Id = new Guid("9bf5c256-b15c-4350-a958-df4c2a3d9f13"),
                            Code = "AddProject",
                            MenuId = new Guid("7b82ae08-06ee-442b-94ec-7b1d0ec5771d"),
                            Name = "新增项目"
                        },
                        new
                        {
                            Id = new Guid("a3895501-2917-47d4-951e-3234134f30ea"),
                            Code = "UpdateProject",
                            MenuId = new Guid("7b82ae08-06ee-442b-94ec-7b1d0ec5771d"),
                            Name = "修改项目"
                        },
                        new
                        {
                            Id = new Guid("d39ffa41-7160-4cce-8a06-ffbf4101821c"),
                            Code = "DeleteProject",
                            MenuId = new Guid("7b82ae08-06ee-442b-94ec-7b1d0ec5771d"),
                            Name = "删除项目"
                        },
                        new
                        {
                            Id = new Guid("d1367b99-84bf-4a19-9e21-ec344dceb17d"),
                            Code = "QueryTake",
                            MenuId = new Guid("81a58059-f201-43cd-9474-d32d0a6154e6"),
                            Name = "查询Take"
                        },
                        new
                        {
                            Id = new Guid("13348422-197b-4ea6-b19c-e21463ea713f"),
                            Code = "AddTake",
                            MenuId = new Guid("81a58059-f201-43cd-9474-d32d0a6154e6"),
                            Name = "新增Take"
                        },
                        new
                        {
                            Id = new Guid("ae756e5a-80f7-4920-b594-edc9db4a2326"),
                            Code = "UpdateTake",
                            MenuId = new Guid("81a58059-f201-43cd-9474-d32d0a6154e6"),
                            Name = "修改Take"
                        },
                        new
                        {
                            Id = new Guid("c1c6209c-4021-4a56-a32e-7d88ea92d336"),
                            Code = "DeleteTake",
                            MenuId = new Guid("81a58059-f201-43cd-9474-d32d0a6154e6"),
                            Name = "删除Take"
                        },
                        new
                        {
                            Id = new Guid("6a9f2a8d-a381-435b-be9c-cf13d0aefb39"),
                            Code = "QuerySchedule",
                            MenuId = new Guid("46f040e7-6e9c-4876-989f-8aca2a43892a"),
                            Name = "查询排程"
                        },
                        new
                        {
                            Id = new Guid("147c1e94-df99-407c-bc5d-32db5ef4d2c2"),
                            Code = "QueryOrder",
                            MenuId = new Guid("5699239b-1dae-4d5f-8b30-67641b1389b1"),
                            Name = "查询订单"
                        },
                        new
                        {
                            Id = new Guid("7f179360-1bdf-4578-9e91-6501030bc380"),
                            Code = "AddOrder",
                            MenuId = new Guid("5699239b-1dae-4d5f-8b30-67641b1389b1"),
                            Name = "新增订单"
                        },
                        new
                        {
                            Id = new Guid("919e89fc-e015-4cab-a931-16fd197a32ae"),
                            Code = "UpdateOrder",
                            MenuId = new Guid("5699239b-1dae-4d5f-8b30-67641b1389b1"),
                            Name = "修改订单"
                        },
                        new
                        {
                            Id = new Guid("e43f67ea-6a39-475d-8e33-2e17bc31a110"),
                            Code = "DeleteOrder",
                            MenuId = new Guid("5699239b-1dae-4d5f-8b30-67641b1389b1"),
                            Name = "删除订单"
                        },
                        new
                        {
                            Id = new Guid("2470d27f-5194-4871-aefc-22ce13c82681"),
                            Code = "QueryCloning",
                            MenuId = new Guid("c6bd3005-6b00-4be9-840d-a3eefb7cd2a1"),
                            Name = "查询分子克隆"
                        },
                        new
                        {
                            Id = new Guid("a66410d3-df7e-46f2-8535-7dab18f1b191"),
                            Code = "AddCloning",
                            MenuId = new Guid("c6bd3005-6b00-4be9-840d-a3eefb7cd2a1"),
                            Name = "新增分子克隆"
                        },
                        new
                        {
                            Id = new Guid("82903849-06bb-4a6e-92c9-d40dbf20625f"),
                            Code = "UpdateCloning",
                            MenuId = new Guid("c6bd3005-6b00-4be9-840d-a3eefb7cd2a1"),
                            Name = "修改分子克隆"
                        },
                        new
                        {
                            Id = new Guid("11299edd-571d-4aee-983c-a45dd27b81e7"),
                            Code = "DeleteCloning",
                            MenuId = new Guid("c6bd3005-6b00-4be9-840d-a3eefb7cd2a1"),
                            Name = "删除分子克隆"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Cell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("AtccId")
                        .HasColumnType("text");

                    b.Property<string>("AtccUrl")
                        .HasColumnType("text");

                    b.Property<int>("BioSafetyLevel")
                        .HasColumnType("integer");

                    b.Property<string>("CellCode")
                        .HasColumnType("text");

                    b.Property<string>("CellLineType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CrisprOrderLevel")
                        .HasColumnType("integer");

                    b.Property<string>("CultivationMethod")
                        .HasColumnType("text");

                    b.Property<string>("Disease")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Race")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<Guid?>("SpeciesId")
                        .HasColumnType("uuid");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("TissueType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Cell");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Manager")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("28189d8c-466f-42b7-aab8-9e2592bd6961"),
                            ContactNumber = "13245679856",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(1495),
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manager = "张三",
                            Name = "深圳镁伽",
                            OrdinalNumber = 1,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModelNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.DeviceParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceParameters");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.DictItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictItems");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Labware", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArticleNumber")
                        .HasColumnType("text");

                    b.Property<int>("AvailableHole")
                        .HasColumnType("integer");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("Specification")
                        .HasColumnType("text");

                    b.Property<string>("Subclass")
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Labwares");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.LabwareUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProtocolStepId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolStepId");

                    b.ToTable("LabwareUsage");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Line", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EndNodeID")
                        .HasColumnType("uuid");

                    b.Property<string>("Lable")
                        .HasColumnType("text");

                    b.Property<Guid>("ProcessID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StartNodeID")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EndNodeID");

                    b.HasIndex("ProcessID");

                    b.HasIndex("StartNodeID");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.LogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("OperationName")
                        .HasColumnType("text");

                    b.Property<DateTime>("OperationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OperationType")
                        .HasColumnType("text");

                    b.Property<string>("Operator")
                        .HasColumnType("text");

                    b.Property<string>("RequestParameters")
                        .HasColumnType("text");

                    b.Property<string>("RequestUrl")
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogItems");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Component")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("Redirect")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("947c1cfb-fc85-4ae6-89a2-fdaac07adb33"),
                            Code = "系统管理",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(5243),
                            Hidden = false,
                            Icon = "el-icon-s-tools",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system",
                            OrdinalNumber = 1,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/system",
                            Redirect = "/system/user",
                            Title = "系统管理",
                            Type = 0,
                            Url = "/system"
                        },
                        new
                        {
                            Id = new Guid("e2331e8c-f238-40c4-abfa-956e03ed9ba5"),
                            Code = "用户管理",
                            Component = "system/user/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(6977),
                            Hidden = false,
                            Icon = "el-icon-user",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_user",
                            OrdinalNumber = 2,
                            ParentId = new Guid("947c1cfb-fc85-4ae6-89a2-fdaac07adb33"),
                            Path = "user",
                            Title = "用户管理",
                            Type = 1,
                            Url = "user"
                        },
                        new
                        {
                            Id = new Guid("23a329c1-02dd-47b6-9d67-5d3591f984e8"),
                            Code = "技能管理",
                            Component = "system/skill/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7753),
                            Hidden = false,
                            Icon = "skill",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_skill",
                            OrdinalNumber = 3,
                            ParentId = new Guid("947c1cfb-fc85-4ae6-89a2-fdaac07adb33"),
                            Path = "skill",
                            Title = "技能管理",
                            Type = 1,
                            Url = "skill"
                        },
                        new
                        {
                            Id = new Guid("3e0e871a-dd1a-4403-97fe-e006dd424918"),
                            Code = "部门管理",
                            Component = "system/department/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7765),
                            Hidden = false,
                            Icon = "peoples",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_department",
                            OrdinalNumber = 4,
                            ParentId = new Guid("947c1cfb-fc85-4ae6-89a2-fdaac07adb33"),
                            Path = "department",
                            Title = "部门管理",
                            Type = 1,
                            Url = "department"
                        },
                        new
                        {
                            Id = new Guid("16844e51-6f7e-4502-bc4e-33193aa57c61"),
                            Code = "角色管理",
                            Component = "system/role/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7775),
                            Hidden = false,
                            Icon = "el-icon-s-opportunity",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_role",
                            OrdinalNumber = 5,
                            ParentId = new Guid("947c1cfb-fc85-4ae6-89a2-fdaac07adb33"),
                            Path = "role",
                            Title = "角色管理",
                            Type = 1,
                            Url = "role"
                        },
                        new
                        {
                            Id = new Guid("810a01d1-a1d5-475a-bc64-7229682722d3"),
                            Code = "菜单管理",
                            Component = "system/menu/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7784),
                            Hidden = false,
                            Icon = "el-icon-menu",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_menu",
                            OrdinalNumber = 6,
                            ParentId = new Guid("947c1cfb-fc85-4ae6-89a2-fdaac07adb33"),
                            Path = "menu",
                            Title = "菜单管理",
                            Type = 1,
                            Url = "menu"
                        },
                        new
                        {
                            Id = new Guid("bf5c77c9-bdea-4aeb-ba3e-f293699a5cdd"),
                            Code = "字典项管理",
                            Component = "system/dictionary/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7791),
                            Hidden = false,
                            Icon = "el-icon-tickets",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_dictionary",
                            OrdinalNumber = 7,
                            ParentId = new Guid("947c1cfb-fc85-4ae6-89a2-fdaac07adb33"),
                            Path = "dictionary",
                            Title = "字典项管理",
                            Type = 1,
                            Url = "dictionary"
                        },
                        new
                        {
                            Id = new Guid("fd518834-4281-4cab-a7d5-efcfa69b3632"),
                            Code = "日志管理",
                            Component = "system/logs/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7801),
                            Hidden = false,
                            Icon = "el-icon-edit-outline",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_log",
                            OrdinalNumber = 8,
                            ParentId = new Guid("947c1cfb-fc85-4ae6-89a2-fdaac07adb33"),
                            Path = "log",
                            Title = "日志管理",
                            Type = 1,
                            Url = "log"
                        },
                        new
                        {
                            Id = new Guid("05ab016f-5856-42f8-8ed4-4730b306941c"),
                            Code = "基础数据配置",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7805),
                            Hidden = false,
                            Icon = "el-icon-files",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic",
                            OrdinalNumber = 9,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/basic",
                            Redirect = "/basic/user",
                            Title = "基础数据配置",
                            Type = 0,
                            Url = "/basic"
                        },
                        new
                        {
                            Id = new Guid("01f8b333-d9c9-46ff-a8af-1b8ffe38d966"),
                            Code = "物种管理",
                            Component = "basic/species/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7815),
                            Hidden = false,
                            Icon = "el-icon-more",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_species",
                            OrdinalNumber = 10,
                            ParentId = new Guid("05ab016f-5856-42f8-8ed4-4730b306941c"),
                            Path = "species",
                            Title = "物种管理",
                            Type = 1,
                            Url = "species"
                        },
                        new
                        {
                            Id = new Guid("ef7b2ce5-0a62-4ab8-8085-cfb25e516105"),
                            Code = "细胞管理",
                            Component = "basic/cells/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7825),
                            Hidden = false,
                            Icon = "cells",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_cells",
                            OrdinalNumber = 11,
                            ParentId = new Guid("05ab016f-5856-42f8-8ed4-4730b306941c"),
                            Path = "cells",
                            Title = "细胞管理",
                            Type = 1,
                            Url = "cells"
                        },
                        new
                        {
                            Id = new Guid("2806e5f6-0913-4c86-a6fd-d3712b47b75b"),
                            Code = "位置管理",
                            Component = "basic/place/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7834),
                            Hidden = false,
                            Icon = "el-icon-location",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_place",
                            OrdinalNumber = 12,
                            ParentId = new Guid("05ab016f-5856-42f8-8ed4-4730b306941c"),
                            Path = "place",
                            Title = "位置管理",
                            Type = 1,
                            Url = "place"
                        },
                        new
                        {
                            Id = new Guid("8b1a27cc-d6b0-4663-940e-84bd94ec003b"),
                            Code = "耗材管理",
                            Component = "basic/material/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7838),
                            Hidden = false,
                            Icon = "el-icon-printer",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_material",
                            OrdinalNumber = 13,
                            ParentId = new Guid("05ab016f-5856-42f8-8ed4-4730b306941c"),
                            Path = "material",
                            Title = "耗材管理",
                            Type = 1,
                            Url = "material"
                        },
                        new
                        {
                            Id = new Guid("c08903f4-e213-4b0b-92cc-94215e3c5231"),
                            Code = "试剂管理",
                            Component = "basic/reagent/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7842),
                            Hidden = false,
                            Icon = "chemistry",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_reagent",
                            OrdinalNumber = 14,
                            ParentId = new Guid("05ab016f-5856-42f8-8ed4-4730b306941c"),
                            Path = "reagent",
                            Title = "试剂管理",
                            Type = 1,
                            Url = "reagent"
                        },
                        new
                        {
                            Id = new Guid("5368cdcd-ccde-40a1-b8d3-52ec8fab80e2"),
                            Code = "设备管理",
                            Component = "basic/equipment/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7846),
                            Hidden = false,
                            Icon = "el-icon-suitcase",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_equipment",
                            OrdinalNumber = 15,
                            ParentId = new Guid("05ab016f-5856-42f8-8ed4-4730b306941c"),
                            Path = "equipment",
                            Title = "设备管理",
                            Type = 1,
                            Url = "equipment"
                        },
                        new
                        {
                            Id = new Guid("354ccee8-859b-44f5-8069-b053190ee170"),
                            Code = "样本管理",
                            Component = "sample/sample/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7855),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "sample_sample",
                            OrdinalNumber = 16,
                            ParentId = new Guid("05ab016f-5856-42f8-8ed4-4730b306941c"),
                            Path = "sample",
                            Title = "样本管理",
                            Type = 1,
                            Url = "sample"
                        },
                        new
                        {
                            Id = new Guid("bef5a4e2-4581-4a44-9163-1390306f1c68"),
                            Code = "任务管理",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7864),
                            Hidden = false,
                            Icon = "el-icon-document-copy",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "task",
                            OrdinalNumber = 17,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/task",
                            Redirect = "/task/today",
                            Title = "任务管理",
                            Type = 0,
                            Url = "/task"
                        },
                        new
                        {
                            Id = new Guid("3e6363a3-0e62-4f8c-ab37-b437e4905a3f"),
                            Code = "我的任务",
                            Component = "task/myTask/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7867),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "task_owner",
                            OrdinalNumber = 18,
                            ParentId = new Guid("bef5a4e2-4581-4a44-9163-1390306f1c68"),
                            Path = "owner",
                            Title = "我的任务",
                            Type = 1,
                            Url = "owner"
                        },
                        new
                        {
                            Id = new Guid("169af775-c9e0-417c-950d-190bc12cc65a"),
                            Code = "今日任务",
                            Component = "task/today/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7921),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "task_today",
                            OrdinalNumber = 19,
                            ParentId = new Guid("bef5a4e2-4581-4a44-9163-1390306f1c68"),
                            Path = "today",
                            Title = "今日任务",
                            Type = 1,
                            Url = "today"
                        },
                        new
                        {
                            Id = new Guid("12c57331-1a3f-4159-8f54-d9abccb4ce5b"),
                            Code = "项目管理",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7931),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "itiems",
                            OrdinalNumber = 20,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/items",
                            Redirect = "/items",
                            Title = "项目管理",
                            Type = 0,
                            Url = "/items"
                        },
                        new
                        {
                            Id = new Guid("0c487d71-8d6e-4c2f-b209-0b1bc007e61a"),
                            Code = "Protocol Step管理",
                            Component = "items/proStep/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7934),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_protocol",
                            OrdinalNumber = 21,
                            ParentId = new Guid("12c57331-1a3f-4159-8f54-d9abccb4ce5b"),
                            Path = "protocol",
                            Title = "Protocol Step管理",
                            Type = 1,
                            Url = "protocol"
                        },
                        new
                        {
                            Id = new Guid("63ec3388-7f67-46f0-9e5b-4cd3b76fb8bb"),
                            Code = "节点管理",
                            Component = "items/node/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7943),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_node",
                            OrdinalNumber = 22,
                            ParentId = new Guid("12c57331-1a3f-4159-8f54-d9abccb4ce5b"),
                            Path = "node",
                            Title = "节点管理",
                            Type = 1,
                            Url = "node"
                        },
                        new
                        {
                            Id = new Guid("7b82ae08-06ee-442b-94ec-7b1d0ec5771d"),
                            Code = "项目管理",
                            Component = "items/project/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7950),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_project",
                            OrdinalNumber = 23,
                            ParentId = new Guid("12c57331-1a3f-4159-8f54-d9abccb4ce5b"),
                            Path = "project",
                            Title = "项目管理",
                            Type = 1,
                            Url = "project"
                        },
                        new
                        {
                            Id = new Guid("81a58059-f201-43cd-9474-d32d0a6154e6"),
                            Code = "Take管理",
                            Component = "items/task/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7959),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_take",
                            OrdinalNumber = 24,
                            ParentId = new Guid("12c57331-1a3f-4159-8f54-d9abccb4ce5b"),
                            Path = "take",
                            Title = "Take管理",
                            Type = 1,
                            Url = "take"
                        },
                        new
                        {
                            Id = new Guid("46f040e7-6e9c-4876-989f-8aca2a43892a"),
                            Code = "排程",
                            Component = "items/aps/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7968),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_aps",
                            OrdinalNumber = 25,
                            ParentId = new Guid("12c57331-1a3f-4159-8f54-d9abccb4ce5b"),
                            Path = "aps",
                            Title = "排程",
                            Type = 1,
                            Url = "aps"
                        },
                        new
                        {
                            Id = new Guid("0b7c2088-f307-4a75-9c0a-8b4968649402"),
                            Code = "生产管理",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7972),
                            Hidden = false,
                            Icon = "el-icon-s-cooperation",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce",
                            OrdinalNumber = 26,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/produce",
                            Redirect = "/produce",
                            Title = "生产管理",
                            Type = 0,
                            Url = "/produce"
                        },
                        new
                        {
                            Id = new Guid("5699239b-1dae-4d5f-8b30-67641b1389b1"),
                            Code = "订单",
                            Component = "produce/order/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7975),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_order",
                            OrdinalNumber = 27,
                            ParentId = new Guid("0b7c2088-f307-4a75-9c0a-8b4968649402"),
                            Path = "order",
                            Title = "订单",
                            Type = 1,
                            Url = "order"
                        },
                        new
                        {
                            Id = new Guid("c6bd3005-6b00-4be9-840d-a3eefb7cd2a1"),
                            Code = "分子克隆",
                            Component = "produce/clone/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7984),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_clone",
                            OrdinalNumber = 28,
                            ParentId = new Guid("0b7c2088-f307-4a75-9c0a-8b4968649402"),
                            Path = "clone",
                            Title = "分子克隆",
                            Type = 1,
                            Url = "clone"
                        },
                        new
                        {
                            Id = new Guid("e5561cfc-191f-4e8f-b639-03549c7e8e69"),
                            Code = "质粒纯化",
                            Component = "produce/plasmid/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7991),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_plasmid",
                            OrdinalNumber = 29,
                            ParentId = new Guid("0b7c2088-f307-4a75-9c0a-8b4968649402"),
                            Path = "plasmid",
                            Title = "质粒纯化",
                            Type = 1,
                            Url = "plasmid"
                        },
                        new
                        {
                            Id = new Guid("57cd18af-26e3-4aa0-91b4-f6127ce80265"),
                            Code = "qPCR检测",
                            Component = "produce/qPCR/indexproduce/qPCR/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7994),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_qPCR",
                            OrdinalNumber = 30,
                            ParentId = new Guid("0b7c2088-f307-4a75-9c0a-8b4968649402"),
                            Path = "qPCR",
                            Title = "qPCR检测",
                            Type = 1,
                            Url = "qPCR"
                        },
                        new
                        {
                            Id = new Guid("938926df-4c75-4a4e-88d0-487e5bf2ff1f"),
                            Code = "SDS-PAGE检测",
                            Component = "produce/SDS/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(7999),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_SDS",
                            OrdinalNumber = 31,
                            ParentId = new Guid("0b7c2088-f307-4a75-9c0a-8b4968649402"),
                            Path = "SDS",
                            Title = "SDS-PAGE检测",
                            Type = 1,
                            Url = "SDS"
                        },
                        new
                        {
                            Id = new Guid("d4c5e07b-a663-4c58-a3a8-1268e416f5c0"),
                            Code = "无菌检测",
                            Component = "produce/asepticCheck/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(8002),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_asepticCheck",
                            OrdinalNumber = 32,
                            ParentId = new Guid("0b7c2088-f307-4a75-9c0a-8b4968649402"),
                            Path = "asepticCheck",
                            Title = "无菌检测",
                            Type = 1,
                            Url = "asepticCheck"
                        },
                        new
                        {
                            Id = new Guid("a44c25a1-b4e0-4925-a929-f7bcda3031f3"),
                            Code = "入库登记",
                            Component = "produce/wareHouse/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(8005),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_wareHouse",
                            OrdinalNumber = 33,
                            ParentId = new Guid("0b7c2088-f307-4a75-9c0a-8b4968649402"),
                            Path = "wareHouse",
                            Title = "入库登记",
                            Type = 1,
                            Url = "wareHouse"
                        },
                        new
                        {
                            Id = new Guid("ac5ecc27-d7ae-44d3-831d-2486c854f740"),
                            Code = "发货记录",
                            Component = "produce/deliverGoods/index",
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(8008),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_deliverGoods",
                            OrdinalNumber = 34,
                            ParentId = new Guid("0b7c2088-f307-4a75-9c0a-8b4968649402"),
                            Path = "deliverGoods",
                            Title = "发货记录",
                            Type = 1,
                            Url = "deliverGoods"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.MolecularCloning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("CarrierStructure")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Enzyme")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Od")
                        .HasColumnType("real");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("MolecularCloning");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CanGenerateResultFile")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanGenerateResultSample")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InteractiveTime")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("NodeTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uuid");

                    b.Property<string>("TimeWaitToRun")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NodeTypeId");

                    b.HasIndex("ProcessId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeDevice", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "DeviceId");

                    b.HasIndex("DeviceId");

                    b.ToTable("NodeDevices");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeLabware", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabwareId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "LabwareId");

                    b.HasIndex("LabwareId");

                    b.ToTable("NodeLabwares");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeProtocolStep", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProtocolStepId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "ProtocolStepId");

                    b.HasIndex("ProtocolStepId");

                    b.ToTable("NodeProtocolSteps");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeReagent", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReagentId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "ReagentId");

                    b.HasIndex("ReagentId");

                    b.ToTable("NodeReagents");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("CarrierStructure")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("DemandTiter")
                        .HasColumnType("real");

                    b.Property<DateTime>("FinisheDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InsertionSequence")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<int>("PackagingTrayNumber")
                        .HasColumnType("integer");

                    b.Property<float>("Plasmid1")
                        .HasColumnType("real");

                    b.Property<float>("Plasmid2")
                        .HasColumnType("real");

                    b.Property<float>("Plasmid3")
                        .HasColumnType("real");

                    b.Property<float>("Plasmid4")
                        .HasColumnType("real");

                    b.Property<int>("PlasmidSize")
                        .HasColumnType("integer");

                    b.Property<int>("PlasmidType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SeroType")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<float>("SubpackageCubage")
                        .HasColumnType("real");

                    b.Property<int>("SubpackageNumber")
                        .HasColumnType("integer");

                    b.Property<float>("TotelDemand")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.PlasmidPurification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("CarrierStructure")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Enzyme")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Od")
                        .HasColumnType("real");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlasmidSize")
                        .HasColumnType("integer");

                    b.Property<int>("PlasmidType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("PlasmidPurification");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PlannedStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectTask", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("ProjectId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectUser", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DeviceParameterId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceParameterId");

                    b.ToTable("ProtocolSteps");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.QpcrDetection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DetectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<float>("Titer")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("QpcrDetection");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Reagent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArticleNumber")
                        .HasColumnType("text");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Reagents");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ReagentUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("SolutionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SolutionId");

                    b.ToTable("ReagentUsage");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 51, DateTimeKind.Local).AddTicks(3263),
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "超级管理员"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.RoleMenu", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ButtonId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "MenuId", "ButtonId");

                    b.HasIndex("ButtonId");

                    b.HasIndex("MenuId");

                    b.ToTable("RoleMenu");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("e2331e8c-f238-40c4-abfa-956e03ed9ba5"),
                            ButtonId = new Guid("fe5b706c-cf43-4467-8341-6e20980d2d6e")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("e2331e8c-f238-40c4-abfa-956e03ed9ba5"),
                            ButtonId = new Guid("a3d61144-4e3e-46f3-a445-f7f9be882844")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("e2331e8c-f238-40c4-abfa-956e03ed9ba5"),
                            ButtonId = new Guid("4ad196d3-5ed8-47af-9ca4-45a731dbc4b2")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("e2331e8c-f238-40c4-abfa-956e03ed9ba5"),
                            ButtonId = new Guid("0fc0ecbc-6470-465a-9b01-9db147698428")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("e2331e8c-f238-40c4-abfa-956e03ed9ba5"),
                            ButtonId = new Guid("f65bcbd0-8426-4c13-9d20-8f2550d7ea35")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("23a329c1-02dd-47b6-9d67-5d3591f984e8"),
                            ButtonId = new Guid("d2ed3697-438a-482a-a9a7-d2d090df27c0")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("23a329c1-02dd-47b6-9d67-5d3591f984e8"),
                            ButtonId = new Guid("549db880-e764-4273-b489-e004dde5c19d")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("23a329c1-02dd-47b6-9d67-5d3591f984e8"),
                            ButtonId = new Guid("2027f88f-3562-4e02-948d-8ebc6b06f77a")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("23a329c1-02dd-47b6-9d67-5d3591f984e8"),
                            ButtonId = new Guid("f1c22dba-0990-4ac2-80a6-dcd50e150bd0")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("3e0e871a-dd1a-4403-97fe-e006dd424918"),
                            ButtonId = new Guid("f96aa350-94b6-4437-a9f6-f64a13305a85")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("3e0e871a-dd1a-4403-97fe-e006dd424918"),
                            ButtonId = new Guid("5bb11723-1d83-42b1-bf40-5f91e321a387")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("3e0e871a-dd1a-4403-97fe-e006dd424918"),
                            ButtonId = new Guid("cd8b207c-4b13-4cc2-9b18-d9bf28a0c362")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("3e0e871a-dd1a-4403-97fe-e006dd424918"),
                            ButtonId = new Guid("ad833ada-c1fe-4f77-aee7-1bf014487cc5")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("16844e51-6f7e-4502-bc4e-33193aa57c61"),
                            ButtonId = new Guid("4c4d2f31-aa9b-4321-a1fc-591eab8bfb32")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("16844e51-6f7e-4502-bc4e-33193aa57c61"),
                            ButtonId = new Guid("7526a5cd-9635-4b4e-8281-15b9b00ebcb7")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("16844e51-6f7e-4502-bc4e-33193aa57c61"),
                            ButtonId = new Guid("45b5c253-94c1-4c5f-b3cb-e283a8711243")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("16844e51-6f7e-4502-bc4e-33193aa57c61"),
                            ButtonId = new Guid("50211a2f-9aa9-4431-829b-c0e355c9cd07")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("810a01d1-a1d5-475a-bc64-7229682722d3"),
                            ButtonId = new Guid("b7070bc7-7ac0-4f66-a874-b131486e7893")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("810a01d1-a1d5-475a-bc64-7229682722d3"),
                            ButtonId = new Guid("d74bdbf7-c019-41e2-81c9-9c7f57228234")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("810a01d1-a1d5-475a-bc64-7229682722d3"),
                            ButtonId = new Guid("99d0b4bb-12cc-4f97-8d3d-d9a870ebe814")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("810a01d1-a1d5-475a-bc64-7229682722d3"),
                            ButtonId = new Guid("0bad6c29-27a7-4cab-b154-f1db3732fd40")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("bf5c77c9-bdea-4aeb-ba3e-f293699a5cdd"),
                            ButtonId = new Guid("ce9ce7b3-c7af-4c51-b1b5-6d2492eac5c6")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("bf5c77c9-bdea-4aeb-ba3e-f293699a5cdd"),
                            ButtonId = new Guid("c08e1bb1-cc50-4dc1-b633-76efb7824b21")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("bf5c77c9-bdea-4aeb-ba3e-f293699a5cdd"),
                            ButtonId = new Guid("55e8ae74-5705-4d5a-b504-2de42c712593")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("bf5c77c9-bdea-4aeb-ba3e-f293699a5cdd"),
                            ButtonId = new Guid("4533bbb4-6b8d-4333-9882-d340910ca371")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("bf5c77c9-bdea-4aeb-ba3e-f293699a5cdd"),
                            ButtonId = new Guid("c690cc78-aa0b-4898-a81b-9b7c9c2e7ac5")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("fd518834-4281-4cab-a7d5-efcfa69b3632"),
                            ButtonId = new Guid("d99b42e1-db69-42a4-9e5d-b8b780a9a23a")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("01f8b333-d9c9-46ff-a8af-1b8ffe38d966"),
                            ButtonId = new Guid("f171f9a2-d4fa-4c4f-99a7-aec74e91e956")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("01f8b333-d9c9-46ff-a8af-1b8ffe38d966"),
                            ButtonId = new Guid("772d87c0-87a8-4a9f-9eed-ac03789badf6")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("01f8b333-d9c9-46ff-a8af-1b8ffe38d966"),
                            ButtonId = new Guid("b7919203-5b26-4aad-82cc-dfcba56bcb89")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("01f8b333-d9c9-46ff-a8af-1b8ffe38d966"),
                            ButtonId = new Guid("b18609d3-cfb3-480f-bb6b-6e68d2858d46")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("ef7b2ce5-0a62-4ab8-8085-cfb25e516105"),
                            ButtonId = new Guid("d1acf2f5-c2a9-452e-9489-c6bb970a0aea")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("ef7b2ce5-0a62-4ab8-8085-cfb25e516105"),
                            ButtonId = new Guid("cc8714d0-2f55-4eb6-9951-34e7a31b2896")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("ef7b2ce5-0a62-4ab8-8085-cfb25e516105"),
                            ButtonId = new Guid("71ad007d-3fb8-4a1b-bfe2-4e68aa62da6c")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("ef7b2ce5-0a62-4ab8-8085-cfb25e516105"),
                            ButtonId = new Guid("2a141afe-0acf-4437-90c6-bc7bbf96307c")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("2806e5f6-0913-4c86-a6fd-d3712b47b75b"),
                            ButtonId = new Guid("87c3e722-b69c-4480-b0ec-0b42243fa21a")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("8b1a27cc-d6b0-4663-940e-84bd94ec003b"),
                            ButtonId = new Guid("42248e94-7021-4b3e-a959-4b552fe783fa")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("c08903f4-e213-4b0b-92cc-94215e3c5231"),
                            ButtonId = new Guid("22f252e5-c3e8-4501-aca4-118b8cfd2600")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("5368cdcd-ccde-40a1-b8d3-52ec8fab80e2"),
                            ButtonId = new Guid("8f99a12a-332d-43f2-8d95-d20f80cfb90d")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("5368cdcd-ccde-40a1-b8d3-52ec8fab80e2"),
                            ButtonId = new Guid("d1154d60-f1d3-46d1-87b8-14abd32dfd4e")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("5368cdcd-ccde-40a1-b8d3-52ec8fab80e2"),
                            ButtonId = new Guid("e727894f-d0fe-4a61-9c55-058dbb807485")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("5368cdcd-ccde-40a1-b8d3-52ec8fab80e2"),
                            ButtonId = new Guid("fd0b874f-bd7a-432f-a94d-f7694fb63fdc")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("354ccee8-859b-44f5-8069-b053190ee170"),
                            ButtonId = new Guid("1651bd6b-1c41-4fa5-8653-ba50fd87a306")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("354ccee8-859b-44f5-8069-b053190ee170"),
                            ButtonId = new Guid("504048ee-fbde-40df-90cc-7ae074eab642")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("354ccee8-859b-44f5-8069-b053190ee170"),
                            ButtonId = new Guid("dd499b8a-6d66-4d9a-8937-4cb576ddae76")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("354ccee8-859b-44f5-8069-b053190ee170"),
                            ButtonId = new Guid("0448d884-5b0c-456b-8feb-0d9fa3990415")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("3e6363a3-0e62-4f8c-ab37-b437e4905a3f"),
                            ButtonId = new Guid("40d2ede0-becc-428f-bfd4-fe5bbbbd5749")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("3e6363a3-0e62-4f8c-ab37-b437e4905a3f"),
                            ButtonId = new Guid("cdc1ddd8-c48b-4fa5-8900-6b30806a6175")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("3e6363a3-0e62-4f8c-ab37-b437e4905a3f"),
                            ButtonId = new Guid("cbf711ac-7fcd-4567-b9d9-1002878d35f7")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("3e6363a3-0e62-4f8c-ab37-b437e4905a3f"),
                            ButtonId = new Guid("934c1c56-8ca0-4ee1-abcc-3b6620b0cade")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("169af775-c9e0-417c-950d-190bc12cc65a"),
                            ButtonId = new Guid("c3b44418-a8a5-44e0-acc0-139b2ed7a45c")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("169af775-c9e0-417c-950d-190bc12cc65a"),
                            ButtonId = new Guid("8e88541e-a7b8-413d-9763-305a0db06cb1")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("169af775-c9e0-417c-950d-190bc12cc65a"),
                            ButtonId = new Guid("3a167599-4fc9-4b5e-a3d2-e819151c5a10")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("169af775-c9e0-417c-950d-190bc12cc65a"),
                            ButtonId = new Guid("c3dc9cfb-72c1-46bf-a6e1-c1f27472a2cf")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("0c487d71-8d6e-4c2f-b209-0b1bc007e61a"),
                            ButtonId = new Guid("ebeffd64-2c62-4fbe-9b07-c8fc9ed82160")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("0c487d71-8d6e-4c2f-b209-0b1bc007e61a"),
                            ButtonId = new Guid("7d0f42de-cee3-459b-9766-c84c19efefbc")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("0c487d71-8d6e-4c2f-b209-0b1bc007e61a"),
                            ButtonId = new Guid("048c83ab-38a7-4583-a9f6-54b510387921")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("0c487d71-8d6e-4c2f-b209-0b1bc007e61a"),
                            ButtonId = new Guid("4a2675e0-78c9-4339-90f8-fd5f6d1a2c0a")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("63ec3388-7f67-46f0-9e5b-4cd3b76fb8bb"),
                            ButtonId = new Guid("e69066d2-051c-465c-9ddc-794cfe62a692")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("63ec3388-7f67-46f0-9e5b-4cd3b76fb8bb"),
                            ButtonId = new Guid("72d159ef-0b5e-4ed7-b109-f85c816163fd")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("63ec3388-7f67-46f0-9e5b-4cd3b76fb8bb"),
                            ButtonId = new Guid("663ec245-a1fa-488f-9ce6-09f8a2b8c246")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("63ec3388-7f67-46f0-9e5b-4cd3b76fb8bb"),
                            ButtonId = new Guid("8bf1c7ca-34d6-4f8d-8d18-7bc204879ed5")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("7b82ae08-06ee-442b-94ec-7b1d0ec5771d"),
                            ButtonId = new Guid("7d03be34-6fb6-4dea-9085-27ee5f4f1323")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("7b82ae08-06ee-442b-94ec-7b1d0ec5771d"),
                            ButtonId = new Guid("9bf5c256-b15c-4350-a958-df4c2a3d9f13")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("7b82ae08-06ee-442b-94ec-7b1d0ec5771d"),
                            ButtonId = new Guid("a3895501-2917-47d4-951e-3234134f30ea")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("7b82ae08-06ee-442b-94ec-7b1d0ec5771d"),
                            ButtonId = new Guid("d39ffa41-7160-4cce-8a06-ffbf4101821c")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("81a58059-f201-43cd-9474-d32d0a6154e6"),
                            ButtonId = new Guid("d1367b99-84bf-4a19-9e21-ec344dceb17d")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("81a58059-f201-43cd-9474-d32d0a6154e6"),
                            ButtonId = new Guid("13348422-197b-4ea6-b19c-e21463ea713f")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("81a58059-f201-43cd-9474-d32d0a6154e6"),
                            ButtonId = new Guid("ae756e5a-80f7-4920-b594-edc9db4a2326")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("81a58059-f201-43cd-9474-d32d0a6154e6"),
                            ButtonId = new Guid("c1c6209c-4021-4a56-a32e-7d88ea92d336")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("46f040e7-6e9c-4876-989f-8aca2a43892a"),
                            ButtonId = new Guid("6a9f2a8d-a381-435b-be9c-cf13d0aefb39")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("5699239b-1dae-4d5f-8b30-67641b1389b1"),
                            ButtonId = new Guid("147c1e94-df99-407c-bc5d-32db5ef4d2c2")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("5699239b-1dae-4d5f-8b30-67641b1389b1"),
                            ButtonId = new Guid("7f179360-1bdf-4578-9e91-6501030bc380")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("5699239b-1dae-4d5f-8b30-67641b1389b1"),
                            ButtonId = new Guid("919e89fc-e015-4cab-a931-16fd197a32ae")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("5699239b-1dae-4d5f-8b30-67641b1389b1"),
                            ButtonId = new Guid("e43f67ea-6a39-475d-8e33-2e17bc31a110")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("c6bd3005-6b00-4be9-840d-a3eefb7cd2a1"),
                            ButtonId = new Guid("2470d27f-5194-4871-aefc-22ce13c82681")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("c6bd3005-6b00-4be9-840d-a3eefb7cd2a1"),
                            ButtonId = new Guid("a66410d3-df7e-46f2-8535-7dab18f1b191")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("c6bd3005-6b00-4be9-840d-a3eefb7cd2a1"),
                            ButtonId = new Guid("82903849-06bb-4a6e-92c9-d40dbf20625f")
                        },
                        new
                        {
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81"),
                            MenuId = new Guid("c6bd3005-6b00-4be9-840d-a3eefb7cd2a1"),
                            ButtonId = new Guid("11299edd-571d-4aee-983c-a45dd27b81e7")
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Sample", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CellId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRealSample")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("NextPhotoTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CellId");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SampleDosage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCell")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SampleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SolutionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SampleId");

                    b.HasIndex("SolutionId");

                    b.ToTable("SampleDosages");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SdsPageDetection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DetectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPurityQualified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<float>("ProteinTiter")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("SdsPageDetection");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("Consignee")
                        .HasColumnType("text");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ShipmentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Shipment");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("SkillName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Solution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProtocolStepId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolStepId")
                        .IsUnique();

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Species", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChineseName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EnglishName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LatinName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SterilityDetection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DetectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsBacterialPollute")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluorescence")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("SterilityDetection");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.StockIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StockInDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("StockIn");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Take", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentTaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int>("TakeCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Takes");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TakeTask", b =>
                {
                    b.Property<Guid>("TakeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("TakeId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TakeTasks");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProtocolId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid>("TakeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("NodeId");

                    b.HasIndex("ProtocolId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskLabware", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabwareId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "LabwareId");

                    b.HasIndex("LabwareId");

                    b.ToTable("TaskLabwares");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskReagent", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReagentId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "ReagentId");

                    b.HasIndex("ReagentId");

                    b.ToTable("TaskReagents");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskSample", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SampleId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "SampleId");

                    b.HasIndex("SampleId");

                    b.ToTable("TaskSamples");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskUser", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskUser");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EMail")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("WorkTime")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9525002b-2459-4dec-bd40-c5ebb2060cf4"),
                            CreatedAt = new DateTime(2021, 8, 4, 12, 0, 53, 48, DateTimeKind.Local).AddTicks(6836),
                            EMail = "234298234@qq.com",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MobileNumber = "13523429876",
                            UserName = "admin@admin.com",
                            WorkTime = "8:00-9:00"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserDepartmentRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "DepartmentId", "RoleId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserDepartmentRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("9525002b-2459-4dec-bd40-c5ebb2060cf4"),
                            DepartmentId = new Guid("28189d8c-466f-42b7-aab8-9e2592bd6961"),
                            RoleId = new Guid("ce4eced7-848d-4959-88ce-3d5b6d10fb81")
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Button", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Menu", "Menu")
                        .WithMany("Buttons")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Cell", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Species", "Species")
                        .WithMany("Cells")
                        .HasForeignKey("SpeciesId");

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("CellId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("CellId");

                            b1.ToTable("Cell");

                            b1.WithOwner()
                                .HasForeignKey("CellId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("CellId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("CellId");

                            b1.ToTable("Cell");

                            b1.WithOwner()
                                .HasForeignKey("CellId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Device", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("DeviceId");

                            b1.ToTable("Devices");

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("DeviceId");

                            b1.ToTable("Devices");

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.DeviceParameter", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Device", "Device")
                        .WithMany("DeviceParameters")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.File", "Script", b1 =>
                        {
                            b1.Property<Guid>("DeviceParameterId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("DeviceParameterId");

                            b1.ToTable("DeviceParameters");

                            b1.WithOwner()
                                .HasForeignKey("DeviceParameterId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Labware", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("LabwareId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("LabwareId");

                            b1.ToTable("Labwares");

                            b1.WithOwner()
                                .HasForeignKey("LabwareId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("LabwareId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("LabwareId");

                            b1.ToTable("Labwares");

                            b1.WithOwner()
                                .HasForeignKey("LabwareId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.LabwareUsage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithMany("LabwareUsages")
                        .HasForeignKey("ProtocolStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Line", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "EndNode")
                        .WithMany("EndLines")
                        .HasForeignKey("EndNodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Process", "Process")
                        .WithMany("Lines")
                        .HasForeignKey("ProcessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "StartNode")
                        .WithMany("StartLines")
                        .HasForeignKey("StartNodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.MolecularCloning", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("MolecularCloning")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.MolecularCloning", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("MolecularCloningId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("MolecularCloningId");

                            b1.ToTable("MolecularCloning");

                            b1.WithOwner()
                                .HasForeignKey("MolecularCloningId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Node", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Skill", "NodeType")
                        .WithMany("Nodes")
                        .HasForeignKey("NodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Process", null)
                        .WithMany("Nodes")
                        .HasForeignKey("ProcessId");

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.TimeInterval", "Duration", b1 =>
                        {
                            b1.Property<Guid>("NodeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("NodeId");

                            b1.ToTable("Nodes");

                            b1.WithOwner()
                                .HasForeignKey("NodeId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeDevice", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Device", "Device")
                        .WithMany("Nodes")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeLabware", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Labware", "Labware")
                        .WithMany("Nodes")
                        .HasForeignKey("LabwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeProtocolStep", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany("ProtocolSteps")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithMany("Nodes")
                        .HasForeignKey("ProtocolStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeReagent", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Reagent", "Reagent")
                        .WithMany("Nodes")
                        .HasForeignKey("ReagentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.PlasmidPurification", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("PlasmidPurification")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.PlasmidPurification", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("PlasmidPurificationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("PlasmidPurificationId");

                            b1.ToTable("PlasmidPurification");

                            b1.WithOwner()
                                .HasForeignKey("PlasmidPurificationId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Project", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Process", "Process")
                        .WithMany("Projects")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectTask", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Projects")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectUser", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Project", "Project")
                        .WithMany("Users")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.DeviceParameter", "DeviceParameter")
                        .WithMany("ProtocolSteps")
                        .HasForeignKey("DeviceParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.QpcrDetection", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("QpcrDetection")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.QpcrDetection", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Reagent", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "AvailableCubage", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "AvailableQuality", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ReagentUsage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Solution", "Solution")
                        .WithMany("ReagentUsages")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Cubage", b1 =>
                        {
                            b1.Property<Guid>("ReagentUsageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentUsageId");

                            b1.ToTable("ReagentUsage");

                            b1.WithOwner()
                                .HasForeignKey("ReagentUsageId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("ReagentUsageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentUsageId");

                            b1.ToTable("ReagentUsage");

                            b1.WithOwner()
                                .HasForeignKey("ReagentUsageId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.RoleMenu", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Button", "Button")
                        .WithMany("RoleMenus")
                        .HasForeignKey("ButtonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Menu", "Menu")
                        .WithMany("Roles")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Role", "Role")
                        .WithMany("Menus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Sample", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Cell", "Cell")
                        .WithMany("Samples")
                        .HasForeignKey("CellId");

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Cubage", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SampleDosage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Sample", "Sample")
                        .WithMany("SampleDosages")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Solution", "Solution")
                        .WithMany("SampleDosages")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Cubage", b1 =>
                        {
                            b1.Property<Guid>("SampleDosageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleDosageId");

                            b1.ToTable("SampleDosages");

                            b1.WithOwner()
                                .HasForeignKey("SampleDosageId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("SampleDosageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleDosageId");

                            b1.ToTable("SampleDosages");

                            b1.WithOwner()
                                .HasForeignKey("SampleDosageId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SdsPageDetection", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("SdsPageDetection")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.SdsPageDetection", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Shipment", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("Shipment")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.Shipment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Address", "DeliveryAddress", b1 =>
                        {
                            b1.Property<Guid>("ShipmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .HasColumnType("text");

                            b1.Property<string>("Detail")
                                .HasColumnType("text");

                            b1.Property<string>("District")
                                .HasColumnType("text");

                            b1.Property<string>("Province")
                                .HasColumnType("text");

                            b1.HasKey("ShipmentId");

                            b1.ToTable("Shipment");

                            b1.WithOwner()
                                .HasForeignKey("ShipmentId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Solution", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithOne("Solution")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.Solution", "ProtocolStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Total", b1 =>
                        {
                            b1.Property<Guid>("SolutionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SolutionId");

                            b1.ToTable("Solutions");

                            b1.WithOwner()
                                .HasForeignKey("SolutionId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Species", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "SpeciesId", b1 =>
                        {
                            b1.Property<Guid>("SpeciesId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("SpeciesId");

                            b1.ToTable("Species");

                            b1.WithOwner()
                                .HasForeignKey("SpeciesId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SterilityDetection", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("SterilityDetection")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.SterilityDetection", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.StockIn", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("StockIn")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.StockIn", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Take", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Project", "Project")
                        .WithMany("Takes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TakeTask", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Take", "Take")
                        .WithMany("Tasks")
                        .HasForeignKey("TakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Takes")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Task", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Device", "Device")
                        .WithMany("Tasks")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany("Tasks")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithMany("Tasks")
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Megarobo.KunPengLIMS.Domain.Entities.File", "ResultAttachments", b1 =>
                        {
                            b1.Property<Guid>("TaskId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("TaskId", "Id");

                            b1.ToTable("Tasks_ResultAttachments");

                            b1.WithOwner()
                                .HasForeignKey("TaskId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskLabware", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Labware", "Labware")
                        .WithMany("Tasks")
                        .HasForeignKey("LabwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Labwares")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskReagent", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Reagent", "Reagent")
                        .WithMany("Tasks")
                        .HasForeignKey("ReagentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Reagents")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskSample", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Sample", "Sample")
                        .WithMany("Tasks")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Samples")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskUser", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Users")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserDepartmentRole", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Department", "Department")
                        .WithMany("UserRoles")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Role", "Role")
                        .WithMany("UserDepartments")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("DepartmentRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserSkill", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Skill", "Skill")
                        .WithMany("Users")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("Skills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
