// <auto-generated />
using System;
using Megarobo.KunPengLIMS.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Megarobo.KunPengLIMS.Infrastructure.Migrations
{
    [DbContext(typeof(LimsDbContext))]
    [Migration("20210804060224_AddDictData")]
    partial class AddDictData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Button", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MenuId");

                    b.ToTable("Button");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1d69715a-8bd6-4ce5-9922-0ae6f8d72aba"),
                            Code = "QueryUser",
                            MenuId = new Guid("9030326b-a5b4-4616-a41b-62624572fdb6"),
                            Name = "查询用户"
                        },
                        new
                        {
                            Id = new Guid("c08f730b-9fac-4881-a1cc-e1425b7035a4"),
                            Code = "AddUser",
                            MenuId = new Guid("9030326b-a5b4-4616-a41b-62624572fdb6"),
                            Name = "新增用户"
                        },
                        new
                        {
                            Id = new Guid("13cf0cf9-a7ec-4750-b24d-2fac424eebcc"),
                            Code = "UpdateUser",
                            MenuId = new Guid("9030326b-a5b4-4616-a41b-62624572fdb6"),
                            Name = "修改用户"
                        },
                        new
                        {
                            Id = new Guid("a549899f-9ea4-47bc-b80c-7d395a8e4d5d"),
                            Code = "DeleteUser",
                            MenuId = new Guid("9030326b-a5b4-4616-a41b-62624572fdb6"),
                            Name = "删除用户"
                        },
                        new
                        {
                            Id = new Guid("daee4f52-497e-457c-9753-bc03c880a31b"),
                            Code = "ResetUser",
                            MenuId = new Guid("9030326b-a5b4-4616-a41b-62624572fdb6"),
                            Name = "重置用户"
                        },
                        new
                        {
                            Id = new Guid("09ef5812-179a-4bb9-ae83-6d62dea75d43"),
                            Code = "QuerySkill",
                            MenuId = new Guid("95fe9deb-b8b1-4edc-a045-fcf450c49069"),
                            Name = "查询技能"
                        },
                        new
                        {
                            Id = new Guid("012cda32-a2fb-43c6-9b76-2ec669f6fd35"),
                            Code = "AddSkill",
                            MenuId = new Guid("95fe9deb-b8b1-4edc-a045-fcf450c49069"),
                            Name = "新增技能"
                        },
                        new
                        {
                            Id = new Guid("57b25249-a86b-4c2d-89d1-1bca14d3481a"),
                            Code = "UpdateSkill",
                            MenuId = new Guid("95fe9deb-b8b1-4edc-a045-fcf450c49069"),
                            Name = "修改技能"
                        },
                        new
                        {
                            Id = new Guid("ae81ea0a-28ac-4b30-bcd3-47548f3a1791"),
                            Code = "DeleteSkill",
                            MenuId = new Guid("95fe9deb-b8b1-4edc-a045-fcf450c49069"),
                            Name = "删除技能"
                        },
                        new
                        {
                            Id = new Guid("3f6b21b8-dfc7-4dc3-b521-11a4e716e025"),
                            Code = "QueryDepartment",
                            MenuId = new Guid("c1884e1a-5cb2-46c0-bb11-efbca217cec8"),
                            Name = "查询部门"
                        },
                        new
                        {
                            Id = new Guid("57ba6a34-b252-4b0d-86d0-126b3ac11a62"),
                            Code = "AddDepartment",
                            MenuId = new Guid("c1884e1a-5cb2-46c0-bb11-efbca217cec8"),
                            Name = "新增部门"
                        },
                        new
                        {
                            Id = new Guid("8eb144f3-aceb-419c-998a-2544f18fe7c9"),
                            Code = "UpdateDepartment",
                            MenuId = new Guid("c1884e1a-5cb2-46c0-bb11-efbca217cec8"),
                            Name = "修改部门"
                        },
                        new
                        {
                            Id = new Guid("552c28a8-d929-4f0c-8f07-0aa5637e5224"),
                            Code = "DeleteDepartment",
                            MenuId = new Guid("c1884e1a-5cb2-46c0-bb11-efbca217cec8"),
                            Name = "删除部门"
                        },
                        new
                        {
                            Id = new Guid("68534b4a-66ec-4ed7-9df4-f34af68b94b5"),
                            Code = "QueryRole",
                            MenuId = new Guid("88c8bf66-8cf7-48d4-910b-316413f39725"),
                            Name = "查询角色"
                        },
                        new
                        {
                            Id = new Guid("54a5e294-cd7e-4148-8013-3613be0821c6"),
                            Code = "AddRole",
                            MenuId = new Guid("88c8bf66-8cf7-48d4-910b-316413f39725"),
                            Name = "新增角色"
                        },
                        new
                        {
                            Id = new Guid("89cd1433-c1c8-42b5-9dcc-bd1b467c1849"),
                            Code = "UpdateRole",
                            MenuId = new Guid("88c8bf66-8cf7-48d4-910b-316413f39725"),
                            Name = "修改角色"
                        },
                        new
                        {
                            Id = new Guid("13ef5794-9e54-4b38-8561-cf118e297f41"),
                            Code = "DeleteRole",
                            MenuId = new Guid("88c8bf66-8cf7-48d4-910b-316413f39725"),
                            Name = "删除角色"
                        },
                        new
                        {
                            Id = new Guid("9a89e85a-66d0-4215-9778-cb13d4178e2d"),
                            Code = "QueryMenu",
                            MenuId = new Guid("8dc13613-f35f-4050-acea-56e3143c2c1e"),
                            Name = "查询菜单"
                        },
                        new
                        {
                            Id = new Guid("ec128b9a-650e-4ad1-9123-cdc0456956b9"),
                            Code = "AddMenu",
                            MenuId = new Guid("8dc13613-f35f-4050-acea-56e3143c2c1e"),
                            Name = "新增菜单"
                        },
                        new
                        {
                            Id = new Guid("70ee8547-7219-4adc-b9ff-5ae20781f7e9"),
                            Code = "UpdateMenu",
                            MenuId = new Guid("8dc13613-f35f-4050-acea-56e3143c2c1e"),
                            Name = "修改菜单"
                        },
                        new
                        {
                            Id = new Guid("84e8059b-1ab5-4a16-a86a-71576931b20c"),
                            Code = "DeleteMenu",
                            MenuId = new Guid("8dc13613-f35f-4050-acea-56e3143c2c1e"),
                            Name = "删除菜单"
                        },
                        new
                        {
                            Id = new Guid("a606cc31-e09b-438f-ab36-6da256be38b8"),
                            Code = "QueryDict",
                            MenuId = new Guid("4d04bdbe-df93-4fec-b41a-484b1d2fc3ed"),
                            Name = "查询字典项"
                        },
                        new
                        {
                            Id = new Guid("a7cb75be-93fd-4233-acda-fcf8f5ebb9db"),
                            Code = "AddDict",
                            MenuId = new Guid("4d04bdbe-df93-4fec-b41a-484b1d2fc3ed"),
                            Name = "新增字典项"
                        },
                        new
                        {
                            Id = new Guid("e9a78fd1-1e37-4ce9-a6c5-2a9390417979"),
                            Code = "UpdateDict",
                            MenuId = new Guid("4d04bdbe-df93-4fec-b41a-484b1d2fc3ed"),
                            Name = "修改字典项"
                        },
                        new
                        {
                            Id = new Guid("dd138026-b77e-4b7a-be6a-2ae9c558e4db"),
                            Code = "DeleteDict",
                            MenuId = new Guid("4d04bdbe-df93-4fec-b41a-484b1d2fc3ed"),
                            Name = "删除字典项"
                        },
                        new
                        {
                            Id = new Guid("cf6210e8-98c9-4c8a-a0f5-9b0394676a8d"),
                            Code = "UpdateDictValue",
                            MenuId = new Guid("4d04bdbe-df93-4fec-b41a-484b1d2fc3ed"),
                            Name = "修改字典项值"
                        },
                        new
                        {
                            Id = new Guid("e9104308-1843-4750-a147-29df6195f1df"),
                            Code = "QueryLog",
                            MenuId = new Guid("e9138d88-16b6-4328-8000-cd199250c52e"),
                            Name = "查询日志"
                        },
                        new
                        {
                            Id = new Guid("5de2cbc6-89c8-43b4-aa74-a9d0b4a5bf3d"),
                            Code = "QuerySpecies",
                            MenuId = new Guid("a1fc86d7-8d7d-40ba-98a1-a066fd3b4746"),
                            Name = "查询物种"
                        },
                        new
                        {
                            Id = new Guid("edda64b2-08df-49ca-9a29-fe569ed8c662"),
                            Code = "AddSpecies",
                            MenuId = new Guid("a1fc86d7-8d7d-40ba-98a1-a066fd3b4746"),
                            Name = "新增物种"
                        },
                        new
                        {
                            Id = new Guid("d3271dca-fe4c-4b84-b36f-c76347503f3f"),
                            Code = "UpdateSpecies",
                            MenuId = new Guid("a1fc86d7-8d7d-40ba-98a1-a066fd3b4746"),
                            Name = "修改物种"
                        },
                        new
                        {
                            Id = new Guid("aa0ffbe2-72eb-41e9-8f3c-6847967d84ba"),
                            Code = "DeleteSpecies",
                            MenuId = new Guid("a1fc86d7-8d7d-40ba-98a1-a066fd3b4746"),
                            Name = "删除物种"
                        },
                        new
                        {
                            Id = new Guid("6311122a-0edd-428e-b5fa-2b7f3be06d7d"),
                            Code = "QueryCell",
                            MenuId = new Guid("d2ff92e9-35c6-4df9-b3a8-f33d50315367"),
                            Name = "查询细胞"
                        },
                        new
                        {
                            Id = new Guid("2e680f09-9e6a-407d-b4a1-c988005f72c7"),
                            Code = "AddCell",
                            MenuId = new Guid("d2ff92e9-35c6-4df9-b3a8-f33d50315367"),
                            Name = "新增细胞"
                        },
                        new
                        {
                            Id = new Guid("5927c638-909c-4411-8bac-0feaf977ae13"),
                            Code = "UpdateCell",
                            MenuId = new Guid("d2ff92e9-35c6-4df9-b3a8-f33d50315367"),
                            Name = "修改细胞"
                        },
                        new
                        {
                            Id = new Guid("fc80caf3-9fcf-4d34-ad8a-f5faa2080828"),
                            Code = "DeleteCell",
                            MenuId = new Guid("d2ff92e9-35c6-4df9-b3a8-f33d50315367"),
                            Name = "删除细胞"
                        },
                        new
                        {
                            Id = new Guid("8ca3359e-526c-42a4-9af1-edc3a8ce46a3"),
                            Code = "QueryPosition",
                            MenuId = new Guid("142c6afc-6c03-493d-bd81-12c573fcdb85"),
                            Name = "查询位置"
                        },
                        new
                        {
                            Id = new Guid("056b4897-9453-4029-86f5-3cd533dbd33b"),
                            Code = "QueryLabware",
                            MenuId = new Guid("d9ae9fb8-127e-444d-9cbe-e7e4a71d46c6"),
                            Name = "查询耗材"
                        },
                        new
                        {
                            Id = new Guid("1390f9f1-d68e-47f3-a1ce-cf33311b9d7b"),
                            Code = "QueryReagent",
                            MenuId = new Guid("648d6d97-bde2-4e9f-92d1-16deae5cbe06"),
                            Name = "查询试剂"
                        },
                        new
                        {
                            Id = new Guid("2a42c765-cedb-4b0f-9c83-dc0bac9a3b58"),
                            Code = "QueryDevice",
                            MenuId = new Guid("f0cf415b-d352-413d-9df8-c5d9a25291c4"),
                            Name = "查询设备"
                        },
                        new
                        {
                            Id = new Guid("71dbfe2c-c6cf-4bd1-b38f-96f91408a5a6"),
                            Code = "AddDevice",
                            MenuId = new Guid("f0cf415b-d352-413d-9df8-c5d9a25291c4"),
                            Name = "新增设备"
                        },
                        new
                        {
                            Id = new Guid("15d664ec-bd9d-4923-a8c5-df07aee6ed86"),
                            Code = "UpdateDevice",
                            MenuId = new Guid("f0cf415b-d352-413d-9df8-c5d9a25291c4"),
                            Name = "修改设备"
                        },
                        new
                        {
                            Id = new Guid("c5ee4c47-f840-4ee0-99f9-6b8e7b7616fd"),
                            Code = "DeleteDevice",
                            MenuId = new Guid("f0cf415b-d352-413d-9df8-c5d9a25291c4"),
                            Name = "删除设备"
                        },
                        new
                        {
                            Id = new Guid("71e3d88a-3d34-4eb8-b785-8dc84a986d32"),
                            Code = "QuerySample",
                            MenuId = new Guid("32e10c4c-fc5c-47a8-8ad8-33d69855d656"),
                            Name = "查询样本"
                        },
                        new
                        {
                            Id = new Guid("31c80f0d-6315-4794-b5e6-cdea6ef3b807"),
                            Code = "AddSample",
                            MenuId = new Guid("32e10c4c-fc5c-47a8-8ad8-33d69855d656"),
                            Name = "新增样本"
                        },
                        new
                        {
                            Id = new Guid("1aad03c0-cbf4-4039-bba4-df3339c65989"),
                            Code = "UpdateSample",
                            MenuId = new Guid("32e10c4c-fc5c-47a8-8ad8-33d69855d656"),
                            Name = "修改样本"
                        },
                        new
                        {
                            Id = new Guid("a94099cc-00ae-4ffb-b436-7a976ba31ce6"),
                            Code = "DeleteSample",
                            MenuId = new Guid("32e10c4c-fc5c-47a8-8ad8-33d69855d656"),
                            Name = "删除样本"
                        },
                        new
                        {
                            Id = new Guid("f00a4640-dc72-436b-81e4-5ae24b1a8165"),
                            Code = "QueryMyTask",
                            MenuId = new Guid("2e0574c5-cac2-4f0e-a3a9-c63a1cb6f789"),
                            Name = "查询我的任务"
                        },
                        new
                        {
                            Id = new Guid("1069195a-0207-4bba-813c-e67af4b7077e"),
                            Code = "AddMyTask",
                            MenuId = new Guid("2e0574c5-cac2-4f0e-a3a9-c63a1cb6f789"),
                            Name = "新增我的任务"
                        },
                        new
                        {
                            Id = new Guid("4d7333bc-191f-44f1-9db8-a8f60f7d724c"),
                            Code = "UpdateMyTask",
                            MenuId = new Guid("2e0574c5-cac2-4f0e-a3a9-c63a1cb6f789"),
                            Name = "修改我的任务"
                        },
                        new
                        {
                            Id = new Guid("4837cff0-0a49-4d3a-932f-a2971fa4e9e1"),
                            Code = "DeleteMyTask",
                            MenuId = new Guid("2e0574c5-cac2-4f0e-a3a9-c63a1cb6f789"),
                            Name = "删除我的任务"
                        },
                        new
                        {
                            Id = new Guid("751e709a-6320-493e-8ae8-6373155aeb1b"),
                            Code = "QueryTask",
                            MenuId = new Guid("be04a468-225f-45a0-b417-13f3da3618d6"),
                            Name = "查询今日任务"
                        },
                        new
                        {
                            Id = new Guid("a5e3dda1-6c94-4124-8c33-a84c17078465"),
                            Code = "AddTask",
                            MenuId = new Guid("be04a468-225f-45a0-b417-13f3da3618d6"),
                            Name = "新增今日任务"
                        },
                        new
                        {
                            Id = new Guid("50e243d1-2b09-4d6d-87a3-2c71e5c5d180"),
                            Code = "UpdateTask",
                            MenuId = new Guid("be04a468-225f-45a0-b417-13f3da3618d6"),
                            Name = "修改今日任务"
                        },
                        new
                        {
                            Id = new Guid("2ae7e99c-a6d5-44d4-a8f3-507d4cfa4c1d"),
                            Code = "DeleteTask",
                            MenuId = new Guid("be04a468-225f-45a0-b417-13f3da3618d6"),
                            Name = "删除今日任务"
                        },
                        new
                        {
                            Id = new Guid("58885f2a-cc81-42e3-8d33-5495a9f62e2a"),
                            Code = "QueryProtocolStep",
                            MenuId = new Guid("10e18a05-6a25-4f54-b5ff-7f39bbfe0664"),
                            Name = "查询ProtocolStep"
                        },
                        new
                        {
                            Id = new Guid("fbb83a98-faeb-4198-9b70-ad7a13595a77"),
                            Code = "AddProtocolStep",
                            MenuId = new Guid("10e18a05-6a25-4f54-b5ff-7f39bbfe0664"),
                            Name = "新增ProtocolStep"
                        },
                        new
                        {
                            Id = new Guid("1028415e-4daf-438f-bbf6-2c4b63119424"),
                            Code = "UpdateProtocolStep",
                            MenuId = new Guid("10e18a05-6a25-4f54-b5ff-7f39bbfe0664"),
                            Name = "修改ProtocolStep"
                        },
                        new
                        {
                            Id = new Guid("6c4923e0-b13d-4604-b32d-a03235e24c53"),
                            Code = "DeleteProtocolStep",
                            MenuId = new Guid("10e18a05-6a25-4f54-b5ff-7f39bbfe0664"),
                            Name = "删除ProtocolStep"
                        },
                        new
                        {
                            Id = new Guid("718a2127-2b7f-4dff-bfbd-bd523b87b065"),
                            Code = "QueryNode",
                            MenuId = new Guid("8d92b9d4-b622-4afd-81b4-adaf4458864e"),
                            Name = "查询节点"
                        },
                        new
                        {
                            Id = new Guid("0ba90fe1-ff93-45ff-b5dd-34bb191913a1"),
                            Code = "AddNode",
                            MenuId = new Guid("8d92b9d4-b622-4afd-81b4-adaf4458864e"),
                            Name = "新增节点"
                        },
                        new
                        {
                            Id = new Guid("4e95416d-fc6a-4990-87a8-9f6bf97d0110"),
                            Code = "UpdateNode",
                            MenuId = new Guid("8d92b9d4-b622-4afd-81b4-adaf4458864e"),
                            Name = "修改节点"
                        },
                        new
                        {
                            Id = new Guid("9dd59eba-7a0f-4f34-938b-1ef9e0f108a7"),
                            Code = "DeleteNode",
                            MenuId = new Guid("8d92b9d4-b622-4afd-81b4-adaf4458864e"),
                            Name = "删除节点"
                        },
                        new
                        {
                            Id = new Guid("a248465e-0469-4d43-9d85-dab7e4c2ee35"),
                            Code = "QueryProject",
                            MenuId = new Guid("1a2722f4-661d-4946-9819-109f9a910dcf"),
                            Name = "查询项目"
                        },
                        new
                        {
                            Id = new Guid("f1a7d4cf-039b-423f-8f15-eb024016c271"),
                            Code = "AddProject",
                            MenuId = new Guid("1a2722f4-661d-4946-9819-109f9a910dcf"),
                            Name = "新增项目"
                        },
                        new
                        {
                            Id = new Guid("a4ef5f38-c096-4a41-8ce6-2659b95f2222"),
                            Code = "UpdateProject",
                            MenuId = new Guid("1a2722f4-661d-4946-9819-109f9a910dcf"),
                            Name = "修改项目"
                        },
                        new
                        {
                            Id = new Guid("441d1453-662c-4227-810b-345ada55a063"),
                            Code = "DeleteProject",
                            MenuId = new Guid("1a2722f4-661d-4946-9819-109f9a910dcf"),
                            Name = "删除项目"
                        },
                        new
                        {
                            Id = new Guid("683055b8-6d45-4d3d-b0cc-f1f001e02f21"),
                            Code = "QueryTake",
                            MenuId = new Guid("b7d6ab23-0595-4c2f-8c72-9ee2b0ab66ae"),
                            Name = "查询Take"
                        },
                        new
                        {
                            Id = new Guid("68624aca-6794-47af-9b2c-e5163c723ec0"),
                            Code = "AddTake",
                            MenuId = new Guid("b7d6ab23-0595-4c2f-8c72-9ee2b0ab66ae"),
                            Name = "新增Take"
                        },
                        new
                        {
                            Id = new Guid("f87689fa-6ff5-45ae-b53e-e9fb6cb6b7df"),
                            Code = "UpdateTake",
                            MenuId = new Guid("b7d6ab23-0595-4c2f-8c72-9ee2b0ab66ae"),
                            Name = "修改Take"
                        },
                        new
                        {
                            Id = new Guid("9be7938d-3053-43d8-85fd-f6f6769d016d"),
                            Code = "DeleteTake",
                            MenuId = new Guid("b7d6ab23-0595-4c2f-8c72-9ee2b0ab66ae"),
                            Name = "删除Take"
                        },
                        new
                        {
                            Id = new Guid("c1ec031a-5b4f-4881-9076-25a5ebdc401f"),
                            Code = "QuerySchedule",
                            MenuId = new Guid("b407ee58-dd9e-46b3-ab02-489f3ca8a240"),
                            Name = "查询排程"
                        },
                        new
                        {
                            Id = new Guid("c9bfee7a-c77f-4cea-87c2-63514ebb3219"),
                            Code = "QueryOrder",
                            MenuId = new Guid("7b469257-3a7d-49cf-a4b0-a3edc8fac2a0"),
                            Name = "查询订单"
                        },
                        new
                        {
                            Id = new Guid("48bbc7e8-2bd3-42b8-901f-77a4529f6db0"),
                            Code = "AddOrder",
                            MenuId = new Guid("7b469257-3a7d-49cf-a4b0-a3edc8fac2a0"),
                            Name = "新增订单"
                        },
                        new
                        {
                            Id = new Guid("91f6e8f6-f550-410f-8fec-633d7689f24a"),
                            Code = "UpdateOrder",
                            MenuId = new Guid("7b469257-3a7d-49cf-a4b0-a3edc8fac2a0"),
                            Name = "修改订单"
                        },
                        new
                        {
                            Id = new Guid("6a7d097f-9945-418d-82d7-f40544fdce37"),
                            Code = "CloneMolecule",
                            MenuId = new Guid("7b469257-3a7d-49cf-a4b0-a3edc8fac2a0"),
                            Name = "分子克隆"
                        },
                        new
                        {
                            Id = new Guid("def600da-e197-4dcf-b83b-4f9a291a5b20"),
                            Code = "PurifyPlasmid",
                            MenuId = new Guid("7b469257-3a7d-49cf-a4b0-a3edc8fac2a0"),
                            Name = "质粒纯化"
                        },
                        new
                        {
                            Id = new Guid("046641cc-41ac-4937-b621-f769dbc425d8"),
                            Code = "StartProduce",
                            MenuId = new Guid("7b469257-3a7d-49cf-a4b0-a3edc8fac2a0"),
                            Name = "进入生产"
                        },
                        new
                        {
                            Id = new Guid("347b9448-aa51-41c0-9e4f-a9f9ff7a829c"),
                            Code = "Warehousing",
                            MenuId = new Guid("7b469257-3a7d-49cf-a4b0-a3edc8fac2a0"),
                            Name = "QC&入库"
                        },
                        new
                        {
                            Id = new Guid("bd32aeb7-168c-4a67-90ac-1ee5280d289a"),
                            Code = "FinishOrder",
                            MenuId = new Guid("7b469257-3a7d-49cf-a4b0-a3edc8fac2a0"),
                            Name = "完成"
                        },
                        new
                        {
                            Id = new Guid("de2bea7f-c84c-4b71-9d27-83fb608138fc"),
                            Code = "QueryCloning",
                            MenuId = new Guid("8a3f1440-446f-4210-b924-411a1e391fe9"),
                            Name = "查询分子克隆"
                        },
                        new
                        {
                            Id = new Guid("09902b31-1c05-4094-a7e1-3af8b88a5565"),
                            Code = "FinishCloning",
                            MenuId = new Guid("8a3f1440-446f-4210-b924-411a1e391fe9"),
                            Name = "完成分子克隆"
                        },
                        new
                        {
                            Id = new Guid("5183be46-2d4e-4418-affe-d7bfd02b603b"),
                            Code = "QueryPurifying",
                            MenuId = new Guid("19e0f45f-e3b0-4faa-a920-29b15617474a"),
                            Name = "查询质粒纯化"
                        },
                        new
                        {
                            Id = new Guid("8d5fe15e-6304-40c3-9efd-e7f3cd77912c"),
                            Code = "FinishPurifying",
                            MenuId = new Guid("19e0f45f-e3b0-4faa-a920-29b15617474a"),
                            Name = "完成质粒纯化"
                        },
                        new
                        {
                            Id = new Guid("364ec6c5-4962-4610-b907-6c189c91b1db"),
                            Code = "QueryQpcr",
                            MenuId = new Guid("8a3f1440-446f-4210-b924-411a1e391fe9"),
                            Name = "查询qPCR检测"
                        },
                        new
                        {
                            Id = new Guid("c155eb39-5b7b-4787-b8e3-dfd27b3e2d5b"),
                            Code = "FinishQpcr",
                            MenuId = new Guid("8a3f1440-446f-4210-b924-411a1e391fe9"),
                            Name = "完成qPCR检测"
                        },
                        new
                        {
                            Id = new Guid("ffda1e5b-1ab8-42a5-86e8-56dfd94153c4"),
                            Code = "QuerySdspage",
                            MenuId = new Guid("23f2cc65-939f-4ddd-8535-32eda765fc5a"),
                            Name = "查询SDS-PAGE检测"
                        },
                        new
                        {
                            Id = new Guid("075b2343-2578-4227-ae94-f60a5dacbeb6"),
                            Code = "FinishSdspage",
                            MenuId = new Guid("23f2cc65-939f-4ddd-8535-32eda765fc5a"),
                            Name = "完成SDS-PAGE检测"
                        },
                        new
                        {
                            Id = new Guid("7a6b5d07-e2c7-4b72-979e-de0464a6f3e9"),
                            Code = "QuerySterility",
                            MenuId = new Guid("bbdf1ef5-7f83-4be2-bb57-73f61ee99fbb"),
                            Name = "查询无菌检测"
                        },
                        new
                        {
                            Id = new Guid("28c73fcb-3334-417c-a2b8-7acf9fa53d11"),
                            Code = "FinishSterility",
                            MenuId = new Guid("bbdf1ef5-7f83-4be2-bb57-73f61ee99fbb"),
                            Name = "完成无菌检测"
                        },
                        new
                        {
                            Id = new Guid("b3171048-ab03-4ee7-a1f9-55b823909ca4"),
                            Code = "QueryWarehousing",
                            MenuId = new Guid("c6a3b1ff-9a7b-4432-a46c-8b7ba677daba"),
                            Name = "查询入库记录"
                        },
                        new
                        {
                            Id = new Guid("89c69f20-bda0-479d-b194-4727a9c389ff"),
                            Code = "FinishWarehousing",
                            MenuId = new Guid("c6a3b1ff-9a7b-4432-a46c-8b7ba677daba"),
                            Name = "完成入库记录"
                        },
                        new
                        {
                            Id = new Guid("d4a8ce4c-d623-47cb-9772-772c59a44968"),
                            Code = "QueryShipment",
                            MenuId = new Guid("265c5849-a45e-4ad1-90ff-20a03f380163"),
                            Name = "查询发货记录"
                        },
                        new
                        {
                            Id = new Guid("9cb4f820-f76e-442e-920d-7a7805cc46b2"),
                            Code = "FinishShipment",
                            MenuId = new Guid("265c5849-a45e-4ad1-90ff-20a03f380163"),
                            Name = "完成发货记录"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Cell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("AtccId")
                        .HasColumnType("text");

                    b.Property<string>("AtccUrl")
                        .HasColumnType("text");

                    b.Property<int>("BioSafetyLevel")
                        .HasColumnType("integer");

                    b.Property<string>("CellCode")
                        .HasColumnType("text");

                    b.Property<string>("CellLineType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CrisprOrderLevel")
                        .HasColumnType("integer");

                    b.Property<string>("CultivationMethod")
                        .HasColumnType("text");

                    b.Property<string>("Disease")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Race")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<Guid?>("SpeciesId")
                        .HasColumnType("uuid");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("TissueType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId");

                    b.ToTable("Cell");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Manager")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7f0d9e25-b4b3-4607-a568-fd503eaf5da7"),
                            ContactNumber = "13245679856",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(1822),
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Manager = "张三",
                            Name = "深圳镁伽",
                            OrdinalNumber = 1,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ModelNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.DeviceParameter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("DeviceParameters");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.DictItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyName")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DictItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2ac5b99-e9d3-482c-9df0-69f0c07d5538"),
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 302, DateTimeKind.Local).AddTicks(74),
                            IsDeleted = false,
                            KeyName = "组织类型",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "cervix,lung,ELSE"
                        },
                        new
                        {
                            Id = new Guid("09b0711a-6966-4440-8c22-8b03cb9199fe"),
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 302, DateTimeKind.Local).AddTicks(516),
                            IsDeleted = false,
                            KeyName = "细胞系种类",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "epithelial,ELSE"
                        },
                        new
                        {
                            Id = new Guid("df598876-a501-468e-a2d2-3ab605b044be"),
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 302, DateTimeKind.Local).AddTicks(535),
                            IsDeleted = false,
                            KeyName = "培养方式",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "Adherent,Suspension,ELSE"
                        },
                        new
                        {
                            Id = new Guid("89d1aacb-3209-448c-8fa5-1117e792a273"),
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 302, DateTimeKind.Local).AddTicks(538),
                            IsDeleted = false,
                            KeyName = "疾病",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "Carcinoma,Adenocarcinoma,ELSE"
                        },
                        new
                        {
                            Id = new Guid("161cb133-76ec-47aa-8e11-9106ad3db918"),
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 302, DateTimeKind.Local).AddTicks(545),
                            IsDeleted = false,
                            KeyName = "性别",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "Female,Male,ELSE"
                        },
                        new
                        {
                            Id = new Guid("f8d1359f-3029-47af-9af4-dd9cd334036b"),
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 302, DateTimeKind.Local).AddTicks(547),
                            IsDeleted = false,
                            KeyName = "种族",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "Black,Caucasian,Asian,ELSE"
                        },
                        new
                        {
                            Id = new Guid("b91d7ee0-7519-4931-94ff-7c2a7ebfa5cf"),
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 302, DateTimeKind.Local).AddTicks(549),
                            IsDeleted = false,
                            KeyName = "体积",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "μL,mL",
                            Value = "Carcinoma,Adenocarcinoma,ELSE"
                        },
                        new
                        {
                            Id = new Guid("2ba03fd0-8d4f-45eb-9f3c-7e60e037a8cd"),
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 302, DateTimeKind.Local).AddTicks(552),
                            IsDeleted = false,
                            KeyName = "浓度",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "%,mg/ml"
                        },
                        new
                        {
                            Id = new Guid("dd5ce7ac-86dd-484b-a158-aac8e0f05713"),
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 302, DateTimeKind.Local).AddTicks(554),
                            IsDeleted = false,
                            KeyName = "供应商",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "ThermoFisher,全式金,诺维赞,碧云天,Gibco,Merck,invitrogen"
                        },
                        new
                        {
                            Id = new Guid("73189c40-606d-46ed-9d8e-426e9b5e08ad"),
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 302, DateTimeKind.Local).AddTicks(556),
                            IsDeleted = false,
                            KeyName = "质量",
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "string",
                            Value = "ng,μg,mg,g,kg"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Labware", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArticleNumber")
                        .HasColumnType("text");

                    b.Property<int>("AvailableHole")
                        .HasColumnType("integer");

                    b.Property<int>("AvailableQuantity")
                        .HasColumnType("integer");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("Specification")
                        .HasColumnType("text");

                    b.Property<string>("Subclass")
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Labwares");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.LabwareUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProtocolStepId")
                        .HasColumnType("uuid");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolStepId");

                    b.ToTable("LabwareUsage");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Line", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EndNodeID")
                        .HasColumnType("uuid");

                    b.Property<string>("Lable")
                        .HasColumnType("text");

                    b.Property<Guid>("ProcessID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StartNodeID")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EndNodeID");

                    b.HasIndex("ProcessID");

                    b.HasIndex("StartNodeID");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.LogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<bool>("IsSuccess")
                        .HasColumnType("boolean");

                    b.Property<string>("ModuleName")
                        .HasColumnType("text");

                    b.Property<string>("OperationName")
                        .HasColumnType("text");

                    b.Property<DateTime>("OperationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OperationType")
                        .HasColumnType("text");

                    b.Property<string>("Operator")
                        .HasColumnType("text");

                    b.Property<string>("RequestParameters")
                        .HasColumnType("text");

                    b.Property<string>("RequestUrl")
                        .HasColumnType("text");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("LogItems");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Component")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("Redirect")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01391115-b139-4712-b555-8b241ab356f5"),
                            Code = "系统管理",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(5247),
                            Hidden = false,
                            Icon = "el-icon-s-tools",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system",
                            OrdinalNumber = 1,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/system",
                            Redirect = "/system/user",
                            Title = "系统管理",
                            Type = 0,
                            Url = "/system"
                        },
                        new
                        {
                            Id = new Guid("9030326b-a5b4-4616-a41b-62624572fdb6"),
                            Code = "用户管理",
                            Component = "system/user/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(7113),
                            Hidden = false,
                            Icon = "el-icon-user",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_user",
                            OrdinalNumber = 2,
                            ParentId = new Guid("01391115-b139-4712-b555-8b241ab356f5"),
                            Path = "user",
                            Title = "用户管理",
                            Type = 1,
                            Url = "user"
                        },
                        new
                        {
                            Id = new Guid("95fe9deb-b8b1-4edc-a045-fcf450c49069"),
                            Code = "技能管理",
                            Component = "system/skill/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(7905),
                            Hidden = false,
                            Icon = "skill",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_skill",
                            OrdinalNumber = 3,
                            ParentId = new Guid("01391115-b139-4712-b555-8b241ab356f5"),
                            Path = "skill",
                            Title = "技能管理",
                            Type = 1,
                            Url = "skill"
                        },
                        new
                        {
                            Id = new Guid("c1884e1a-5cb2-46c0-bb11-efbca217cec8"),
                            Code = "部门管理",
                            Component = "system/department/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(7921),
                            Hidden = false,
                            Icon = "peoples",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_department",
                            OrdinalNumber = 4,
                            ParentId = new Guid("01391115-b139-4712-b555-8b241ab356f5"),
                            Path = "department",
                            Title = "部门管理",
                            Type = 1,
                            Url = "department"
                        },
                        new
                        {
                            Id = new Guid("88c8bf66-8cf7-48d4-910b-316413f39725"),
                            Code = "角色管理",
                            Component = "system/role/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(7978),
                            Hidden = false,
                            Icon = "el-icon-s-opportunity",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_role",
                            OrdinalNumber = 5,
                            ParentId = new Guid("01391115-b139-4712-b555-8b241ab356f5"),
                            Path = "role",
                            Title = "角色管理",
                            Type = 1,
                            Url = "role"
                        },
                        new
                        {
                            Id = new Guid("8dc13613-f35f-4050-acea-56e3143c2c1e"),
                            Code = "菜单管理",
                            Component = "system/menu/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(7987),
                            Hidden = false,
                            Icon = "el-icon-menu",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_menu",
                            OrdinalNumber = 6,
                            ParentId = new Guid("01391115-b139-4712-b555-8b241ab356f5"),
                            Path = "menu",
                            Title = "菜单管理",
                            Type = 1,
                            Url = "menu"
                        },
                        new
                        {
                            Id = new Guid("4d04bdbe-df93-4fec-b41a-484b1d2fc3ed"),
                            Code = "字典项管理",
                            Component = "system/dictionary/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(7997),
                            Hidden = false,
                            Icon = "el-icon-tickets",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_dictionary",
                            OrdinalNumber = 7,
                            ParentId = new Guid("01391115-b139-4712-b555-8b241ab356f5"),
                            Path = "dictionary",
                            Title = "字典项管理",
                            Type = 1,
                            Url = "dictionary"
                        },
                        new
                        {
                            Id = new Guid("e9138d88-16b6-4328-8000-cd199250c52e"),
                            Code = "日志管理",
                            Component = "system/logs/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8005),
                            Hidden = false,
                            Icon = "el-icon-edit-outline",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "system_log",
                            OrdinalNumber = 8,
                            ParentId = new Guid("01391115-b139-4712-b555-8b241ab356f5"),
                            Path = "log",
                            Title = "日志管理",
                            Type = 1,
                            Url = "log"
                        },
                        new
                        {
                            Id = new Guid("efce0453-d19a-4171-8caf-8b8d6dee3688"),
                            Code = "基础数据配置",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8011),
                            Hidden = false,
                            Icon = "el-icon-files",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic",
                            OrdinalNumber = 9,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/basic",
                            Redirect = "/basic/user",
                            Title = "基础数据配置",
                            Type = 0,
                            Url = "/basic"
                        },
                        new
                        {
                            Id = new Guid("a1fc86d7-8d7d-40ba-98a1-a066fd3b4746"),
                            Code = "物种管理",
                            Component = "basic/species/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8021),
                            Hidden = false,
                            Icon = "el-icon-more",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_species",
                            OrdinalNumber = 10,
                            ParentId = new Guid("efce0453-d19a-4171-8caf-8b8d6dee3688"),
                            Path = "species",
                            Title = "物种管理",
                            Type = 1,
                            Url = "species"
                        },
                        new
                        {
                            Id = new Guid("d2ff92e9-35c6-4df9-b3a8-f33d50315367"),
                            Code = "细胞管理",
                            Component = "basic/cells/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8030),
                            Hidden = false,
                            Icon = "cells",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_cells",
                            OrdinalNumber = 11,
                            ParentId = new Guid("efce0453-d19a-4171-8caf-8b8d6dee3688"),
                            Path = "cells",
                            Title = "细胞管理",
                            Type = 1,
                            Url = "cells"
                        },
                        new
                        {
                            Id = new Guid("142c6afc-6c03-493d-bd81-12c573fcdb85"),
                            Code = "位置管理",
                            Component = "basic/place/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8039),
                            Hidden = false,
                            Icon = "el-icon-location",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_place",
                            OrdinalNumber = 12,
                            ParentId = new Guid("efce0453-d19a-4171-8caf-8b8d6dee3688"),
                            Path = "place",
                            Title = "位置管理",
                            Type = 1,
                            Url = "place"
                        },
                        new
                        {
                            Id = new Guid("d9ae9fb8-127e-444d-9cbe-e7e4a71d46c6"),
                            Code = "耗材管理",
                            Component = "basic/material/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8043),
                            Hidden = false,
                            Icon = "el-icon-printer",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_material",
                            OrdinalNumber = 13,
                            ParentId = new Guid("efce0453-d19a-4171-8caf-8b8d6dee3688"),
                            Path = "material",
                            Title = "耗材管理",
                            Type = 1,
                            Url = "material"
                        },
                        new
                        {
                            Id = new Guid("648d6d97-bde2-4e9f-92d1-16deae5cbe06"),
                            Code = "试剂管理",
                            Component = "basic/reagent/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8047),
                            Hidden = false,
                            Icon = "chemistry",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_reagent",
                            OrdinalNumber = 14,
                            ParentId = new Guid("efce0453-d19a-4171-8caf-8b8d6dee3688"),
                            Path = "reagent",
                            Title = "试剂管理",
                            Type = 1,
                            Url = "reagent"
                        },
                        new
                        {
                            Id = new Guid("f0cf415b-d352-413d-9df8-c5d9a25291c4"),
                            Code = "设备管理",
                            Component = "basic/equipment/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8053),
                            Hidden = false,
                            Icon = "el-icon-suitcase",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "basic_equipment",
                            OrdinalNumber = 15,
                            ParentId = new Guid("efce0453-d19a-4171-8caf-8b8d6dee3688"),
                            Path = "equipment",
                            Title = "设备管理",
                            Type = 1,
                            Url = "equipment"
                        },
                        new
                        {
                            Id = new Guid("32e10c4c-fc5c-47a8-8ad8-33d69855d656"),
                            Code = "样本管理",
                            Component = "sample/sample/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8060),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "sample_sample",
                            OrdinalNumber = 16,
                            ParentId = new Guid("efce0453-d19a-4171-8caf-8b8d6dee3688"),
                            Path = "sample",
                            Title = "样本管理",
                            Type = 1,
                            Url = "sample"
                        },
                        new
                        {
                            Id = new Guid("92355936-3b04-41a4-bc8d-692836d0935b"),
                            Code = "任务管理",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8069),
                            Hidden = false,
                            Icon = "el-icon-document-copy",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "task",
                            OrdinalNumber = 17,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/task",
                            Redirect = "/task/today",
                            Title = "任务管理",
                            Type = 0,
                            Url = "/task"
                        },
                        new
                        {
                            Id = new Guid("2e0574c5-cac2-4f0e-a3a9-c63a1cb6f789"),
                            Code = "我的任务",
                            Component = "task/myTask/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8072),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "task_owner",
                            OrdinalNumber = 18,
                            ParentId = new Guid("92355936-3b04-41a4-bc8d-692836d0935b"),
                            Path = "owner",
                            Title = "我的任务",
                            Type = 1,
                            Url = "owner"
                        },
                        new
                        {
                            Id = new Guid("be04a468-225f-45a0-b417-13f3da3618d6"),
                            Code = "今日任务",
                            Component = "task/today/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8082),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "task_today",
                            OrdinalNumber = 19,
                            ParentId = new Guid("92355936-3b04-41a4-bc8d-692836d0935b"),
                            Path = "today",
                            Title = "今日任务",
                            Type = 1,
                            Url = "today"
                        },
                        new
                        {
                            Id = new Guid("a15625b7-1fd1-4116-b4de-4a1cd7b26885"),
                            Code = "项目管理",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8089),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "itiems",
                            OrdinalNumber = 20,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/items",
                            Redirect = "/items",
                            Title = "项目管理",
                            Type = 0,
                            Url = "/items"
                        },
                        new
                        {
                            Id = new Guid("10e18a05-6a25-4f54-b5ff-7f39bbfe0664"),
                            Code = "Protocol Step管理",
                            Component = "items/proStep/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8092),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_protocol",
                            OrdinalNumber = 21,
                            ParentId = new Guid("a15625b7-1fd1-4116-b4de-4a1cd7b26885"),
                            Path = "protocol",
                            Title = "Protocol Step管理",
                            Type = 1,
                            Url = "protocol"
                        },
                        new
                        {
                            Id = new Guid("8d92b9d4-b622-4afd-81b4-adaf4458864e"),
                            Code = "节点管理",
                            Component = "items/node/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8101),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_node",
                            OrdinalNumber = 22,
                            ParentId = new Guid("a15625b7-1fd1-4116-b4de-4a1cd7b26885"),
                            Path = "node",
                            Title = "节点管理",
                            Type = 1,
                            Url = "node"
                        },
                        new
                        {
                            Id = new Guid("1a2722f4-661d-4946-9819-109f9a910dcf"),
                            Code = "项目管理",
                            Component = "items/project/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8110),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_project",
                            OrdinalNumber = 23,
                            ParentId = new Guid("a15625b7-1fd1-4116-b4de-4a1cd7b26885"),
                            Path = "project",
                            Title = "项目管理",
                            Type = 1,
                            Url = "project"
                        },
                        new
                        {
                            Id = new Guid("b7d6ab23-0595-4c2f-8c72-9ee2b0ab66ae"),
                            Code = "Take管理",
                            Component = "items/task/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8118),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_take",
                            OrdinalNumber = 24,
                            ParentId = new Guid("a15625b7-1fd1-4116-b4de-4a1cd7b26885"),
                            Path = "take",
                            Title = "Take管理",
                            Type = 1,
                            Url = "take"
                        },
                        new
                        {
                            Id = new Guid("b407ee58-dd9e-46b3-ab02-489f3ca8a240"),
                            Code = "排程",
                            Component = "items/aps/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8157),
                            Hidden = false,
                            Icon = "el-icon-document",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "items_aps",
                            OrdinalNumber = 25,
                            ParentId = new Guid("a15625b7-1fd1-4116-b4de-4a1cd7b26885"),
                            Path = "aps",
                            Title = "排程",
                            Type = 1,
                            Url = "aps"
                        },
                        new
                        {
                            Id = new Guid("c2556e1e-8d4a-4b20-9fe6-85a1310dc65e"),
                            Code = "生产管理",
                            Component = "Layout",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8161),
                            Hidden = false,
                            Icon = "el-icon-s-cooperation",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce",
                            OrdinalNumber = 26,
                            ParentId = new Guid("00000000-0000-0000-0000-000000000000"),
                            Path = "/produce",
                            Redirect = "/produce",
                            Title = "生产管理",
                            Type = 0,
                            Url = "/produce"
                        },
                        new
                        {
                            Id = new Guid("7b469257-3a7d-49cf-a4b0-a3edc8fac2a0"),
                            Code = "订单",
                            Component = "produce/order/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8164),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_order",
                            OrdinalNumber = 27,
                            ParentId = new Guid("c2556e1e-8d4a-4b20-9fe6-85a1310dc65e"),
                            Path = "order",
                            Title = "订单",
                            Type = 1,
                            Url = "order"
                        },
                        new
                        {
                            Id = new Guid("8a3f1440-446f-4210-b924-411a1e391fe9"),
                            Code = "分子克隆",
                            Component = "produce/clone/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8177),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_clone",
                            OrdinalNumber = 28,
                            ParentId = new Guid("c2556e1e-8d4a-4b20-9fe6-85a1310dc65e"),
                            Path = "clone",
                            Title = "分子克隆",
                            Type = 1,
                            Url = "clone"
                        },
                        new
                        {
                            Id = new Guid("19e0f45f-e3b0-4faa-a920-29b15617474a"),
                            Code = "质粒纯化",
                            Component = "produce/plasmid/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8184),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_plasmid",
                            OrdinalNumber = 29,
                            ParentId = new Guid("c2556e1e-8d4a-4b20-9fe6-85a1310dc65e"),
                            Path = "plasmid",
                            Title = "质粒纯化",
                            Type = 1,
                            Url = "plasmid"
                        },
                        new
                        {
                            Id = new Guid("fbfe945e-f89a-4fbc-8f2a-ee002044e320"),
                            Code = "qPCR检测",
                            Component = "produce/qPCR/indexproduce/qPCR/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8190),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_qPCR",
                            OrdinalNumber = 30,
                            ParentId = new Guid("c2556e1e-8d4a-4b20-9fe6-85a1310dc65e"),
                            Path = "qPCR",
                            Title = "qPCR检测",
                            Type = 1,
                            Url = "qPCR"
                        },
                        new
                        {
                            Id = new Guid("23f2cc65-939f-4ddd-8535-32eda765fc5a"),
                            Code = "SDS-PAGE检测",
                            Component = "produce/SDS/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8198),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_SDS",
                            OrdinalNumber = 31,
                            ParentId = new Guid("c2556e1e-8d4a-4b20-9fe6-85a1310dc65e"),
                            Path = "SDS",
                            Title = "SDS-PAGE检测",
                            Type = 1,
                            Url = "SDS"
                        },
                        new
                        {
                            Id = new Guid("bbdf1ef5-7f83-4be2-bb57-73f61ee99fbb"),
                            Code = "无菌检测",
                            Component = "produce/asepticCheck/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8203),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_asepticCheck",
                            OrdinalNumber = 32,
                            ParentId = new Guid("c2556e1e-8d4a-4b20-9fe6-85a1310dc65e"),
                            Path = "asepticCheck",
                            Title = "无菌检测",
                            Type = 1,
                            Url = "asepticCheck"
                        },
                        new
                        {
                            Id = new Guid("c6a3b1ff-9a7b-4432-a46c-8b7ba677daba"),
                            Code = "入库登记",
                            Component = "produce/wareHouse/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8208),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_wareHouse",
                            OrdinalNumber = 33,
                            ParentId = new Guid("c2556e1e-8d4a-4b20-9fe6-85a1310dc65e"),
                            Path = "wareHouse",
                            Title = "入库登记",
                            Type = 1,
                            Url = "wareHouse"
                        },
                        new
                        {
                            Id = new Guid("265c5849-a45e-4ad1-90ff-20a03f380163"),
                            Code = "发货记录",
                            Component = "produce/deliverGoods/index",
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(8215),
                            Hidden = false,
                            Icon = "el-icon-s-order",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "produce_deliverGoods",
                            OrdinalNumber = 34,
                            ParentId = new Guid("c2556e1e-8d4a-4b20-9fe6-85a1310dc65e"),
                            Path = "deliverGoods",
                            Title = "发货记录",
                            Type = 1,
                            Url = "deliverGoods"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.MolecularCloning", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("CarrierStructure")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Enzyme")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Od")
                        .HasColumnType("real");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("MolecularCloning");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Node", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("CanGenerateResultFile")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanGenerateResultSample")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InteractiveTime")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("NodeTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ProcessId")
                        .HasColumnType("uuid");

                    b.Property<string>("TimeWaitToRun")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("NodeTypeId");

                    b.HasIndex("ProcessId");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeDevice", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "DeviceId");

                    b.HasIndex("DeviceId");

                    b.ToTable("NodeDevices");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeLabware", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabwareId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "LabwareId");

                    b.HasIndex("LabwareId");

                    b.ToTable("NodeLabwares");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeProtocolStep", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProtocolStepId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "ProtocolStepId");

                    b.HasIndex("ProtocolStepId");

                    b.ToTable("NodeProtocolSteps");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeReagent", b =>
                {
                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReagentId")
                        .HasColumnType("uuid");

                    b.HasKey("NodeId", "ReagentId");

                    b.HasIndex("ReagentId");

                    b.ToTable("NodeReagents");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("CarrierStructure")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("DemandTiter")
                        .HasColumnType("real");

                    b.Property<DateTime>("FinisheDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InsertionSequence")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Memo")
                        .HasColumnType("text");

                    b.Property<int>("PackagingTrayNumber")
                        .HasColumnType("integer");

                    b.Property<float>("Plasmid1")
                        .HasColumnType("real");

                    b.Property<float>("Plasmid2")
                        .HasColumnType("real");

                    b.Property<float>("Plasmid3")
                        .HasColumnType("real");

                    b.Property<float>("Plasmid4")
                        .HasColumnType("real");

                    b.Property<int>("PlasmidSize")
                        .HasColumnType("integer");

                    b.Property<int>("PlasmidType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ProductionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SeroType")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<float>("SubpackageCubage")
                        .HasColumnType("real");

                    b.Property<int>("SubpackageNumber")
                        .HasColumnType("integer");

                    b.Property<float>("TotelDemand")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.PlasmidPurification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("CarrierStructure")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Enzyme")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float>("Od")
                        .HasColumnType("real");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("PlasmidSize")
                        .HasColumnType("integer");

                    b.Property<int>("PlasmidType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("PlasmidPurification");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Process", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Processes");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PlannedStartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("ProcessId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProcessId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectTask", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("ProjectId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectUser", b =>
                {
                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ProjectUser");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("DeviceParameterId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceParameterId");

                    b.ToTable("ProtocolSteps");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.QpcrDetection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DetectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<float>("Titer")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("QpcrDetection");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Reagent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArticleNumber")
                        .HasColumnType("text");

                    b.Property<string>("Barcode")
                        .HasColumnType("text");

                    b.Property<string>("Brand")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Reagents");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ReagentUsage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("SolutionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SolutionId");

                    b.ToTable("ReagentUsage");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 301, DateTimeKind.Local).AddTicks(3474),
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "超级管理员"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.RoleMenu", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ButtonId")
                        .HasColumnType("uuid");

                    b.HasKey("RoleId", "MenuId", "ButtonId");

                    b.HasIndex("ButtonId");

                    b.HasIndex("MenuId");

                    b.ToTable("RoleMenu");

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("9030326b-a5b4-4616-a41b-62624572fdb6"),
                            ButtonId = new Guid("1d69715a-8bd6-4ce5-9922-0ae6f8d72aba")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("9030326b-a5b4-4616-a41b-62624572fdb6"),
                            ButtonId = new Guid("c08f730b-9fac-4881-a1cc-e1425b7035a4")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("9030326b-a5b4-4616-a41b-62624572fdb6"),
                            ButtonId = new Guid("13cf0cf9-a7ec-4750-b24d-2fac424eebcc")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("9030326b-a5b4-4616-a41b-62624572fdb6"),
                            ButtonId = new Guid("a549899f-9ea4-47bc-b80c-7d395a8e4d5d")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("9030326b-a5b4-4616-a41b-62624572fdb6"),
                            ButtonId = new Guid("daee4f52-497e-457c-9753-bc03c880a31b")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("95fe9deb-b8b1-4edc-a045-fcf450c49069"),
                            ButtonId = new Guid("09ef5812-179a-4bb9-ae83-6d62dea75d43")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("95fe9deb-b8b1-4edc-a045-fcf450c49069"),
                            ButtonId = new Guid("012cda32-a2fb-43c6-9b76-2ec669f6fd35")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("95fe9deb-b8b1-4edc-a045-fcf450c49069"),
                            ButtonId = new Guid("57b25249-a86b-4c2d-89d1-1bca14d3481a")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("95fe9deb-b8b1-4edc-a045-fcf450c49069"),
                            ButtonId = new Guid("ae81ea0a-28ac-4b30-bcd3-47548f3a1791")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("c1884e1a-5cb2-46c0-bb11-efbca217cec8"),
                            ButtonId = new Guid("3f6b21b8-dfc7-4dc3-b521-11a4e716e025")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("c1884e1a-5cb2-46c0-bb11-efbca217cec8"),
                            ButtonId = new Guid("57ba6a34-b252-4b0d-86d0-126b3ac11a62")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("c1884e1a-5cb2-46c0-bb11-efbca217cec8"),
                            ButtonId = new Guid("8eb144f3-aceb-419c-998a-2544f18fe7c9")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("c1884e1a-5cb2-46c0-bb11-efbca217cec8"),
                            ButtonId = new Guid("552c28a8-d929-4f0c-8f07-0aa5637e5224")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("88c8bf66-8cf7-48d4-910b-316413f39725"),
                            ButtonId = new Guid("68534b4a-66ec-4ed7-9df4-f34af68b94b5")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("88c8bf66-8cf7-48d4-910b-316413f39725"),
                            ButtonId = new Guid("54a5e294-cd7e-4148-8013-3613be0821c6")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("88c8bf66-8cf7-48d4-910b-316413f39725"),
                            ButtonId = new Guid("89cd1433-c1c8-42b5-9dcc-bd1b467c1849")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("88c8bf66-8cf7-48d4-910b-316413f39725"),
                            ButtonId = new Guid("13ef5794-9e54-4b38-8561-cf118e297f41")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("8dc13613-f35f-4050-acea-56e3143c2c1e"),
                            ButtonId = new Guid("9a89e85a-66d0-4215-9778-cb13d4178e2d")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("8dc13613-f35f-4050-acea-56e3143c2c1e"),
                            ButtonId = new Guid("ec128b9a-650e-4ad1-9123-cdc0456956b9")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("8dc13613-f35f-4050-acea-56e3143c2c1e"),
                            ButtonId = new Guid("70ee8547-7219-4adc-b9ff-5ae20781f7e9")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("8dc13613-f35f-4050-acea-56e3143c2c1e"),
                            ButtonId = new Guid("84e8059b-1ab5-4a16-a86a-71576931b20c")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("4d04bdbe-df93-4fec-b41a-484b1d2fc3ed"),
                            ButtonId = new Guid("a606cc31-e09b-438f-ab36-6da256be38b8")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("4d04bdbe-df93-4fec-b41a-484b1d2fc3ed"),
                            ButtonId = new Guid("a7cb75be-93fd-4233-acda-fcf8f5ebb9db")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("4d04bdbe-df93-4fec-b41a-484b1d2fc3ed"),
                            ButtonId = new Guid("e9a78fd1-1e37-4ce9-a6c5-2a9390417979")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("4d04bdbe-df93-4fec-b41a-484b1d2fc3ed"),
                            ButtonId = new Guid("dd138026-b77e-4b7a-be6a-2ae9c558e4db")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("4d04bdbe-df93-4fec-b41a-484b1d2fc3ed"),
                            ButtonId = new Guid("cf6210e8-98c9-4c8a-a0f5-9b0394676a8d")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("e9138d88-16b6-4328-8000-cd199250c52e"),
                            ButtonId = new Guid("e9104308-1843-4750-a147-29df6195f1df")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("a1fc86d7-8d7d-40ba-98a1-a066fd3b4746"),
                            ButtonId = new Guid("5de2cbc6-89c8-43b4-aa74-a9d0b4a5bf3d")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("a1fc86d7-8d7d-40ba-98a1-a066fd3b4746"),
                            ButtonId = new Guid("edda64b2-08df-49ca-9a29-fe569ed8c662")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("a1fc86d7-8d7d-40ba-98a1-a066fd3b4746"),
                            ButtonId = new Guid("d3271dca-fe4c-4b84-b36f-c76347503f3f")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("a1fc86d7-8d7d-40ba-98a1-a066fd3b4746"),
                            ButtonId = new Guid("aa0ffbe2-72eb-41e9-8f3c-6847967d84ba")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("d2ff92e9-35c6-4df9-b3a8-f33d50315367"),
                            ButtonId = new Guid("6311122a-0edd-428e-b5fa-2b7f3be06d7d")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("d2ff92e9-35c6-4df9-b3a8-f33d50315367"),
                            ButtonId = new Guid("2e680f09-9e6a-407d-b4a1-c988005f72c7")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("d2ff92e9-35c6-4df9-b3a8-f33d50315367"),
                            ButtonId = new Guid("5927c638-909c-4411-8bac-0feaf977ae13")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("d2ff92e9-35c6-4df9-b3a8-f33d50315367"),
                            ButtonId = new Guid("fc80caf3-9fcf-4d34-ad8a-f5faa2080828")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("142c6afc-6c03-493d-bd81-12c573fcdb85"),
                            ButtonId = new Guid("8ca3359e-526c-42a4-9af1-edc3a8ce46a3")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("d9ae9fb8-127e-444d-9cbe-e7e4a71d46c6"),
                            ButtonId = new Guid("056b4897-9453-4029-86f5-3cd533dbd33b")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("648d6d97-bde2-4e9f-92d1-16deae5cbe06"),
                            ButtonId = new Guid("1390f9f1-d68e-47f3-a1ce-cf33311b9d7b")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("f0cf415b-d352-413d-9df8-c5d9a25291c4"),
                            ButtonId = new Guid("2a42c765-cedb-4b0f-9c83-dc0bac9a3b58")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("f0cf415b-d352-413d-9df8-c5d9a25291c4"),
                            ButtonId = new Guid("71dbfe2c-c6cf-4bd1-b38f-96f91408a5a6")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("f0cf415b-d352-413d-9df8-c5d9a25291c4"),
                            ButtonId = new Guid("15d664ec-bd9d-4923-a8c5-df07aee6ed86")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("f0cf415b-d352-413d-9df8-c5d9a25291c4"),
                            ButtonId = new Guid("c5ee4c47-f840-4ee0-99f9-6b8e7b7616fd")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("32e10c4c-fc5c-47a8-8ad8-33d69855d656"),
                            ButtonId = new Guid("71e3d88a-3d34-4eb8-b785-8dc84a986d32")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("32e10c4c-fc5c-47a8-8ad8-33d69855d656"),
                            ButtonId = new Guid("31c80f0d-6315-4794-b5e6-cdea6ef3b807")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("32e10c4c-fc5c-47a8-8ad8-33d69855d656"),
                            ButtonId = new Guid("1aad03c0-cbf4-4039-bba4-df3339c65989")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("32e10c4c-fc5c-47a8-8ad8-33d69855d656"),
                            ButtonId = new Guid("a94099cc-00ae-4ffb-b436-7a976ba31ce6")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("2e0574c5-cac2-4f0e-a3a9-c63a1cb6f789"),
                            ButtonId = new Guid("f00a4640-dc72-436b-81e4-5ae24b1a8165")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("2e0574c5-cac2-4f0e-a3a9-c63a1cb6f789"),
                            ButtonId = new Guid("1069195a-0207-4bba-813c-e67af4b7077e")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("2e0574c5-cac2-4f0e-a3a9-c63a1cb6f789"),
                            ButtonId = new Guid("4d7333bc-191f-44f1-9db8-a8f60f7d724c")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("2e0574c5-cac2-4f0e-a3a9-c63a1cb6f789"),
                            ButtonId = new Guid("4837cff0-0a49-4d3a-932f-a2971fa4e9e1")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("be04a468-225f-45a0-b417-13f3da3618d6"),
                            ButtonId = new Guid("751e709a-6320-493e-8ae8-6373155aeb1b")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("be04a468-225f-45a0-b417-13f3da3618d6"),
                            ButtonId = new Guid("a5e3dda1-6c94-4124-8c33-a84c17078465")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("be04a468-225f-45a0-b417-13f3da3618d6"),
                            ButtonId = new Guid("50e243d1-2b09-4d6d-87a3-2c71e5c5d180")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("be04a468-225f-45a0-b417-13f3da3618d6"),
                            ButtonId = new Guid("2ae7e99c-a6d5-44d4-a8f3-507d4cfa4c1d")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("10e18a05-6a25-4f54-b5ff-7f39bbfe0664"),
                            ButtonId = new Guid("58885f2a-cc81-42e3-8d33-5495a9f62e2a")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("10e18a05-6a25-4f54-b5ff-7f39bbfe0664"),
                            ButtonId = new Guid("fbb83a98-faeb-4198-9b70-ad7a13595a77")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("10e18a05-6a25-4f54-b5ff-7f39bbfe0664"),
                            ButtonId = new Guid("1028415e-4daf-438f-bbf6-2c4b63119424")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("10e18a05-6a25-4f54-b5ff-7f39bbfe0664"),
                            ButtonId = new Guid("6c4923e0-b13d-4604-b32d-a03235e24c53")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("8d92b9d4-b622-4afd-81b4-adaf4458864e"),
                            ButtonId = new Guid("718a2127-2b7f-4dff-bfbd-bd523b87b065")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("8d92b9d4-b622-4afd-81b4-adaf4458864e"),
                            ButtonId = new Guid("0ba90fe1-ff93-45ff-b5dd-34bb191913a1")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("8d92b9d4-b622-4afd-81b4-adaf4458864e"),
                            ButtonId = new Guid("4e95416d-fc6a-4990-87a8-9f6bf97d0110")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("8d92b9d4-b622-4afd-81b4-adaf4458864e"),
                            ButtonId = new Guid("9dd59eba-7a0f-4f34-938b-1ef9e0f108a7")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("1a2722f4-661d-4946-9819-109f9a910dcf"),
                            ButtonId = new Guid("a248465e-0469-4d43-9d85-dab7e4c2ee35")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("1a2722f4-661d-4946-9819-109f9a910dcf"),
                            ButtonId = new Guid("f1a7d4cf-039b-423f-8f15-eb024016c271")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("1a2722f4-661d-4946-9819-109f9a910dcf"),
                            ButtonId = new Guid("a4ef5f38-c096-4a41-8ce6-2659b95f2222")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("1a2722f4-661d-4946-9819-109f9a910dcf"),
                            ButtonId = new Guid("441d1453-662c-4227-810b-345ada55a063")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("b7d6ab23-0595-4c2f-8c72-9ee2b0ab66ae"),
                            ButtonId = new Guid("683055b8-6d45-4d3d-b0cc-f1f001e02f21")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("b7d6ab23-0595-4c2f-8c72-9ee2b0ab66ae"),
                            ButtonId = new Guid("68624aca-6794-47af-9b2c-e5163c723ec0")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("b7d6ab23-0595-4c2f-8c72-9ee2b0ab66ae"),
                            ButtonId = new Guid("f87689fa-6ff5-45ae-b53e-e9fb6cb6b7df")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("b7d6ab23-0595-4c2f-8c72-9ee2b0ab66ae"),
                            ButtonId = new Guid("9be7938d-3053-43d8-85fd-f6f6769d016d")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("b407ee58-dd9e-46b3-ab02-489f3ca8a240"),
                            ButtonId = new Guid("c1ec031a-5b4f-4881-9076-25a5ebdc401f")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("7b469257-3a7d-49cf-a4b0-a3edc8fac2a0"),
                            ButtonId = new Guid("c9bfee7a-c77f-4cea-87c2-63514ebb3219")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("7b469257-3a7d-49cf-a4b0-a3edc8fac2a0"),
                            ButtonId = new Guid("48bbc7e8-2bd3-42b8-901f-77a4529f6db0")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("7b469257-3a7d-49cf-a4b0-a3edc8fac2a0"),
                            ButtonId = new Guid("91f6e8f6-f550-410f-8fec-633d7689f24a")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("7b469257-3a7d-49cf-a4b0-a3edc8fac2a0"),
                            ButtonId = new Guid("6a7d097f-9945-418d-82d7-f40544fdce37")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("7b469257-3a7d-49cf-a4b0-a3edc8fac2a0"),
                            ButtonId = new Guid("def600da-e197-4dcf-b83b-4f9a291a5b20")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("7b469257-3a7d-49cf-a4b0-a3edc8fac2a0"),
                            ButtonId = new Guid("046641cc-41ac-4937-b621-f769dbc425d8")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("7b469257-3a7d-49cf-a4b0-a3edc8fac2a0"),
                            ButtonId = new Guid("347b9448-aa51-41c0-9e4f-a9f9ff7a829c")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("7b469257-3a7d-49cf-a4b0-a3edc8fac2a0"),
                            ButtonId = new Guid("bd32aeb7-168c-4a67-90ac-1ee5280d289a")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("8a3f1440-446f-4210-b924-411a1e391fe9"),
                            ButtonId = new Guid("de2bea7f-c84c-4b71-9d27-83fb608138fc")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("8a3f1440-446f-4210-b924-411a1e391fe9"),
                            ButtonId = new Guid("09902b31-1c05-4094-a7e1-3af8b88a5565")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("19e0f45f-e3b0-4faa-a920-29b15617474a"),
                            ButtonId = new Guid("5183be46-2d4e-4418-affe-d7bfd02b603b")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("19e0f45f-e3b0-4faa-a920-29b15617474a"),
                            ButtonId = new Guid("8d5fe15e-6304-40c3-9efd-e7f3cd77912c")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("fbfe945e-f89a-4fbc-8f2a-ee002044e320"),
                            ButtonId = new Guid("364ec6c5-4962-4610-b907-6c189c91b1db")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("fbfe945e-f89a-4fbc-8f2a-ee002044e320"),
                            ButtonId = new Guid("c155eb39-5b7b-4787-b8e3-dfd27b3e2d5b")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("23f2cc65-939f-4ddd-8535-32eda765fc5a"),
                            ButtonId = new Guid("ffda1e5b-1ab8-42a5-86e8-56dfd94153c4")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("23f2cc65-939f-4ddd-8535-32eda765fc5a"),
                            ButtonId = new Guid("075b2343-2578-4227-ae94-f60a5dacbeb6")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("bbdf1ef5-7f83-4be2-bb57-73f61ee99fbb"),
                            ButtonId = new Guid("7a6b5d07-e2c7-4b72-979e-de0464a6f3e9")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("bbdf1ef5-7f83-4be2-bb57-73f61ee99fbb"),
                            ButtonId = new Guid("28c73fcb-3334-417c-a2b8-7acf9fa53d11")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("c6a3b1ff-9a7b-4432-a46c-8b7ba677daba"),
                            ButtonId = new Guid("b3171048-ab03-4ee7-a1f9-55b823909ca4")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("c6a3b1ff-9a7b-4432-a46c-8b7ba677daba"),
                            ButtonId = new Guid("89c69f20-bda0-479d-b194-4727a9c389ff")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("265c5849-a45e-4ad1-90ff-20a03f380163"),
                            ButtonId = new Guid("d4a8ce4c-d623-47cb-9772-772c59a44968")
                        },
                        new
                        {
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f"),
                            MenuId = new Guid("265c5849-a45e-4ad1-90ff-20a03f380163"),
                            ButtonId = new Guid("9cb4f820-f76e-442e-920d-7a7805cc46b2")
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Sample", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CellId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DeletedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRealSample")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime>("NextPhotoTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<string>("Supplier")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CellId");

                    b.ToTable("Samples");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SampleDosage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCell")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("SampleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SolutionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SampleId");

                    b.HasIndex("SolutionId");

                    b.ToTable("SampleDosages");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SdsPageDetection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DetectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPurityQualified")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<float>("ProteinTiter")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("SdsPageDetection");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("Consignee")
                        .HasColumnType("text");

                    b.Property<string>("ContactNumber")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ShipmentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Shipment");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrdinalNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("SkillName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Solution", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProtocolStepId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProtocolStepId")
                        .IsUnique();

                    b.ToTable("Solutions");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Species", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ChineseName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EnglishName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LatinName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SterilityDetection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DetectionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsBacterialPollute")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFluorescence")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("SterilityDetection");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.StockIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CarrierCode")
                        .HasColumnType("text");

                    b.Property<string>("ContractCode")
                        .HasColumnType("text");

                    b.Property<int>("ContractType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<DateTime>("OrderCreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StockInDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("StockIn");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Take", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentTaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<int>("TakeCode")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Takes");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TakeTask", b =>
                {
                    b.Property<Guid>("TakeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.HasKey("TakeId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TakeTasks");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("NodeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProtocolId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid>("TakeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("NodeId");

                    b.HasIndex("ProtocolId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskLabware", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LabwareId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "LabwareId");

                    b.HasIndex("LabwareId");

                    b.ToTable("TaskLabwares");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskReagent", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReagentId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "ReagentId");

                    b.HasIndex("ReagentId");

                    b.ToTable("TaskReagents");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskSample", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SampleId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "SampleId");

                    b.HasIndex("SampleId");

                    b.ToTable("TaskSamples");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskUser", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("TaskId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("TaskUser");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EMail")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.Property<string>("WorkTime")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc09a30c-699c-420a-82fe-37476dda1890"),
                            CreatedAt = new DateTime(2021, 8, 4, 14, 2, 23, 298, DateTimeKind.Local).AddTicks(7643),
                            EMail = "234298234@qq.com",
                            IsActive = true,
                            IsDeleted = false,
                            LastModifiedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MobileNumber = "13523429876",
                            UserName = "admin@admin.com",
                            WorkTime = "8:00-9:00"
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserDepartmentRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "DepartmentId", "RoleId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserDepartmentRole");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("dc09a30c-699c-420a-82fe-37476dda1890"),
                            DepartmentId = new Guid("7f0d9e25-b4b3-4607-a568-fd503eaf5da7"),
                            RoleId = new Guid("aa50c096-e0cd-4ace-8b88-1d968172f22f")
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserSkill", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "SkillId");

                    b.HasIndex("SkillId");

                    b.ToTable("UserSkills");
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Button", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Menu", "Menu")
                        .WithMany("Buttons")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Cell", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Species", "Species")
                        .WithMany("Cells")
                        .HasForeignKey("SpeciesId");

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("CellId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("CellId");

                            b1.ToTable("Cell");

                            b1.WithOwner()
                                .HasForeignKey("CellId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("CellId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("CellId");

                            b1.ToTable("Cell");

                            b1.WithOwner()
                                .HasForeignKey("CellId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Device", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("DeviceId");

                            b1.ToTable("Devices");

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("DeviceId");

                            b1.ToTable("Devices");

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.DeviceParameter", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Device", "Device")
                        .WithMany("DeviceParameters")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.File", "Script", b1 =>
                        {
                            b1.Property<Guid>("DeviceParameterId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("DeviceParameterId");

                            b1.ToTable("DeviceParameters");

                            b1.WithOwner()
                                .HasForeignKey("DeviceParameterId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Labware", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("LabwareId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("LabwareId");

                            b1.ToTable("Labwares");

                            b1.WithOwner()
                                .HasForeignKey("LabwareId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("LabwareId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("LabwareId");

                            b1.ToTable("Labwares");

                            b1.WithOwner()
                                .HasForeignKey("LabwareId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.LabwareUsage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithMany("LabwareUsages")
                        .HasForeignKey("ProtocolStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Line", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "EndNode")
                        .WithMany("EndLines")
                        .HasForeignKey("EndNodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Process", "Process")
                        .WithMany("Lines")
                        .HasForeignKey("ProcessID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "StartNode")
                        .WithMany("StartLines")
                        .HasForeignKey("StartNodeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.MolecularCloning", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("MolecularCloning")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.MolecularCloning", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("MolecularCloningId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("MolecularCloningId");

                            b1.ToTable("MolecularCloning");

                            b1.WithOwner()
                                .HasForeignKey("MolecularCloningId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Node", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Skill", "NodeType")
                        .WithMany("Nodes")
                        .HasForeignKey("NodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Process", null)
                        .WithMany("Nodes")
                        .HasForeignKey("ProcessId");

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.TimeInterval", "Duration", b1 =>
                        {
                            b1.Property<Guid>("NodeId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<int>("Value")
                                .HasColumnType("integer");

                            b1.HasKey("NodeId");

                            b1.ToTable("Nodes");

                            b1.WithOwner()
                                .HasForeignKey("NodeId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeDevice", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Device", "Device")
                        .WithMany("Nodes")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeLabware", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Labware", "Labware")
                        .WithMany("Nodes")
                        .HasForeignKey("LabwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeProtocolStep", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany("ProtocolSteps")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithMany("Nodes")
                        .HasForeignKey("ProtocolStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.NodeReagent", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany()
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Reagent", "Reagent")
                        .WithMany("Nodes")
                        .HasForeignKey("ReagentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.PlasmidPurification", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("PlasmidPurification")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.PlasmidPurification", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("PlasmidPurificationId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("PlasmidPurificationId");

                            b1.ToTable("PlasmidPurification");

                            b1.WithOwner()
                                .HasForeignKey("PlasmidPurificationId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Project", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Process", "Process")
                        .WithMany("Projects")
                        .HasForeignKey("ProcessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectTask", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Projects")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProjectUser", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Project", "Project")
                        .WithMany("Users")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.DeviceParameter", "DeviceParameter")
                        .WithMany("ProtocolSteps")
                        .HasForeignKey("DeviceParameterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.QpcrDetection", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("QpcrDetection")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.QpcrDetection", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Reagent", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "AvailableCubage", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "AvailableQuality", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("ReagentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentId");

                            b1.ToTable("Reagents");

                            b1.WithOwner()
                                .HasForeignKey("ReagentId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.ReagentUsage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Solution", "Solution")
                        .WithMany("ReagentUsages")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Cubage", b1 =>
                        {
                            b1.Property<Guid>("ReagentUsageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentUsageId");

                            b1.ToTable("ReagentUsage");

                            b1.WithOwner()
                                .HasForeignKey("ReagentUsageId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("ReagentUsageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("ReagentUsageId");

                            b1.ToTable("ReagentUsage");

                            b1.WithOwner()
                                .HasForeignKey("ReagentUsageId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.RoleMenu", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Button", "Button")
                        .WithMany("RoleMenus")
                        .HasForeignKey("ButtonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Menu", "Menu")
                        .WithMany("Roles")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Role", "Role")
                        .WithMany("Menus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Sample", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Cell", "Cell")
                        .WithMany("Samples")
                        .HasForeignKey("CellId");

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Cubage", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "PurchaseFrom", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Price", "Price", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Thickness", "Thickness", b1 =>
                        {
                            b1.Property<Guid>("SampleId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleId");

                            b1.ToTable("Samples");

                            b1.WithOwner()
                                .HasForeignKey("SampleId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SampleDosage", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Sample", "Sample")
                        .WithMany("SampleDosages")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Solution", "Solution")
                        .WithMany("SampleDosages")
                        .HasForeignKey("SolutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Cubage", b1 =>
                        {
                            b1.Property<Guid>("SampleDosageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleDosageId");

                            b1.ToTable("SampleDosages");

                            b1.WithOwner()
                                .HasForeignKey("SampleDosageId");
                        });

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Quality", "Quality", b1 =>
                        {
                            b1.Property<Guid>("SampleDosageId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SampleDosageId");

                            b1.ToTable("SampleDosages");

                            b1.WithOwner()
                                .HasForeignKey("SampleDosageId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SdsPageDetection", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("SdsPageDetection")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.SdsPageDetection", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Shipment", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("Shipment")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.Shipment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Address", "DeliveryAddress", b1 =>
                        {
                            b1.Property<Guid>("ShipmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .HasColumnType("text");

                            b1.Property<string>("Detail")
                                .HasColumnType("text");

                            b1.Property<string>("District")
                                .HasColumnType("text");

                            b1.Property<string>("Province")
                                .HasColumnType("text");

                            b1.HasKey("ShipmentId");

                            b1.ToTable("Shipment");

                            b1.WithOwner()
                                .HasForeignKey("ShipmentId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Solution", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithOne("Solution")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.Solution", "ProtocolStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Cubage", "Total", b1 =>
                        {
                            b1.Property<Guid>("SolutionId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Unit")
                                .HasColumnType("text");

                            b1.Property<float>("Value")
                                .HasColumnType("real");

                            b1.HasKey("SolutionId");

                            b1.ToTable("Solutions");

                            b1.WithOwner()
                                .HasForeignKey("SolutionId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Species", b =>
                {
                    b.OwnsOne("Megarobo.KunPengLIMS.Domain.Entities.Link", "SpeciesId", b1 =>
                        {
                            b1.Property<Guid>("SpeciesId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("SpeciesId");

                            b1.ToTable("Species");

                            b1.WithOwner()
                                .HasForeignKey("SpeciesId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.SterilityDetection", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("SterilityDetection")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.SterilityDetection", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.StockIn", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Order", "Order")
                        .WithOne("StockIn")
                        .HasForeignKey("Megarobo.KunPengLIMS.Domain.Entities.StockIn", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Take", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Project", "Project")
                        .WithMany("Takes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TakeTask", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Take", "Take")
                        .WithMany("Tasks")
                        .HasForeignKey("TakeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Takes")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.Task", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Device", "Device")
                        .WithMany("Tasks")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Node", "Node")
                        .WithMany("Tasks")
                        .HasForeignKey("NodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.ProtocolStep", "ProtocolStep")
                        .WithMany("Tasks")
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Megarobo.KunPengLIMS.Domain.Entities.File", "ResultAttachments", b1 =>
                        {
                            b1.Property<Guid>("TaskId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer")
                                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<string>("Url")
                                .HasColumnType("text");

                            b1.HasKey("TaskId", "Id");

                            b1.ToTable("Tasks_ResultAttachments");

                            b1.WithOwner()
                                .HasForeignKey("TaskId");
                        });
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskLabware", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Labware", "Labware")
                        .WithMany("Tasks")
                        .HasForeignKey("LabwareId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Labwares")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskReagent", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Reagent", "Reagent")
                        .WithMany("Tasks")
                        .HasForeignKey("ReagentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Reagents")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskSample", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Sample", "Sample")
                        .WithMany("Tasks")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Samples")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.TaskUser", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Task", "Task")
                        .WithMany("Users")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("Tasks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserDepartmentRole", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Department", "Department")
                        .WithMany("UserRoles")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Role", "Role")
                        .WithMany("UserDepartments")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("DepartmentRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Megarobo.KunPengLIMS.Domain.Entities.UserSkill", b =>
                {
                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.Skill", "Skill")
                        .WithMany("Users")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Megarobo.KunPengLIMS.Domain.Entities.User", "User")
                        .WithMany("Skills")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
